// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package NodesGovernance

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// NodeComputeUsed is an auto generated low-level Go binding around an user-defined struct.
type NodeComputeUsed struct {
	Identifier common.Address
	GpuType    string
	Used       *big.Int
}

// NodeInfo is an auto generated low-level Go binding around an user-defined struct.
type NodeInfo struct {
	Identifier      common.Address
	AliasIdentifier string
	Wallet          common.Address
	GpuTypes        []string
	GpuNums         []*big.Int
}

// NodeState is an auto generated low-level Go binding around an user-defined struct.
type NodeState struct {
	FailedCnt     uint64
	SuccessfulCnt uint64
	ExpectCnt     *big.Int
	Wallet        common.Address
	Identifier    common.Address
}

// NodesRegistryComputeAvailable is an auto generated low-level Go binding around an user-defined struct.
type NodesRegistryComputeAvailable struct {
	GpuType  string
	TotalNum *big.Int
	Used     *big.Int
}

// NodesRegistryNode is an auto generated low-level Go binding around an user-defined struct.
type NodesRegistryNode struct {
	Identifier       common.Address
	AliasIdentifier  string
	RegistrationTime *big.Int
	Active           bool
	Gpus             []NodesRegistryComputeAvailable
	Wallet           common.Address
	Stake            *big.Int
}

// NodesGovernanceMetaData contains all meta data concerning the NodesGovernance contract.
var NodesGovernanceMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"Authorized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"identifier\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"aliasIdentifier\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"gpuTypes\",\"type\":\"string[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"gpuNums\",\"type\":\"uint256[]\"}],\"name\":\"NodeActived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"identifierOfProvider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"identifierOfServer\",\"type\":\"address\"}],\"name\":\"NodeAttached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"identifier\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"aliasIdentifier\",\"type\":\"string\"}],\"name\":\"NodeDeregistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"identifierOfProvider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"identifierOfServer\",\"type\":\"address\"}],\"name\":\"NodeDetached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"identifier\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"aliasIdentifier\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"gpuTypes\",\"type\":\"string[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"gpuNums\",\"type\":\"uint256[]\"}],\"name\":\"NodeRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"failedCnt\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"successfulCnt\",\"type\":\"uint64\"},{\"internalType\":\"uint128\",\"name\":\"expectCnt\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"identifier\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"structNodeState[]\",\"name\":\"states\",\"type\":\"tuple[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalQuota\",\"type\":\"uint256\"}],\"name\":\"SettlementResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"name\":\"ValidationResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expectedCompletionTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"candidate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"validators\",\"type\":\"address[]\"}],\"name\":\"ValidationStarted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MIN_CANDIDATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VALIDATOR_PER_CANDIDATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startIndex\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"gpuTypes\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"gpuNums\",\"type\":\"uint256[]\"}],\"name\":\"allocGPU\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"identifier\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"gpuType\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"used\",\"type\":\"uint256\"}],\"internalType\":\"structNodeComputeUsed[]\",\"name\":\"gpuNodes\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"len\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allocator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"at\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"identifier\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"aliasIdentifier\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"registrationTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"gpuType\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"used\",\"type\":\"uint256\"}],\"internalType\":\"structNodesRegistry.ComputeAvailable[]\",\"name\":\"gpus\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"}],\"internalType\":\"structNodesRegistry.Node\",\"name\":\"node\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"server\",\"type\":\"address\"}],\"name\":\"attach\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"candidatePerRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"numOfNodes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedCompletionTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"identifier\",\"type\":\"address\"}],\"name\":\"check\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentDetectCircleId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentDetectCircleStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRoundId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRoundStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deregisterNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"server\",\"type\":\"address\"}],\"name\":\"detach\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"detectDurationTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"detectPeriods\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"identifier\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"gpuType\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"used\",\"type\":\"uint256\"}],\"internalType\":\"structNodeComputeUsed[]\",\"name\":\"gpuNodes\",\"type\":\"tuple[]\"}],\"name\":\"freeGPU\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"identifier\",\"type\":\"address\"}],\"name\":\"get\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"identifier\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"aliasIdentifier\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"registrationTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"gpuType\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"used\",\"type\":\"uint256\"}],\"internalType\":\"structNodesRegistry.ComputeAvailable[]\",\"name\":\"gpus\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"}],\"internalType\":\"structNodesRegistry.Node\",\"name\":\"node\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"getAttach\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"detectPeriodId\",\"type\":\"uint256\"}],\"name\":\"getOnePeriodSettlement\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"failedCnt\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"successfulCnt\",\"type\":\"uint64\"},{\"internalType\":\"uint128\",\"name\":\"expectCnt\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"identifier\",\"type\":\"address\"}],\"internalType\":\"structNodeState[]\",\"name\":\"states\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"totalQuotas\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"getRoundCandidates\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"candidates\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"getValidatorsOfCandidate\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"validators\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"gpuSummary\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"gpuType\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"used\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"gpuTypeOfNodes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"length\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"identifier\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"aliasIdentifier\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"gpuTypes\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"gpuNums\",\"type\":\"uint256[]\"}],\"internalType\":\"structNodeInfo[]\",\"name\":\"_nodesInfos\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"_allocator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_roundDurationTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_stakeToken\",\"type\":\"address\"}],\"name\":\"nodesGovernance_initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"aliasIdentifier\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"gpuTypes\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"gpuNums\",\"type\":\"uint256[]\"}],\"name\":\"registerNode\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roundDurationTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"detectPeriodId\",\"type\":\"uint256\"}],\"name\":\"settlementOnePeriod\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"failedCnt\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"successfulCnt\",\"type\":\"uint64\"},{\"internalType\":\"uint128\",\"name\":\"expectCnt\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"identifier\",\"type\":\"address\"}],\"internalType\":\"structNodeState[]\",\"name\":\"states\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"totalQuotas\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeToken\",\"outputs\":[{\"internalType\":\"contractIStake\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startNewValidationRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"detectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"validatorsPerCandidate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"candidate\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"votedPerCandidate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"candidate\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"yesVotes\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"noVotes\",\"type\":\"uint128\"},{\"internalType\":\"bool\",\"name\":\"completed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x60806040526110e0600a5560b4600b5534801561001b57600080fd5b50614ff38061002b6000396000f3fe6080604052600436106101f95760003560e01c8063698083af1161010d578063c7edca7a116100a0578063e2cdd42a1161006f578063e2cdd42a1461067d578063ed38ed0d1461069d578063efa219e0146106e6578063efca74d214610706578063f67c5bdc14610719576101f9565b8063c7edca7a14610607578063ceb6c34314610627578063de13727014610647578063e0886f901461065d576101f9565b8063a7f32314116100dc578063a7f32314146102f2578063aa5dcecc1461058a578063c23697a8146105aa578063c2bc2efc146105da576101f9565b8063698083af146104d25780637a0ca1e21461053457806393e9d413146105545780639cbe5efd14610574576101f9565b80632ad4f0ad1161019057806351ed6a301161015f57806351ed6a30146104035780635ff5c03c146104235780636252e1c21461046f5780636300c9511461049d57806363c94199146104bd576101f9565b80632ad4f0ad14610307578063380dd901146103a957806349d2b420146103bf5780634d4fc0b8146103d5576101f9565b8063191805d8116101cc578063191805d8146102a35780631bb12a43146102c75780631f7b6d32146102dd57806326cc3399146102f2576101f9565b8063036fe9c2146101fe5780630732bd7e1461022057806318767f311461025657806318b1c0811461028e575b600080fd5b34801561020a57600080fd5b5061021e6102193660046144c6565b610748565b005b34801561022c57600080fd5b5061024061023b3660046145c3565b610a6e565b60405161024d9190614aac565b60405180910390f35b34801561026257600080fd5b50610276610271366004614631565b610aed565b6040516001600160a01b03909116815260200161024d565b34801561029a57600080fd5b5061021e610b32565b3480156102af57600080fd5b506102b960145481565b60405190815260200161024d565b3480156102d357600080fd5b506102b960155481565b3480156102e957600080fd5b506102b9610b3d565b3480156102fe57600080fd5b506102b9600581565b34801561031357600080fd5b506103706103223660046145c3565b600e6020908152600092835260408084209091529082529020805460018201546002909201546001600160a01b03909116916001600160801b0380821692600160801b909204169060ff1684565b604080516001600160a01b039590951685526001600160801b03938416602086015291909216908301521515606082015260800161024d565b3480156103b557600080fd5b506102b960175481565b3480156103cb57600080fd5b506102b9600a5481565b3480156103e157600080fd5b506103f56103f03660046145ab565b610b4e565b60405161024d929190614b89565b34801561040f57600080fd5b50600954610276906001600160a01b031681565b34801561042f57600080fd5b5061045a61043e3660046145ab565b600f602052600090815260409020600181015460029091015482565b6040805192835260208301919091520161024d565b34801561047b57600080fd5b5061048f61048a366004614665565b61124b565b60405161024d929190614af9565b3480156104a957600080fd5b506103f56104b83660046145ab565b6119b4565b3480156104c957600080fd5b5061045a611b89565b3480156104de57600080fd5b506105146104ed3660046145ab565b60106020526000908152604090208054600182015460028301546003909301549192909184565b60408051948552602085019390935291830152606082015260800161024d565b34801561054057600080fd5b5061021e61054f366004614390565b611d2b565b34801561056057600080fd5b5061024061056f3660046145ab565b611e22565b34801561058057600080fd5b506102b960165481565b34801561059657600080fd5b50600854610276906001600160a01b031681565b3480156105b657600080fd5b506105ca6105c5366004614390565b611e8f565b604051901515815260200161024d565b3480156105e657600080fd5b506105fa6105f5366004614390565b611ec7565b60405161024d9190614c44565b34801561061357600080fd5b50610240610622366004614390565b6120e2565b34801561063357600080fd5b5061021e610642366004614390565b612106565b34801561065357600080fd5b506102b9600b5481565b34801561066957600080fd5b506105fa6106783660046145ab565b612201565b34801561068957600080fd5b5061021e6106983660046145ee565b61242d565b3480156106a957600080fd5b506102b96106b836600461447b565b6004602090815260009283526040909220815180830184018051928152908401929093019190912091525481565b3480156106f257600080fd5b5061021e610701366004614505565b612827565b61021e6107143660046143aa565b612908565b34801561072557600080fd5b50610739610734366004614571565b612921565b60405161024d93929190614c1f565b6008546001600160a01b0316331461079c5760405162461bcd60e51b815260206004820152601260248201527127b7363c903337b91030b63637b1b0ba37b960711b60448201526064015b60405180910390fd5b60005b81811015610a695760008383838181106107c957634e487b7160e01b600052603260045260246000fd5b90506020028101906107db9190614de6565b6107e9906020810190614390565b90506001600160a01b0381166108365760405162461bcd60e51b815260206004820152601260248201527124b73b30b634b21034b232b73a34b334b2b960711b6044820152606401610793565b6001600160a01b0381166000908152600260205260409020600381015460ff1615610a54576001600160a01b0382166000908152600460205260408120908187878781811061089557634e487b7160e01b600052603260045260246000fd5b90506020028101906108a79190614de6565b6108b5906020810190614da2565b6040516108c392919061487c565b9081526020016040518091039020549050600081116109175760405162461bcd60e51b815260206004820152601060248201526f496e76616c696420677075207479706560801b6044820152606401610793565b86868681811061093757634e487b7160e01b600052603260045260246000fd5b90506020028101906109499190614de6565b604001356004840161095c600184614e86565b8154811061097a57634e487b7160e01b600052603260045260246000fd5b9060005260206000209060030201600201600082825461099a9190614e86565b909155506000905060058888888181106109c457634e487b7160e01b600052603260045260246000fd5b90506020028101906109d69190614de6565b6109e4906020810190614da2565b6040516109f292919061487c565b90815260200160405180910390209050878787818110610a2257634e487b7160e01b600052603260045260246000fd5b9050602002810190610a349190614de6565b60400135816002016000828254610a4b9190614e86565b90915550505050505b50508080610a6190614f2f565b91505061079f565b505050565b6000828152600d602090815260408083206001600160a01b0385168452825291829020805483518184028101840190945280845260609392830182828015610adf57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610ac1575b505050505090505b92915050565b600d6020528260005260406000206020528160005260406000208181548110610b1557600080fd5b6000918252602090912001546001600160a01b0316925083915050565b610b3b336129d6565b565b6000610b496006612d47565b905090565b606060006014548310610ba35760405162461bcd60e51b815260206004820152601e60248201527f536574746c656d656e7420666f7220646574656374656420706572696f6400006044820152606401610793565b60008381526010602052604090208054610bff5760405162461bcd60e51b815260206004820152601d60248201527f44657465637420706572696f64206964206973206e6f742065786973740000006044820152606401610793565b6000848152601260205260409020805415610c5c5760405162461bcd60e51b815260206004820152601760248201527f506572696f6420686173206265656e20736574746c65640000000000000000006044820152606401610793565b81546001830154600091610c6f91614e86565b610c7a906001614e3b565b905060005b610c87610b3d565b811015610e9a576000610c9982612201565b905080606001511580610cb3575084600201548160400151115b15610cbe5750610e88565b8381600001519080600181540180825580915050600190039060005260206000200160009091909190916101000a8154816001600160a01b0302191690836001600160a01b031602179055506040518060a0016040528060006001600160401b0316815260200160006001600160401b03168152602001846001600160801b031681526020018260a001516001600160a01b0316815260200182600001516001600160a01b0316815250601160008a8152602001908152602001600020600083600001516001600160a01b03166001600160a01b0316815260200190815260200160002060008201518160000160006101000a8154816001600160401b0302191690836001600160401b0316021790555060208201518160000160086101000a8154816001600160401b0302191690836001600160401b0316021790555060408201518160000160106101000a8154816001600160801b0302191690836001600160801b0316021790555060608201518160010160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060808201518160020160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550905050505b80610e9281614f2f565b915050610c7f565b5082545b8360010154811161104c576000818152600f602052604090206001810154610ec69087614e3b565b955060005b8154811015611037576000826000018281548110610ef957634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910154868352600e825260408084206001600160a01b03928316808652935290922080549193509116610f38575050611025565b60008b81526011602090815260408083206001600160a01b03861684529091529020600282015460ff16610faa5780546001600160401b0316816000610f7d83614f4a565b91906101000a8154816001600160401b0302191690836001600160401b0316021790555050505050611025565b60018201546001600160801b03600160801b82048116911611610fde5780546001600160401b0316816000610f7d83614f4a565b8054600160401b90046001600160401b0316816008610ffc83614f4a565b91906101000a8154816001600160401b0302191690836001600160401b03160217905550505050505b8061102f81614f2f565b915050610ecb565b5050808061104490614f2f565b915050610e9e565b50600086815260136020526040902084905581546001600160401b0381111561108557634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156110de57816020015b6040805160a0810182526000808252602080830182905292820181905260608201819052608082015282526000199092019101816110a35790505b50945060005b825481101561120957600083828154811061110f57634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101548a83526011825260408084206001600160a01b03928316808652935290922060028101549193509116156111f45760008981526011602090815260408083206001600160a01b03868116855290835292819020815160a08101835281546001600160401b038082168352600160401b82041694820194909452600160801b9093046001600160801b03169183019190915260018101548316606083015260020154909116608082015288518990859081106111e857634e487b7160e01b600052603260045260246000fd5b60200260200101819052505b5050808061120190614f2f565b9150506110e4565b507fd51417935ddbb98970f20a5f6f9c5070ce90768d0e3bfaba49e7e2f8621debac858560405161123b929190614b89565b60405180910390a1505050915091565b6008546060906000906001600160a01b031633146112a05760405162461bcd60e51b815260206004820152601260248201527127b7363c903337b91030b63637b1b0ba37b960711b6044820152606401610793565b6000856001600160401b038111156112c857634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156112f1578160200160208202803683370190505b5090506000805b878110156114ac57600060058a8a8481811061132457634e487b7160e01b600052603260045260246000fd5b90506020028101906113369190614da2565b60405161134492919061487c565b9081526020016040518091039020905087878381811061137457634e487b7160e01b600052603260045260246000fd5b905060200201358160020154826001015461138f9190614e86565b10156113d15760405162461bcd60e51b81526020600482015260116024820152700cee0ea40d2e640dcdee840cadcdeeaced607b1b6044820152606401610793565b8787838181106113f157634e487b7160e01b600052603260045260246000fd5b9050602002013581600201600082825461140b9190614e3b565b90915550889050878381811061143157634e487b7160e01b600052603260045260246000fd5b9050602002013584838151811061145857634e487b7160e01b600052603260045260246000fd5b60200260200101818152505087878381811061148457634e487b7160e01b600052603260045260246000fd5b90506020020135836114969190614e3b565b92505080806114a490614f2f565b9150506112f8565b50866114b86006612d47565b6114c29190614e67565b6001600160401b038111156114e757634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561154557816020015b611532604051806060016040528060006001600160a01b0316815260200160608152602001600081525090565b8152602001906001900390816115055790505b509350885b6115546006612d47565b61155e908b614e3b565b8110801561156c5750600082115b156119a75760006115926115806006612d47565b61158a9084614f67565b600690612d51565b6001600160a01b038116600090815260026020526040902060038101549192509060ff166115c1575050611995565b6001600160a01b0382166000908152600460205260408120905b8b811080156115ea5750600086115b1561199057600087828151811061161157634e487b7160e01b600052603260045260246000fd5b6020026020010151116116235761197e565b6000828e8e8481811061164657634e487b7160e01b600052603260045260246000fd5b90506020028101906116589190614da2565b60405161166692919061487c565b90815260200160405180910390205490508060001415611686575061197e565b600060048501611697600184614e86565b815481106116b557634e487b7160e01b600052603260045260246000fd5b906000526020600020906003020190506000816002015482600101546116db9190614e86565b9050600081116116ed5750505061197e565b868c8c8151811061170e57634e487b7160e01b600052603260045260246000fd5b60209081029190910101516001600160a01b0390911690528f8f8581811061174657634e487b7160e01b600052603260045260246000fd5b90506020028101906117589190614da2565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250508e518f92508e915081106117ae57634e487b7160e01b600052603260045260246000fd5b602002602001015160200181905250808a85815181106117de57634e487b7160e01b600052603260045260246000fd5b6020026020010151111561186f57808a858151811061180d57634e487b7160e01b600052603260045260246000fd5b602002602001018181516118219190614e86565b90525061182e818a614e86565b9850808c8c8151811061185157634e487b7160e01b600052603260045260246000fd5b6020908102919091010151604001526001820154600283015561196d565b89848151811061188f57634e487b7160e01b600052603260045260246000fd5b60200260200101518260020160008282546118aa9190614e3b565b925050819055508984815181106118d157634e487b7160e01b600052603260045260246000fd5b6020026020010151896118e49190614e86565b985089848151811061190657634e487b7160e01b600052603260045260246000fd5b60200260200101518c8c8151811061192e57634e487b7160e01b600052603260045260246000fd5b6020026020010151604001818152505060008a858151811061196057634e487b7160e01b600052603260045260246000fd5b6020026020010181815250505b61197860018c614e3b565b9a505050505b8061198881614f2f565b9150506115db565b505050505b8061199f81614f2f565b91505061154a565b5050509550959350505050565b6000818152601260205260408120805460609291906001600160401b038111156119ee57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611a4757816020015b6040805160a081018252600080825260208083018290529282018190526060820181905260808201528252600019909201910181611a0c5790505b50925060005b8154811015611b72576000828281548110611a7857634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101548883526011825260408084206001600160a01b0392831680865293529092206002810154919350911615611b5d5760008781526011602090815260408083206001600160a01b03868116855290835292819020815160a08101835281546001600160401b038082168352600160401b82041694820194909452600160801b9093046001600160801b0316918301919091526001810154831660608301526002015490911660808201528651879085908110611b5157634e487b7160e01b600052603260045260246000fd5b60200260200101819052505b50508080611b6a90614f2f565b915050611a4d565b505050600082815260136020526040902054915091565b6000806000429050600b5460175482611ba29190614e86565b11611bef5760405162461bcd60e51b815260206004820152601c60248201527f50726576696f757320726f756e64206973206e6f7420656e64696e67000000006044820152606401610793565b60168054906000611bff83614f2f565b90915550506017819055600a54601554611c199083614e86565b1115611c8d5760148054906000611c2f83614f2f565b9091555050601581905560408051608081018252601654808252602080830191825282840185815260608401868152601454600090815260109093529490912092518355905160018301555160028201559051600390910155611cb6565b601654601480546000908152601060205260408082206001019390935590548152206003018190555b600b54611cc39082614e3b565b6016546000908152600f6020526040902060020155601454611ce490612d64565b600f6000601654815260200190815260200160002060010181905550611d1c601454601654600b5484611d179190614e3b565b612ddc565b60145460165492509250509091565b33600090815260026020526040902080546001600160a01b0316611d8c5760405162461bcd60e51b81526020600482015260186024820152771259195b9d1a599a595c881b5d5cdd08189948195e1a5cdd60421b6044820152606401610793565b33600090815260016020526040812090611da68285612f44565b905080611de65760405162461bcd60e51b815260206004820152600e60248201526d18da1a5b19081a5cc8195e1a5cdd60921b6044820152606401610793565b6040516001600160a01b0385169033907f042e2dbbe7288392f225b5cc7f610946ae1a1e8673b3f8ce4f6fc3bc6dee5aa690600090a350505050565b6000818152600f6020908152604091829020805483518184028101840190945280845260609392830182828015611e8257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611e64575b505050505090505b919050565b6001600160a01b0381166000908152600260205260408120600381015460ff1615611ebe576001915050611e8a565b50600092915050565b611ecf6140c1565b6001600160a01b03808316600090815260026020908152604091829020825160e081019093528054909316825260018301805492939291840191611f1290614ecd565b80601f0160208091040260200160405190810160405280929190818152602001828054611f3e90614ecd565b8015611f8b5780601f10611f6057610100808354040283529160200191611f8b565b820191906000526020600020905b815481529060010190602001808311611f6e57829003601f168201915b50505050508152602001600282015481526020016003820160009054906101000a900460ff1615151515815260200160048201805480602002602001604051908101604052809291908181526020016000905b828210156120b6578382906000526020600020906003020160405180606001604052908160008201805461201190614ecd565b80601f016020809104026020016040519081016040528092919081815260200182805461203d90614ecd565b801561208a5780601f1061205f5761010080835404028352916020019161208a565b820191906000526020600020905b81548152906001019060200180831161206d57829003601f168201915b505050505081526020016001820154815260200160028201548152505081526020019060010190611fde565b5050509082525060058201546001600160a01b0316602082015260069091015460409091015292915050565b6001600160a01b0381166000908152600160205260409020606090610ae790612f59565b33600090815260026020526040902080546001600160a01b03166121675760405162461bcd60e51b81526020600482015260186024820152771259195b9d1a599a595c881b5d5cdd08189948195e1a5cdd60421b6044820152606401610793565b336000908152600160205260408120906121818285612f66565b9050806121c55760405162461bcd60e51b815260206004820152601260248201527118da1a5b19081a5cc81b9bdd08195e1a5cdd60721b6044820152606401610793565b6040516001600160a01b0385169033907f864dd06d15940858b627540246db79e66082ff76b9712b0bb5d483d168b1cd1890600090a350505050565b6122096140c1565b6000612216600684612d51565b6001600160a01b03808216600090815260026020908152604091829020825160e08101909352805490931682526001830180549495509193908401919061225c90614ecd565b80601f016020809104026020016040519081016040528092919081815260200182805461228890614ecd565b80156122d55780601f106122aa576101008083540402835291602001916122d5565b820191906000526020600020905b8154815290600101906020018083116122b857829003601f168201915b50505050508152602001600282015481526020016003820160009054906101000a900460ff1615151515815260200160048201805480602002602001604051908101604052809291908181526020016000905b82821015612400578382906000526020600020906003020160405180606001604052908160008201805461235b90614ecd565b80601f016020809104026020016040519081016040528092919081815260200182805461238790614ecd565b80156123d45780601f106123a9576101008083540402835291602001916123d4565b820191906000526020600020905b8154815290600101906020018083116123b757829003601f168201915b505050505081526020016001820154815260200160028201548152505081526020019060010190612328565b5050509082525060058201546001600160a01b031660208201526006909101546040909101529392505050565b6000838152600f60205260409020600281015442111561248f5760405162461bcd60e51b815260206004820152601860248201527f56616c69646174696f6e2074696d6520657863656564656400000000000000006044820152606401610793565b6000848152600c602090815260408083206001600160a01b03871684528252808320338452918290529091205460019060ff1660038111156124e157634e487b7160e01b600052602160045260246000fd5b146125225760405162461bcd60e51b815260206004820152601160248201527024b73b30b634b2103b30b634b230ba37b960791b6044820152606401610793565b6000858152600e602090815260408083206001600160a01b03881684529091529020600281015460ff16156125995760405162461bcd60e51b815260206004820152601c60248201527f56616c69646174696f6e20616c726561647920636f6d706c65746564000000006044820152606401610793565b83156125fd576001810180546001600160801b03169060006125ba83614f08565b82546101009290920a6001600160801b0381810219909316919092169190910217905550336000908152602083905260409020805460ff1916600317905561265e565b600181018054600160801b90046001600160801b031690601061261f83614f08565b82546101009290920a6001600160801b0381810219909316919092169190910217905550336000908152602083905260409020805460ff191660021790555b6000868152600d602090815260408083206001600160a01b0389168452909152902054600182015481906126a4906001600160801b03600160801b820481169116614e10565b6001600160801b03161480156126d0575060018201546001600160801b03808216600160801b90920416145b1561272d5760028201805460ff191660011790556040805188815233602082015260008183015290517f92de7c81b7cf6c7977d7cd091ccd01996264a02b7dbbce5d2a2524a8daabe769916060908290030190a150505050610a69565b612738600282614e53565b60018301546001600160801b031611156127a85760028201805460ff1916600117905561276486612f7b565b6040805188815233602082015260018183015290517f92de7c81b7cf6c7977d7cd091ccd01996264a02b7dbbce5d2a2524a8daabe7699181900360600190a161281e565b6127b3600282614e53565b6001830154600160801b90046001600160801b0316111561281e5760028201805460ff191660011790556040805188815233602082015260008183015290517f92de7c81b7cf6c7977d7cd091ccd01996264a02b7dbbce5d2a2524a8daabe769916060908290030190a15b50505050505050565b600054610100900460ff166128425760005460ff1615612846565b303b155b6128a95760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610793565b600054610100900460ff161580156128cb576000805461ffff19166101011790555b6128d78686868561327c565b426017556128e6836018614e67565b600a55600b8390558015612900576000805461ff00191690555b505050505050565b612918873388888888888861356b565b61281e33613a81565b805160208183018101805160058252928201919093012091528054819061294790614ecd565b80601f016020809104026020016040519081016040528092919081815260200182805461297390614ecd565b80156129c05780601f10612995576101008083540402835291602001916129c0565b820191906000526020600020905b8154815290600101906020018083116129a357829003601f168201915b5050505050908060010154908060020154905083565b6001600160a01b038116612a215760405162461bcd60e51b815260206004820152601260248201527124b73b30b634b21034b232b73a34b334b2b960711b6044820152606401610793565b6001600160a01b0380821660009081526002602052604090208054909116612a825760405162461bcd60e51b81526020600482015260146024820152731259195b9d1a599a595c881b9bdd08195e1a5cdd60621b6044820152606401610793565b6001600160a01b0382166000908152600160205260409020612aa390612d47565b15612af05760405162461bcd60e51b815260206004820152601760248201527f4964656e74696669657220686173206368696c6472656e0000000000000000006044820152606401610793565b6000816001018054612b0190614ecd565b80601f0160208091040260200160405190810160405280929190818152602001828054612b2d90614ecd565b8015612b7a5780601f10612b4f57610100808354040283529160200191612b7a565b820191906000526020600020905b815481529060010190602001808311612b5d57829003601f168201915b5050505050905060005b6004830154811015612c57576000836004018281548110612bb557634e487b7160e01b600052603260045260246000fd5b906000526020600020906003020190508060010154600582600001604051612bdd91906148a8565b90815260200160405180910390206001016000828254612bfd9190614e86565b90915550506002810154604051600590612c189084906148a8565b90815260200160405180910390206002016000828254612c389190614e86565b9091555050600060029091015580612c4f81614f2f565b915050612b84565b50600381604051612c68919061488c565b908152604080516020928190038301902080546001600160a01b03199081169091556001600160a01b038616600090815260029093529082208054909116815590612cb66001830182614112565b60006002830181905560038301805460ff19169055612cd9906004840190614151565b506005810180546001600160a01b03191690556000600691820155612cfe9084612f66565b50826001600160a01b03167f60d01d146c7aa1a7d4e3fdd5543872f7d5b2a241980a66b3552ae1a86ae184534283604051612d3a929190614cd8565b60405180910390a2505050565b6000610ae7825490565b6000612d5d8383613c7f565b9392505050565b6000818152601060205260408120815b612d7c610b3d565b811015612dd557612d8c81612201565b606001511580612dab57508160020154612da582612201565b60400151115b15612db557612dc3565b82612dbf81614f2f565b9350505b80612dcd81614f2f565b915050612d74565b5050919050565b6000838152601060205260408120815b600583101561290057600042612e03600143614e86565b6040805160208101939093529040908201526060810183905260800160405160208183030381529060405290506000612e3a610b3d565b82516020840120612e4b9190614f67565b90506000612e5882612201565b9050846002015481604001511180612e7257508060600151155b15612e7f57505050612f32565b6000888152600d6020908152604080832084516001600160a01b0316845290915290205415612eb057505050612f32565b85612eba81614f2f565b965050612ecc81600001518985613cb7565b80516000898152600d6020908152604080832085516001600160a01b031684529091529081902090517f71afff60b83105500984ce43d4633544224775a10de240da021704c056b58bdb92612f26928c928c929190614cf1565b60405180910390a15050505b80612f3c81614f2f565b915050612dec565b6000612d5d836001600160a01b038416613efa565b60606000612d5d83613f49565b6000612d5d836001600160a01b038416613fa4565b6001600160a01b0380821660009081526002602052604090208054909116612fdc5760405162461bcd60e51b81526020600482015260146024820152731259195b9d1a599a595c881b9bdd08195e1a5cdd60621b6044820152606401610793565b600381015460ff166132785760038101805460ff1916600117905560048101546000906001600160401b0381111561302457634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561305757816020015b60608152602001906001900390816130425790505b5060048301549091506000906001600160401b0381111561308857634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156130b1578160200160208202803683370190505b50905060005b600484015481101561321d578360040181815481106130e657634e487b7160e01b600052603260045260246000fd5b9060005260206000209060030201600001805461310290614ecd565b80601f016020809104026020016040519081016040528092919081815260200182805461312e90614ecd565b801561317b5780601f106131505761010080835404028352916020019161317b565b820191906000526020600020905b81548152906001019060200180831161315e57829003601f168201915b50505050508382815181106131a057634e487b7160e01b600052603260045260246000fd5b60200260200101819052508360040181815481106131ce57634e487b7160e01b600052603260045260246000fd5b90600052602060002090600302016001015482828151811061320057634e487b7160e01b600052603260045260246000fd5b60209081029190910101528061321581614f2f565b9150506130b7565b50600583015483546040516001600160a01b03928316927fb0a73f160683fa6bd1601bd25cd9e2addc090f0a74959bf51c6a2a4560af6f5f9261326d9291169042906001890190889088906149ec565b60405180910390a250505b5050565b600054610100900460ff166132e75760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610793565b60005b838110156134975761343d85858381811061331557634e487b7160e01b600052603260045260246000fd5b90506020028101906133279190614dfb565b613338906060810190604001614390565b86868481811061335857634e487b7160e01b600052603260045260246000fd5b905060200281019061336a9190614dfb565b613378906020810190614390565b87878581811061339857634e487b7160e01b600052603260045260246000fd5b90506020028101906133aa9190614dfb565b6133b8906020810190614da2565b8989878181106133d857634e487b7160e01b600052603260045260246000fd5b90506020028101906133ea9190614dfb565b6133f8906060810190614d5b565b8b8b8981811061341857634e487b7160e01b600052603260045260246000fd5b905060200281019061342a9190614dfb565b613438906080810190614d5b565b61356b565b61348585858381811061346057634e487b7160e01b600052603260045260246000fd5b90506020028101906134729190614dfb565b613480906020810190614390565b612f7b565b8061348f81614f2f565b9150506132ea565b506001600160a01b0382166134e25760405162461bcd60e51b815260206004820152601160248201527024b73b30b634b21030b63637b1b0ba37b960791b6044820152606401610793565b600880546001600160a01b0319166001600160a01b038481169190911790915581166135465760405162461bcd60e51b815260206004820152601360248201527224b73b30b634b21039ba30b5b2903a37b5b2b760691b6044820152606401610793565b600980546001600160a01b0319166001600160a01b0392909216919091179055505050565b828114801561357957508015155b6135b85760405162461bcd60e51b815260206004820152601060248201526f496e76616c696420475055206461746160801b6044820152606401610793565b6001600160a01b038816158015906135d857506001600160a01b03871615155b80156135e357508415155b61362f5760405162461bcd60e51b815260206004820152601c60248201527f496e76616c69642077616c6c6574206f72206964656e746966696572000000006044820152606401610793565b6001600160a01b03808816600090815260026020526040902080549091161561368d5760405162461bcd60e51b815260206004820152601060248201526f1259195b9d1a599a595c88195e1a5cdd60821b6044820152606401610793565b60006001600160a01b0316600388886040516136aa92919061487c565b908152604051908190036020019020546001600160a01b0316146137095760405162461bcd60e51b8152602060048201526016602482015275105b1a585cc81a59195b9d1a599a595c88195e1a5cdd60521b6044820152606401610793565b6001600160a01b03888116600081815260046020526040902083546001600160a01b03199081169092178455426002850155600584018054909216928c1692909217905561375b600183018989614172565b5034600683015560005b858110156139e35782600401604051806060016040528089898581811061379c57634e487b7160e01b600052603260045260246000fd5b90506020028101906137ae9190614da2565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050509082525060200187878581811061380857634e487b7160e01b600052603260045260246000fd5b6020908102929092013583525060009181018290528354600181018555938252908190208251805193946003029091019261384692849201906141f6565b506020820151600182015560409091015160029091015560048301548288888481811061388357634e487b7160e01b600052603260045260246000fd5b90506020028101906138959190614da2565b6040516138a392919061487c565b908152604051908190036020019020558484828181106138d357634e487b7160e01b600052603260045260246000fd5b9050602002013560058888848181106138fc57634e487b7160e01b600052603260045260246000fd5b905060200281019061390e9190614da2565b60405161391c92919061487c565b9081526020016040518091039020600101600082825461393c9190614e3b565b90915550879050868281811061396257634e487b7160e01b600052603260045260246000fd5b90506020028101906139749190614da2565b600589898581811061399657634e487b7160e01b600052603260045260246000fd5b90506020028101906139a89190614da2565b6040516139b692919061487c565b9081526040519081900360200190206139d0929091614172565b50806139db81614f2f565b915050613765565b506139ef60068a612f44565b508860038989604051613a0392919061487c565b90815260405190819003602001812080546001600160a01b039384166001600160a01b0319909116179055908b16907f99c250edfb33141684f230eecda8aa955bf0d62d17bcaaab0ab43f318f3637b090613a6d908c9042908d908d908d908d908d908d90614917565b60405180910390a250505050505050505050565b6016805442916000613a9283614f2f565b9091555050600a54601554613aa79083614e86565b1115613b1b5760148054906000613abd83614f2f565b9091555050601581905560408051608081018252601654808252602080830191825282840185815260608401868152601454600090815260109093529490912092518355905160018301555160028201559051600390910155613b44565b601654601480546000908152601060205260408082206001019390935590548152206003018190555b600b54613b519082614e3b565b6016546000908152600f6020526040902060020155601454613b7290612d64565b600f6000601654815260200190815260200160002060010181905550613bd38260165442600143613ba39190614e86565b60408051602081019390935290409082015260016060820152608001604051602081830303815290604052613cb7565b6016546000908152600d602090815260408083206001600160a01b0386168452909152902054613c0b57613c0682612f7b565b613278565b7f71afff60b83105500984ce43d4633544224775a10de240da021704c056b58bdb601654600b5483613c3d9190614e3b565b6016546000908152600d602090815260408083206001600160a01b0389168452909152908190209051613c739392918791614cf1565b60405180910390a15050565b6000826000018281548110613ca457634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905092915050565b6000828152600f602090815260408083208054600181810183559185528385200180546001600160a01b03808a166001600160a01b031992831681179093558451608081018652838152808701888152818701898152606083018a81528c8b52600e8a52888b20968b529590985295882090518154921691909216178155925193516001600160801b03908116600160801b029416939093179082015590516002909101805491151560ff19909216919091179055805b600582108015613d8f5750613d81610b3d565b613d8c906002614e67565b81105b15613ef3576000613d9e610b3d565b8483604051602001613db192919061485a565b6040516020818303038152906040528051906020012060001c613dd49190614f67565b90506000613de182612201565b90508060600151613df3575050613ee1565b6000868152600c602090815260408083206001600160a01b03808c1680865291909352922083519092911614801590613e65575081516001600160a01b031660009081526020829052604081205460ff166003811115613e6357634e487b7160e01b600052602160045260246000fd5b145b15613edd5781516001600160a01b039081166000908152602083815260408083208054600160ff1990911681179091558b8452600d83528184208d8616855283529083208651815492830182559084529190922090910180546001600160a01b0319169190921617905584613ed981614f2f565b9550505b5050505b80613eeb81614f2f565b915050613d6e565b5050505050565b6000818152600183016020526040812054613f4157508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610ae7565b506000610ae7565b606081600001805480602002602001604051908101604052809291908181526020018280548015611e8257602002820191906000526020600020905b815481526020019060010190808311613f855750505050509050919050565b600081815260018301602052604081205480156140b7576000613fc8600183614e86565b8554909150600090613fdc90600190614e86565b905081811461405d57600086600001828154811061400a57634e487b7160e01b600052603260045260246000fd5b906000526020600020015490508087600001848154811061403b57634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255918252600188019052604090208390555b855486908061407c57634e487b7160e01b600052603160045260246000fd5b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610ae7565b6000915050610ae7565b6040518060e0016040528060006001600160a01b0316815260200160608152602001600081526020016000151581526020016060815260200160006001600160a01b03168152602001600081525090565b50805461411e90614ecd565b6000825580601f10614130575061414e565b601f01602090049060005260206000209081019061414e919061426a565b50565b508054600082556003029060005260206000209081019061414e919061427f565b82805461417e90614ecd565b90600052602060002090601f0160209004810192826141a057600085556141e6565b82601f106141b95782800160ff198235161785556141e6565b828001600101855582156141e6579182015b828111156141e65782358255916020019190600101906141cb565b506141f292915061426a565b5090565b82805461420290614ecd565b90600052602060002090601f01602090048101928261422457600085556141e6565b82601f1061423d57805160ff19168380011785556141e6565b828001600101855582156141e6579182015b828111156141e657825182559160200191906001019061424f565b5b808211156141f2576000815560010161426b565b808211156141f25760006142938282614112565b50600060018201819055600282015560030161427f565b80356001600160a01b0381168114611e8a57600080fd5b60008083601f8401126142d2578081fd5b5081356001600160401b038111156142e8578182fd5b6020830191508360208260051b850101111561430357600080fd5b9250929050565b600082601f83011261431a578081fd5b81356001600160401b038082111561433457614334614fa7565b604051601f8301601f19908116603f0116810190828211818310171561435c5761435c614fa7565b81604052838152866020858801011115614374578485fd5b8360208701602083013792830160200193909352509392505050565b6000602082840312156143a1578081fd5b612d5d826142aa565b60008060008060008060006080888a0312156143c4578283fd5b6143cd886142aa565b965060208801356001600160401b03808211156143e8578485fd5b818a0191508a601f8301126143fb578485fd5b813581811115614409578586fd5b8b602082850101111561441a578586fd5b6020830198508097505060408a0135915080821115614437578485fd5b6144438b838c016142c1565b909650945060608a013591508082111561445b578384fd5b506144688a828b016142c1565b989b979a50959850939692959293505050565b6000806040838503121561448d578182fd5b614496836142aa565b915060208301356001600160401b038111156144b0578182fd5b6144bc8582860161430a565b9150509250929050565b600080602083850312156144d8578182fd5b82356001600160401b038111156144ed578283fd5b6144f9858286016142c1565b90969095509350505050565b60008060008060006080868803121561451c578081fd5b85356001600160401b03811115614531578182fd5b61453d888289016142c1565b90965094506145509050602087016142aa565b925060408601359150614565606087016142aa565b90509295509295909350565b600060208284031215614582578081fd5b81356001600160401b03811115614597578182fd5b6145a38482850161430a565b949350505050565b6000602082840312156145bc578081fd5b5035919050565b600080604083850312156145d5578182fd5b823591506145e5602084016142aa565b90509250929050565b600080600060608486031215614602578283fd5b83359250614612602085016142aa565b915060408401358015158114614626578182fd5b809150509250925092565b600080600060608486031215614645578283fd5b83359250614655602085016142aa565b9150604084013590509250925092565b60008060008060006060868803121561467c578081fd5b8535945060208601356001600160401b0380821115614699578283fd5b6146a589838a016142c1565b909650945060408801359150808211156146bd578283fd5b506146ca888289016142c1565b969995985093965092949392505050565b600081518084526020808501808196508360051b81019150828601855b8581101561472257828403895261471084835161482e565b988501989350908401906001016146f8565b5091979650505050505050565b600081518084526020808501808196508360051b81019150828601855b8581101561472257828403895281516060815181875261476e8288018261482e565b83890151888a015260409384015193909701929092525050978401979084019060010161474c565b81835260006001600160fb1b038311156147ae578081fd5b8260051b80836020870137939093016020019283525090919050565b6000815180845260208085019450808401835b838110156147f9578151875295820195908201906001016147dd565b509495945050505050565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b60008151808452614846816020860160208601614e9d565b601f01601f19169290920160200192915050565b6000835161486c818460208801614e9d565b9190910191825250602001919050565b6000828483379101908152919050565b6000825161489e818460208701614e9d565b9190910192915050565b60008083546148b681614ecd565b600182811680156148ce57600181146148df5761490b565b60ff1984168752828701945061490b565b8786526020808720875b858110156149025781548a8201529084019082016148e9565b50505082870194505b50929695505050505050565b600060018060a01b038a1682526020898184015260a0604084015261494060a08401898b614804565b8381036060850152868152818101600588901b8201830189855b8a8110156149c557848303601f190184528135368d9003601e1901811261497f578788fd5b8c0180356001600160401b03811115614996578889fd5b8036038e13156149a4578889fd5b6149b185828a8501614804565b95880195945050509085019060010161495a565b505085810360808701526149da81888a614796565b9e9d5050505050505050505050505050565b600060018060a01b03871682526020868184015260a06040840152818654614a1381614ecd565b8060a087015260c0600180841660008114614a355760018114614a4957614a74565b60ff1985168984015260e089019550614a74565b8b8852868820885b85811015614a6c5781548b8201860152908301908801614a51565b8a0184019650505b50505050508381036060850152614a8b81876146db565b9150508281036080840152614aa081856147ca565b98975050505050505050565b6020808252825182820181905260009190848201906040850190845b81811015614aed5783516001600160a01b031683529284019291840191600101614ac8565b50909695505050505050565b60006040808301818452808651808352606092508286019150828160051b8701016020808a01875b84811015614b7457898403605f19018652815180516001600160a01b0316855283810151848601899052614b578987018261482e565b918a0151958a019590955295830195935090820190600101614b21565b50509690960196909652509295945050505050565b6040808252835182820181905260009190606090818501906020808901865b83811015614c0b57815180516001600160401b039081168752848201511684870152878101516001600160801b031688870152868101516001600160a01b0390811688880152608091820151169086015260a09094019390820190600101614ba8565b505095909501959095525092949350505050565b600060608252614c32606083018661482e565b60208301949094525060400152919050565b602080825282516001600160a01b03168282015282015160e06040830152600090614c7361010084018261482e565b9050604084015160608401526060840151151560808401526080840151601f198483030160a0850152614ca6828261472f565b91505060a0840151614cc360c08501826001600160a01b03169052565b5060c084015160e08401528091505092915050565b6000838252604060208301526145a3604083018461482e565b6000608082018683526020868185015260018060a01b0380871660408601526080606086015282865480855260a0870191508786528386209450855b81811015614d4b578554841683526001958601959285019201614d2d565b50909a9950505050505050505050565b6000808335601e19843603018112614d71578283fd5b8301803591506001600160401b03821115614d8a578283fd5b6020019150600581901b360382131561430357600080fd5b6000808335601e19843603018112614db8578283fd5b8301803591506001600160401b03821115614dd1578283fd5b60200191503681900382131561430357600080fd5b60008235605e1983360301811261489e578182fd5b60008235609e1983360301811261489e578182fd5b60006001600160801b03808316818516808303821115614e3257614e32614f7b565b01949350505050565b60008219821115614e4e57614e4e614f7b565b500190565b600082614e6257614e62614f91565b500490565b6000816000190483118215151615614e8157614e81614f7b565b500290565b600082821015614e9857614e98614f7b565b500390565b60005b83811015614eb8578181015183820152602001614ea0565b83811115614ec7576000848401525b50505050565b600181811c90821680614ee157607f821691505b60208210811415614f0257634e487b7160e01b600052602260045260246000fd5b50919050565b60006001600160801b0380831681811415614f2557614f25614f7b565b6001019392505050565b6000600019821415614f4357614f43614f7b565b5060010190565b60006001600160401b0380831681811415614f2557614f25614f7b565b600082614f7657614f76614f91565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea2646970667358221220b41de66b628ccbfa84ec69a6b039bad3dfb3f9484a5e8c4be1a7727ebedaa69064736f6c63430008030033",
}

// NodesGovernanceABI is the input ABI used to generate the binding from.
// Deprecated: Use NodesGovernanceMetaData.ABI instead.
var NodesGovernanceABI = NodesGovernanceMetaData.ABI

// NodesGovernanceBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use NodesGovernanceMetaData.Bin instead.
var NodesGovernanceBin = NodesGovernanceMetaData.Bin

// DeployNodesGovernance deploys a new Ethereum contract, binding an instance of NodesGovernance to it.
func DeployNodesGovernance(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *NodesGovernance, error) {
	parsed, err := NodesGovernanceMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(NodesGovernanceBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &NodesGovernance{NodesGovernanceCaller: NodesGovernanceCaller{contract: contract}, NodesGovernanceTransactor: NodesGovernanceTransactor{contract: contract}, NodesGovernanceFilterer: NodesGovernanceFilterer{contract: contract}}, nil
}

// NodesGovernance is an auto generated Go binding around an Ethereum contract.
type NodesGovernance struct {
	NodesGovernanceCaller     // Read-only binding to the contract
	NodesGovernanceTransactor // Write-only binding to the contract
	NodesGovernanceFilterer   // Log filterer for contract events
}

// NodesGovernanceCaller is an auto generated read-only Go binding around an Ethereum contract.
type NodesGovernanceCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NodesGovernanceTransactor is an auto generated write-only Go binding around an Ethereum contract.
type NodesGovernanceTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NodesGovernanceFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type NodesGovernanceFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NodesGovernanceSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type NodesGovernanceSession struct {
	Contract     *NodesGovernance  // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// NodesGovernanceCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type NodesGovernanceCallerSession struct {
	Contract *NodesGovernanceCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts          // Call options to use throughout this session
}

// NodesGovernanceTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type NodesGovernanceTransactorSession struct {
	Contract     *NodesGovernanceTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts          // Transaction auth options to use throughout this session
}

// NodesGovernanceRaw is an auto generated low-level Go binding around an Ethereum contract.
type NodesGovernanceRaw struct {
	Contract *NodesGovernance // Generic contract binding to access the raw methods on
}

// NodesGovernanceCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type NodesGovernanceCallerRaw struct {
	Contract *NodesGovernanceCaller // Generic read-only contract binding to access the raw methods on
}

// NodesGovernanceTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type NodesGovernanceTransactorRaw struct {
	Contract *NodesGovernanceTransactor // Generic write-only contract binding to access the raw methods on
}

// NewNodesGovernance creates a new instance of NodesGovernance, bound to a specific deployed contract.
func NewNodesGovernance(address common.Address, backend bind.ContractBackend) (*NodesGovernance, error) {
	contract, err := bindNodesGovernance(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &NodesGovernance{NodesGovernanceCaller: NodesGovernanceCaller{contract: contract}, NodesGovernanceTransactor: NodesGovernanceTransactor{contract: contract}, NodesGovernanceFilterer: NodesGovernanceFilterer{contract: contract}}, nil
}

// NewNodesGovernanceCaller creates a new read-only instance of NodesGovernance, bound to a specific deployed contract.
func NewNodesGovernanceCaller(address common.Address, caller bind.ContractCaller) (*NodesGovernanceCaller, error) {
	contract, err := bindNodesGovernance(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &NodesGovernanceCaller{contract: contract}, nil
}

// NewNodesGovernanceTransactor creates a new write-only instance of NodesGovernance, bound to a specific deployed contract.
func NewNodesGovernanceTransactor(address common.Address, transactor bind.ContractTransactor) (*NodesGovernanceTransactor, error) {
	contract, err := bindNodesGovernance(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &NodesGovernanceTransactor{contract: contract}, nil
}

// NewNodesGovernanceFilterer creates a new log filterer instance of NodesGovernance, bound to a specific deployed contract.
func NewNodesGovernanceFilterer(address common.Address, filterer bind.ContractFilterer) (*NodesGovernanceFilterer, error) {
	contract, err := bindNodesGovernance(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &NodesGovernanceFilterer{contract: contract}, nil
}

// bindNodesGovernance binds a generic wrapper to an already deployed contract.
func bindNodesGovernance(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := NodesGovernanceMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_NodesGovernance *NodesGovernanceRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _NodesGovernance.Contract.NodesGovernanceCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_NodesGovernance *NodesGovernanceRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _NodesGovernance.Contract.NodesGovernanceTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_NodesGovernance *NodesGovernanceRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _NodesGovernance.Contract.NodesGovernanceTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_NodesGovernance *NodesGovernanceCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _NodesGovernance.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_NodesGovernance *NodesGovernanceTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _NodesGovernance.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_NodesGovernance *NodesGovernanceTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _NodesGovernance.Contract.contract.Transact(opts, method, params...)
}

// MINCANDIDATE is a free data retrieval call binding the contract method 0x26cc3399.
//
// Solidity: function MIN_CANDIDATE() view returns(uint256)
func (_NodesGovernance *NodesGovernanceCaller) MINCANDIDATE(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _NodesGovernance.contract.Call(opts, &out, "MIN_CANDIDATE")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MINCANDIDATE is a free data retrieval call binding the contract method 0x26cc3399.
//
// Solidity: function MIN_CANDIDATE() view returns(uint256)
func (_NodesGovernance *NodesGovernanceSession) MINCANDIDATE() (*big.Int, error) {
	return _NodesGovernance.Contract.MINCANDIDATE(&_NodesGovernance.CallOpts)
}

// MINCANDIDATE is a free data retrieval call binding the contract method 0x26cc3399.
//
// Solidity: function MIN_CANDIDATE() view returns(uint256)
func (_NodesGovernance *NodesGovernanceCallerSession) MINCANDIDATE() (*big.Int, error) {
	return _NodesGovernance.Contract.MINCANDIDATE(&_NodesGovernance.CallOpts)
}

// VALIDATORPERCANDIDATE is a free data retrieval call binding the contract method 0xa7f32314.
//
// Solidity: function VALIDATOR_PER_CANDIDATE() view returns(uint256)
func (_NodesGovernance *NodesGovernanceCaller) VALIDATORPERCANDIDATE(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _NodesGovernance.contract.Call(opts, &out, "VALIDATOR_PER_CANDIDATE")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// VALIDATORPERCANDIDATE is a free data retrieval call binding the contract method 0xa7f32314.
//
// Solidity: function VALIDATOR_PER_CANDIDATE() view returns(uint256)
func (_NodesGovernance *NodesGovernanceSession) VALIDATORPERCANDIDATE() (*big.Int, error) {
	return _NodesGovernance.Contract.VALIDATORPERCANDIDATE(&_NodesGovernance.CallOpts)
}

// VALIDATORPERCANDIDATE is a free data retrieval call binding the contract method 0xa7f32314.
//
// Solidity: function VALIDATOR_PER_CANDIDATE() view returns(uint256)
func (_NodesGovernance *NodesGovernanceCallerSession) VALIDATORPERCANDIDATE() (*big.Int, error) {
	return _NodesGovernance.Contract.VALIDATORPERCANDIDATE(&_NodesGovernance.CallOpts)
}

// Allocator is a free data retrieval call binding the contract method 0xaa5dcecc.
//
// Solidity: function allocator() view returns(address)
func (_NodesGovernance *NodesGovernanceCaller) Allocator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _NodesGovernance.contract.Call(opts, &out, "allocator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Allocator is a free data retrieval call binding the contract method 0xaa5dcecc.
//
// Solidity: function allocator() view returns(address)
func (_NodesGovernance *NodesGovernanceSession) Allocator() (common.Address, error) {
	return _NodesGovernance.Contract.Allocator(&_NodesGovernance.CallOpts)
}

// Allocator is a free data retrieval call binding the contract method 0xaa5dcecc.
//
// Solidity: function allocator() view returns(address)
func (_NodesGovernance *NodesGovernanceCallerSession) Allocator() (common.Address, error) {
	return _NodesGovernance.Contract.Allocator(&_NodesGovernance.CallOpts)
}

// At is a free data retrieval call binding the contract method 0xe0886f90.
//
// Solidity: function at(uint256 index) view returns((address,string,uint256,bool,(string,uint256,uint256)[],address,uint256) node)
func (_NodesGovernance *NodesGovernanceCaller) At(opts *bind.CallOpts, index *big.Int) (NodesRegistryNode, error) {
	var out []interface{}
	err := _NodesGovernance.contract.Call(opts, &out, "at", index)

	if err != nil {
		return *new(NodesRegistryNode), err
	}

	out0 := *abi.ConvertType(out[0], new(NodesRegistryNode)).(*NodesRegistryNode)

	return out0, err

}

// At is a free data retrieval call binding the contract method 0xe0886f90.
//
// Solidity: function at(uint256 index) view returns((address,string,uint256,bool,(string,uint256,uint256)[],address,uint256) node)
func (_NodesGovernance *NodesGovernanceSession) At(index *big.Int) (NodesRegistryNode, error) {
	return _NodesGovernance.Contract.At(&_NodesGovernance.CallOpts, index)
}

// At is a free data retrieval call binding the contract method 0xe0886f90.
//
// Solidity: function at(uint256 index) view returns((address,string,uint256,bool,(string,uint256,uint256)[],address,uint256) node)
func (_NodesGovernance *NodesGovernanceCallerSession) At(index *big.Int) (NodesRegistryNode, error) {
	return _NodesGovernance.Contract.At(&_NodesGovernance.CallOpts, index)
}

// CandidatePerRound is a free data retrieval call binding the contract method 0x5ff5c03c.
//
// Solidity: function candidatePerRound(uint256 ) view returns(uint256 numOfNodes, uint256 expectedCompletionTime)
func (_NodesGovernance *NodesGovernanceCaller) CandidatePerRound(opts *bind.CallOpts, arg0 *big.Int) (struct {
	NumOfNodes             *big.Int
	ExpectedCompletionTime *big.Int
}, error) {
	var out []interface{}
	err := _NodesGovernance.contract.Call(opts, &out, "candidatePerRound", arg0)

	outstruct := new(struct {
		NumOfNodes             *big.Int
		ExpectedCompletionTime *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.NumOfNodes = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.ExpectedCompletionTime = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// CandidatePerRound is a free data retrieval call binding the contract method 0x5ff5c03c.
//
// Solidity: function candidatePerRound(uint256 ) view returns(uint256 numOfNodes, uint256 expectedCompletionTime)
func (_NodesGovernance *NodesGovernanceSession) CandidatePerRound(arg0 *big.Int) (struct {
	NumOfNodes             *big.Int
	ExpectedCompletionTime *big.Int
}, error) {
	return _NodesGovernance.Contract.CandidatePerRound(&_NodesGovernance.CallOpts, arg0)
}

// CandidatePerRound is a free data retrieval call binding the contract method 0x5ff5c03c.
//
// Solidity: function candidatePerRound(uint256 ) view returns(uint256 numOfNodes, uint256 expectedCompletionTime)
func (_NodesGovernance *NodesGovernanceCallerSession) CandidatePerRound(arg0 *big.Int) (struct {
	NumOfNodes             *big.Int
	ExpectedCompletionTime *big.Int
}, error) {
	return _NodesGovernance.Contract.CandidatePerRound(&_NodesGovernance.CallOpts, arg0)
}

// Check is a free data retrieval call binding the contract method 0xc23697a8.
//
// Solidity: function check(address identifier) view returns(bool)
func (_NodesGovernance *NodesGovernanceCaller) Check(opts *bind.CallOpts, identifier common.Address) (bool, error) {
	var out []interface{}
	err := _NodesGovernance.contract.Call(opts, &out, "check", identifier)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Check is a free data retrieval call binding the contract method 0xc23697a8.
//
// Solidity: function check(address identifier) view returns(bool)
func (_NodesGovernance *NodesGovernanceSession) Check(identifier common.Address) (bool, error) {
	return _NodesGovernance.Contract.Check(&_NodesGovernance.CallOpts, identifier)
}

// Check is a free data retrieval call binding the contract method 0xc23697a8.
//
// Solidity: function check(address identifier) view returns(bool)
func (_NodesGovernance *NodesGovernanceCallerSession) Check(identifier common.Address) (bool, error) {
	return _NodesGovernance.Contract.Check(&_NodesGovernance.CallOpts, identifier)
}

// CurrentDetectCircleId is a free data retrieval call binding the contract method 0x191805d8.
//
// Solidity: function currentDetectCircleId() view returns(uint256)
func (_NodesGovernance *NodesGovernanceCaller) CurrentDetectCircleId(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _NodesGovernance.contract.Call(opts, &out, "currentDetectCircleId")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CurrentDetectCircleId is a free data retrieval call binding the contract method 0x191805d8.
//
// Solidity: function currentDetectCircleId() view returns(uint256)
func (_NodesGovernance *NodesGovernanceSession) CurrentDetectCircleId() (*big.Int, error) {
	return _NodesGovernance.Contract.CurrentDetectCircleId(&_NodesGovernance.CallOpts)
}

// CurrentDetectCircleId is a free data retrieval call binding the contract method 0x191805d8.
//
// Solidity: function currentDetectCircleId() view returns(uint256)
func (_NodesGovernance *NodesGovernanceCallerSession) CurrentDetectCircleId() (*big.Int, error) {
	return _NodesGovernance.Contract.CurrentDetectCircleId(&_NodesGovernance.CallOpts)
}

// CurrentDetectCircleStartTime is a free data retrieval call binding the contract method 0x1bb12a43.
//
// Solidity: function currentDetectCircleStartTime() view returns(uint256)
func (_NodesGovernance *NodesGovernanceCaller) CurrentDetectCircleStartTime(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _NodesGovernance.contract.Call(opts, &out, "currentDetectCircleStartTime")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CurrentDetectCircleStartTime is a free data retrieval call binding the contract method 0x1bb12a43.
//
// Solidity: function currentDetectCircleStartTime() view returns(uint256)
func (_NodesGovernance *NodesGovernanceSession) CurrentDetectCircleStartTime() (*big.Int, error) {
	return _NodesGovernance.Contract.CurrentDetectCircleStartTime(&_NodesGovernance.CallOpts)
}

// CurrentDetectCircleStartTime is a free data retrieval call binding the contract method 0x1bb12a43.
//
// Solidity: function currentDetectCircleStartTime() view returns(uint256)
func (_NodesGovernance *NodesGovernanceCallerSession) CurrentDetectCircleStartTime() (*big.Int, error) {
	return _NodesGovernance.Contract.CurrentDetectCircleStartTime(&_NodesGovernance.CallOpts)
}

// CurrentRoundId is a free data retrieval call binding the contract method 0x9cbe5efd.
//
// Solidity: function currentRoundId() view returns(uint256)
func (_NodesGovernance *NodesGovernanceCaller) CurrentRoundId(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _NodesGovernance.contract.Call(opts, &out, "currentRoundId")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CurrentRoundId is a free data retrieval call binding the contract method 0x9cbe5efd.
//
// Solidity: function currentRoundId() view returns(uint256)
func (_NodesGovernance *NodesGovernanceSession) CurrentRoundId() (*big.Int, error) {
	return _NodesGovernance.Contract.CurrentRoundId(&_NodesGovernance.CallOpts)
}

// CurrentRoundId is a free data retrieval call binding the contract method 0x9cbe5efd.
//
// Solidity: function currentRoundId() view returns(uint256)
func (_NodesGovernance *NodesGovernanceCallerSession) CurrentRoundId() (*big.Int, error) {
	return _NodesGovernance.Contract.CurrentRoundId(&_NodesGovernance.CallOpts)
}

// CurrentRoundStartTime is a free data retrieval call binding the contract method 0x380dd901.
//
// Solidity: function currentRoundStartTime() view returns(uint256)
func (_NodesGovernance *NodesGovernanceCaller) CurrentRoundStartTime(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _NodesGovernance.contract.Call(opts, &out, "currentRoundStartTime")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CurrentRoundStartTime is a free data retrieval call binding the contract method 0x380dd901.
//
// Solidity: function currentRoundStartTime() view returns(uint256)
func (_NodesGovernance *NodesGovernanceSession) CurrentRoundStartTime() (*big.Int, error) {
	return _NodesGovernance.Contract.CurrentRoundStartTime(&_NodesGovernance.CallOpts)
}

// CurrentRoundStartTime is a free data retrieval call binding the contract method 0x380dd901.
//
// Solidity: function currentRoundStartTime() view returns(uint256)
func (_NodesGovernance *NodesGovernanceCallerSession) CurrentRoundStartTime() (*big.Int, error) {
	return _NodesGovernance.Contract.CurrentRoundStartTime(&_NodesGovernance.CallOpts)
}

// DetectDurationTime is a free data retrieval call binding the contract method 0x49d2b420.
//
// Solidity: function detectDurationTime() view returns(uint256)
func (_NodesGovernance *NodesGovernanceCaller) DetectDurationTime(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _NodesGovernance.contract.Call(opts, &out, "detectDurationTime")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// DetectDurationTime is a free data retrieval call binding the contract method 0x49d2b420.
//
// Solidity: function detectDurationTime() view returns(uint256)
func (_NodesGovernance *NodesGovernanceSession) DetectDurationTime() (*big.Int, error) {
	return _NodesGovernance.Contract.DetectDurationTime(&_NodesGovernance.CallOpts)
}

// DetectDurationTime is a free data retrieval call binding the contract method 0x49d2b420.
//
// Solidity: function detectDurationTime() view returns(uint256)
func (_NodesGovernance *NodesGovernanceCallerSession) DetectDurationTime() (*big.Int, error) {
	return _NodesGovernance.Contract.DetectDurationTime(&_NodesGovernance.CallOpts)
}

// DetectPeriods is a free data retrieval call binding the contract method 0x698083af.
//
// Solidity: function detectPeriods(uint256 ) view returns(uint256 startId, uint256 endId, uint256 startTime, uint256 endTime)
func (_NodesGovernance *NodesGovernanceCaller) DetectPeriods(opts *bind.CallOpts, arg0 *big.Int) (struct {
	StartId   *big.Int
	EndId     *big.Int
	StartTime *big.Int
	EndTime   *big.Int
}, error) {
	var out []interface{}
	err := _NodesGovernance.contract.Call(opts, &out, "detectPeriods", arg0)

	outstruct := new(struct {
		StartId   *big.Int
		EndId     *big.Int
		StartTime *big.Int
		EndTime   *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.StartId = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.EndId = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.StartTime = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.EndTime = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// DetectPeriods is a free data retrieval call binding the contract method 0x698083af.
//
// Solidity: function detectPeriods(uint256 ) view returns(uint256 startId, uint256 endId, uint256 startTime, uint256 endTime)
func (_NodesGovernance *NodesGovernanceSession) DetectPeriods(arg0 *big.Int) (struct {
	StartId   *big.Int
	EndId     *big.Int
	StartTime *big.Int
	EndTime   *big.Int
}, error) {
	return _NodesGovernance.Contract.DetectPeriods(&_NodesGovernance.CallOpts, arg0)
}

// DetectPeriods is a free data retrieval call binding the contract method 0x698083af.
//
// Solidity: function detectPeriods(uint256 ) view returns(uint256 startId, uint256 endId, uint256 startTime, uint256 endTime)
func (_NodesGovernance *NodesGovernanceCallerSession) DetectPeriods(arg0 *big.Int) (struct {
	StartId   *big.Int
	EndId     *big.Int
	StartTime *big.Int
	EndTime   *big.Int
}, error) {
	return _NodesGovernance.Contract.DetectPeriods(&_NodesGovernance.CallOpts, arg0)
}

// Get is a free data retrieval call binding the contract method 0xc2bc2efc.
//
// Solidity: function get(address identifier) view returns((address,string,uint256,bool,(string,uint256,uint256)[],address,uint256) node)
func (_NodesGovernance *NodesGovernanceCaller) Get(opts *bind.CallOpts, identifier common.Address) (NodesRegistryNode, error) {
	var out []interface{}
	err := _NodesGovernance.contract.Call(opts, &out, "get", identifier)

	if err != nil {
		return *new(NodesRegistryNode), err
	}

	out0 := *abi.ConvertType(out[0], new(NodesRegistryNode)).(*NodesRegistryNode)

	return out0, err

}

// Get is a free data retrieval call binding the contract method 0xc2bc2efc.
//
// Solidity: function get(address identifier) view returns((address,string,uint256,bool,(string,uint256,uint256)[],address,uint256) node)
func (_NodesGovernance *NodesGovernanceSession) Get(identifier common.Address) (NodesRegistryNode, error) {
	return _NodesGovernance.Contract.Get(&_NodesGovernance.CallOpts, identifier)
}

// Get is a free data retrieval call binding the contract method 0xc2bc2efc.
//
// Solidity: function get(address identifier) view returns((address,string,uint256,bool,(string,uint256,uint256)[],address,uint256) node)
func (_NodesGovernance *NodesGovernanceCallerSession) Get(identifier common.Address) (NodesRegistryNode, error) {
	return _NodesGovernance.Contract.Get(&_NodesGovernance.CallOpts, identifier)
}

// GetAttach is a free data retrieval call binding the contract method 0xc7edca7a.
//
// Solidity: function getAttach(address provider) view returns(address[])
func (_NodesGovernance *NodesGovernanceCaller) GetAttach(opts *bind.CallOpts, provider common.Address) ([]common.Address, error) {
	var out []interface{}
	err := _NodesGovernance.contract.Call(opts, &out, "getAttach", provider)

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetAttach is a free data retrieval call binding the contract method 0xc7edca7a.
//
// Solidity: function getAttach(address provider) view returns(address[])
func (_NodesGovernance *NodesGovernanceSession) GetAttach(provider common.Address) ([]common.Address, error) {
	return _NodesGovernance.Contract.GetAttach(&_NodesGovernance.CallOpts, provider)
}

// GetAttach is a free data retrieval call binding the contract method 0xc7edca7a.
//
// Solidity: function getAttach(address provider) view returns(address[])
func (_NodesGovernance *NodesGovernanceCallerSession) GetAttach(provider common.Address) ([]common.Address, error) {
	return _NodesGovernance.Contract.GetAttach(&_NodesGovernance.CallOpts, provider)
}

// GetOnePeriodSettlement is a free data retrieval call binding the contract method 0x6300c951.
//
// Solidity: function getOnePeriodSettlement(uint256 detectPeriodId) view returns((uint64,uint64,uint128,address,address)[] states, uint256 totalQuotas)
func (_NodesGovernance *NodesGovernanceCaller) GetOnePeriodSettlement(opts *bind.CallOpts, detectPeriodId *big.Int) (struct {
	States      []NodeState
	TotalQuotas *big.Int
}, error) {
	var out []interface{}
	err := _NodesGovernance.contract.Call(opts, &out, "getOnePeriodSettlement", detectPeriodId)

	outstruct := new(struct {
		States      []NodeState
		TotalQuotas *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.States = *abi.ConvertType(out[0], new([]NodeState)).(*[]NodeState)
	outstruct.TotalQuotas = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// GetOnePeriodSettlement is a free data retrieval call binding the contract method 0x6300c951.
//
// Solidity: function getOnePeriodSettlement(uint256 detectPeriodId) view returns((uint64,uint64,uint128,address,address)[] states, uint256 totalQuotas)
func (_NodesGovernance *NodesGovernanceSession) GetOnePeriodSettlement(detectPeriodId *big.Int) (struct {
	States      []NodeState
	TotalQuotas *big.Int
}, error) {
	return _NodesGovernance.Contract.GetOnePeriodSettlement(&_NodesGovernance.CallOpts, detectPeriodId)
}

// GetOnePeriodSettlement is a free data retrieval call binding the contract method 0x6300c951.
//
// Solidity: function getOnePeriodSettlement(uint256 detectPeriodId) view returns((uint64,uint64,uint128,address,address)[] states, uint256 totalQuotas)
func (_NodesGovernance *NodesGovernanceCallerSession) GetOnePeriodSettlement(detectPeriodId *big.Int) (struct {
	States      []NodeState
	TotalQuotas *big.Int
}, error) {
	return _NodesGovernance.Contract.GetOnePeriodSettlement(&_NodesGovernance.CallOpts, detectPeriodId)
}

// GetRoundCandidates is a free data retrieval call binding the contract method 0x93e9d413.
//
// Solidity: function getRoundCandidates(uint256 roundId) view returns(address[] candidates)
func (_NodesGovernance *NodesGovernanceCaller) GetRoundCandidates(opts *bind.CallOpts, roundId *big.Int) ([]common.Address, error) {
	var out []interface{}
	err := _NodesGovernance.contract.Call(opts, &out, "getRoundCandidates", roundId)

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetRoundCandidates is a free data retrieval call binding the contract method 0x93e9d413.
//
// Solidity: function getRoundCandidates(uint256 roundId) view returns(address[] candidates)
func (_NodesGovernance *NodesGovernanceSession) GetRoundCandidates(roundId *big.Int) ([]common.Address, error) {
	return _NodesGovernance.Contract.GetRoundCandidates(&_NodesGovernance.CallOpts, roundId)
}

// GetRoundCandidates is a free data retrieval call binding the contract method 0x93e9d413.
//
// Solidity: function getRoundCandidates(uint256 roundId) view returns(address[] candidates)
func (_NodesGovernance *NodesGovernanceCallerSession) GetRoundCandidates(roundId *big.Int) ([]common.Address, error) {
	return _NodesGovernance.Contract.GetRoundCandidates(&_NodesGovernance.CallOpts, roundId)
}

// GetValidatorsOfCandidate is a free data retrieval call binding the contract method 0x0732bd7e.
//
// Solidity: function getValidatorsOfCandidate(uint256 roundId, address candidate) view returns(address[] validators)
func (_NodesGovernance *NodesGovernanceCaller) GetValidatorsOfCandidate(opts *bind.CallOpts, roundId *big.Int, candidate common.Address) ([]common.Address, error) {
	var out []interface{}
	err := _NodesGovernance.contract.Call(opts, &out, "getValidatorsOfCandidate", roundId, candidate)

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetValidatorsOfCandidate is a free data retrieval call binding the contract method 0x0732bd7e.
//
// Solidity: function getValidatorsOfCandidate(uint256 roundId, address candidate) view returns(address[] validators)
func (_NodesGovernance *NodesGovernanceSession) GetValidatorsOfCandidate(roundId *big.Int, candidate common.Address) ([]common.Address, error) {
	return _NodesGovernance.Contract.GetValidatorsOfCandidate(&_NodesGovernance.CallOpts, roundId, candidate)
}

// GetValidatorsOfCandidate is a free data retrieval call binding the contract method 0x0732bd7e.
//
// Solidity: function getValidatorsOfCandidate(uint256 roundId, address candidate) view returns(address[] validators)
func (_NodesGovernance *NodesGovernanceCallerSession) GetValidatorsOfCandidate(roundId *big.Int, candidate common.Address) ([]common.Address, error) {
	return _NodesGovernance.Contract.GetValidatorsOfCandidate(&_NodesGovernance.CallOpts, roundId, candidate)
}

// GpuSummary is a free data retrieval call binding the contract method 0xf67c5bdc.
//
// Solidity: function gpuSummary(string ) view returns(string gpuType, uint256 totalNum, uint256 used)
func (_NodesGovernance *NodesGovernanceCaller) GpuSummary(opts *bind.CallOpts, arg0 string) (struct {
	GpuType  string
	TotalNum *big.Int
	Used     *big.Int
}, error) {
	var out []interface{}
	err := _NodesGovernance.contract.Call(opts, &out, "gpuSummary", arg0)

	outstruct := new(struct {
		GpuType  string
		TotalNum *big.Int
		Used     *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.GpuType = *abi.ConvertType(out[0], new(string)).(*string)
	outstruct.TotalNum = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.Used = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// GpuSummary is a free data retrieval call binding the contract method 0xf67c5bdc.
//
// Solidity: function gpuSummary(string ) view returns(string gpuType, uint256 totalNum, uint256 used)
func (_NodesGovernance *NodesGovernanceSession) GpuSummary(arg0 string) (struct {
	GpuType  string
	TotalNum *big.Int
	Used     *big.Int
}, error) {
	return _NodesGovernance.Contract.GpuSummary(&_NodesGovernance.CallOpts, arg0)
}

// GpuSummary is a free data retrieval call binding the contract method 0xf67c5bdc.
//
// Solidity: function gpuSummary(string ) view returns(string gpuType, uint256 totalNum, uint256 used)
func (_NodesGovernance *NodesGovernanceCallerSession) GpuSummary(arg0 string) (struct {
	GpuType  string
	TotalNum *big.Int
	Used     *big.Int
}, error) {
	return _NodesGovernance.Contract.GpuSummary(&_NodesGovernance.CallOpts, arg0)
}

// GpuTypeOfNodes is a free data retrieval call binding the contract method 0xed38ed0d.
//
// Solidity: function gpuTypeOfNodes(address , string ) view returns(uint256)
func (_NodesGovernance *NodesGovernanceCaller) GpuTypeOfNodes(opts *bind.CallOpts, arg0 common.Address, arg1 string) (*big.Int, error) {
	var out []interface{}
	err := _NodesGovernance.contract.Call(opts, &out, "gpuTypeOfNodes", arg0, arg1)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GpuTypeOfNodes is a free data retrieval call binding the contract method 0xed38ed0d.
//
// Solidity: function gpuTypeOfNodes(address , string ) view returns(uint256)
func (_NodesGovernance *NodesGovernanceSession) GpuTypeOfNodes(arg0 common.Address, arg1 string) (*big.Int, error) {
	return _NodesGovernance.Contract.GpuTypeOfNodes(&_NodesGovernance.CallOpts, arg0, arg1)
}

// GpuTypeOfNodes is a free data retrieval call binding the contract method 0xed38ed0d.
//
// Solidity: function gpuTypeOfNodes(address , string ) view returns(uint256)
func (_NodesGovernance *NodesGovernanceCallerSession) GpuTypeOfNodes(arg0 common.Address, arg1 string) (*big.Int, error) {
	return _NodesGovernance.Contract.GpuTypeOfNodes(&_NodesGovernance.CallOpts, arg0, arg1)
}

// Length is a free data retrieval call binding the contract method 0x1f7b6d32.
//
// Solidity: function length() view returns(uint256)
func (_NodesGovernance *NodesGovernanceCaller) Length(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _NodesGovernance.contract.Call(opts, &out, "length")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Length is a free data retrieval call binding the contract method 0x1f7b6d32.
//
// Solidity: function length() view returns(uint256)
func (_NodesGovernance *NodesGovernanceSession) Length() (*big.Int, error) {
	return _NodesGovernance.Contract.Length(&_NodesGovernance.CallOpts)
}

// Length is a free data retrieval call binding the contract method 0x1f7b6d32.
//
// Solidity: function length() view returns(uint256)
func (_NodesGovernance *NodesGovernanceCallerSession) Length() (*big.Int, error) {
	return _NodesGovernance.Contract.Length(&_NodesGovernance.CallOpts)
}

// RoundDurationTime is a free data retrieval call binding the contract method 0xde137270.
//
// Solidity: function roundDurationTime() view returns(uint256)
func (_NodesGovernance *NodesGovernanceCaller) RoundDurationTime(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _NodesGovernance.contract.Call(opts, &out, "roundDurationTime")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RoundDurationTime is a free data retrieval call binding the contract method 0xde137270.
//
// Solidity: function roundDurationTime() view returns(uint256)
func (_NodesGovernance *NodesGovernanceSession) RoundDurationTime() (*big.Int, error) {
	return _NodesGovernance.Contract.RoundDurationTime(&_NodesGovernance.CallOpts)
}

// RoundDurationTime is a free data retrieval call binding the contract method 0xde137270.
//
// Solidity: function roundDurationTime() view returns(uint256)
func (_NodesGovernance *NodesGovernanceCallerSession) RoundDurationTime() (*big.Int, error) {
	return _NodesGovernance.Contract.RoundDurationTime(&_NodesGovernance.CallOpts)
}

// StakeToken is a free data retrieval call binding the contract method 0x51ed6a30.
//
// Solidity: function stakeToken() view returns(address)
func (_NodesGovernance *NodesGovernanceCaller) StakeToken(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _NodesGovernance.contract.Call(opts, &out, "stakeToken")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// StakeToken is a free data retrieval call binding the contract method 0x51ed6a30.
//
// Solidity: function stakeToken() view returns(address)
func (_NodesGovernance *NodesGovernanceSession) StakeToken() (common.Address, error) {
	return _NodesGovernance.Contract.StakeToken(&_NodesGovernance.CallOpts)
}

// StakeToken is a free data retrieval call binding the contract method 0x51ed6a30.
//
// Solidity: function stakeToken() view returns(address)
func (_NodesGovernance *NodesGovernanceCallerSession) StakeToken() (common.Address, error) {
	return _NodesGovernance.Contract.StakeToken(&_NodesGovernance.CallOpts)
}

// ValidatorsPerCandidate is a free data retrieval call binding the contract method 0x18767f31.
//
// Solidity: function validatorsPerCandidate(uint256 , address , uint256 ) view returns(address)
func (_NodesGovernance *NodesGovernanceCaller) ValidatorsPerCandidate(opts *bind.CallOpts, arg0 *big.Int, arg1 common.Address, arg2 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _NodesGovernance.contract.Call(opts, &out, "validatorsPerCandidate", arg0, arg1, arg2)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ValidatorsPerCandidate is a free data retrieval call binding the contract method 0x18767f31.
//
// Solidity: function validatorsPerCandidate(uint256 , address , uint256 ) view returns(address)
func (_NodesGovernance *NodesGovernanceSession) ValidatorsPerCandidate(arg0 *big.Int, arg1 common.Address, arg2 *big.Int) (common.Address, error) {
	return _NodesGovernance.Contract.ValidatorsPerCandidate(&_NodesGovernance.CallOpts, arg0, arg1, arg2)
}

// ValidatorsPerCandidate is a free data retrieval call binding the contract method 0x18767f31.
//
// Solidity: function validatorsPerCandidate(uint256 , address , uint256 ) view returns(address)
func (_NodesGovernance *NodesGovernanceCallerSession) ValidatorsPerCandidate(arg0 *big.Int, arg1 common.Address, arg2 *big.Int) (common.Address, error) {
	return _NodesGovernance.Contract.ValidatorsPerCandidate(&_NodesGovernance.CallOpts, arg0, arg1, arg2)
}

// VotedPerCandidate is a free data retrieval call binding the contract method 0x2ad4f0ad.
//
// Solidity: function votedPerCandidate(uint256 , address ) view returns(address candidate, uint128 yesVotes, uint128 noVotes, bool completed)
func (_NodesGovernance *NodesGovernanceCaller) VotedPerCandidate(opts *bind.CallOpts, arg0 *big.Int, arg1 common.Address) (struct {
	Candidate common.Address
	YesVotes  *big.Int
	NoVotes   *big.Int
	Completed bool
}, error) {
	var out []interface{}
	err := _NodesGovernance.contract.Call(opts, &out, "votedPerCandidate", arg0, arg1)

	outstruct := new(struct {
		Candidate common.Address
		YesVotes  *big.Int
		NoVotes   *big.Int
		Completed bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Candidate = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.YesVotes = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.NoVotes = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.Completed = *abi.ConvertType(out[3], new(bool)).(*bool)

	return *outstruct, err

}

// VotedPerCandidate is a free data retrieval call binding the contract method 0x2ad4f0ad.
//
// Solidity: function votedPerCandidate(uint256 , address ) view returns(address candidate, uint128 yesVotes, uint128 noVotes, bool completed)
func (_NodesGovernance *NodesGovernanceSession) VotedPerCandidate(arg0 *big.Int, arg1 common.Address) (struct {
	Candidate common.Address
	YesVotes  *big.Int
	NoVotes   *big.Int
	Completed bool
}, error) {
	return _NodesGovernance.Contract.VotedPerCandidate(&_NodesGovernance.CallOpts, arg0, arg1)
}

// VotedPerCandidate is a free data retrieval call binding the contract method 0x2ad4f0ad.
//
// Solidity: function votedPerCandidate(uint256 , address ) view returns(address candidate, uint128 yesVotes, uint128 noVotes, bool completed)
func (_NodesGovernance *NodesGovernanceCallerSession) VotedPerCandidate(arg0 *big.Int, arg1 common.Address) (struct {
	Candidate common.Address
	YesVotes  *big.Int
	NoVotes   *big.Int
	Completed bool
}, error) {
	return _NodesGovernance.Contract.VotedPerCandidate(&_NodesGovernance.CallOpts, arg0, arg1)
}

// AllocGPU is a paid mutator transaction binding the contract method 0x6252e1c2.
//
// Solidity: function allocGPU(uint256 startIndex, string[] gpuTypes, uint256[] gpuNums) returns((address,string,uint256)[] gpuNodes, uint256 len)
func (_NodesGovernance *NodesGovernanceTransactor) AllocGPU(opts *bind.TransactOpts, startIndex *big.Int, gpuTypes []string, gpuNums []*big.Int) (*types.Transaction, error) {
	return _NodesGovernance.contract.Transact(opts, "allocGPU", startIndex, gpuTypes, gpuNums)
}

// AllocGPU is a paid mutator transaction binding the contract method 0x6252e1c2.
//
// Solidity: function allocGPU(uint256 startIndex, string[] gpuTypes, uint256[] gpuNums) returns((address,string,uint256)[] gpuNodes, uint256 len)
func (_NodesGovernance *NodesGovernanceSession) AllocGPU(startIndex *big.Int, gpuTypes []string, gpuNums []*big.Int) (*types.Transaction, error) {
	return _NodesGovernance.Contract.AllocGPU(&_NodesGovernance.TransactOpts, startIndex, gpuTypes, gpuNums)
}

// AllocGPU is a paid mutator transaction binding the contract method 0x6252e1c2.
//
// Solidity: function allocGPU(uint256 startIndex, string[] gpuTypes, uint256[] gpuNums) returns((address,string,uint256)[] gpuNodes, uint256 len)
func (_NodesGovernance *NodesGovernanceTransactorSession) AllocGPU(startIndex *big.Int, gpuTypes []string, gpuNums []*big.Int) (*types.Transaction, error) {
	return _NodesGovernance.Contract.AllocGPU(&_NodesGovernance.TransactOpts, startIndex, gpuTypes, gpuNums)
}

// Attach is a paid mutator transaction binding the contract method 0x7a0ca1e2.
//
// Solidity: function attach(address server) returns()
func (_NodesGovernance *NodesGovernanceTransactor) Attach(opts *bind.TransactOpts, server common.Address) (*types.Transaction, error) {
	return _NodesGovernance.contract.Transact(opts, "attach", server)
}

// Attach is a paid mutator transaction binding the contract method 0x7a0ca1e2.
//
// Solidity: function attach(address server) returns()
func (_NodesGovernance *NodesGovernanceSession) Attach(server common.Address) (*types.Transaction, error) {
	return _NodesGovernance.Contract.Attach(&_NodesGovernance.TransactOpts, server)
}

// Attach is a paid mutator transaction binding the contract method 0x7a0ca1e2.
//
// Solidity: function attach(address server) returns()
func (_NodesGovernance *NodesGovernanceTransactorSession) Attach(server common.Address) (*types.Transaction, error) {
	return _NodesGovernance.Contract.Attach(&_NodesGovernance.TransactOpts, server)
}

// DeregisterNode is a paid mutator transaction binding the contract method 0x18b1c081.
//
// Solidity: function deregisterNode() returns()
func (_NodesGovernance *NodesGovernanceTransactor) DeregisterNode(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _NodesGovernance.contract.Transact(opts, "deregisterNode")
}

// DeregisterNode is a paid mutator transaction binding the contract method 0x18b1c081.
//
// Solidity: function deregisterNode() returns()
func (_NodesGovernance *NodesGovernanceSession) DeregisterNode() (*types.Transaction, error) {
	return _NodesGovernance.Contract.DeregisterNode(&_NodesGovernance.TransactOpts)
}

// DeregisterNode is a paid mutator transaction binding the contract method 0x18b1c081.
//
// Solidity: function deregisterNode() returns()
func (_NodesGovernance *NodesGovernanceTransactorSession) DeregisterNode() (*types.Transaction, error) {
	return _NodesGovernance.Contract.DeregisterNode(&_NodesGovernance.TransactOpts)
}

// Detach is a paid mutator transaction binding the contract method 0xceb6c343.
//
// Solidity: function detach(address server) returns()
func (_NodesGovernance *NodesGovernanceTransactor) Detach(opts *bind.TransactOpts, server common.Address) (*types.Transaction, error) {
	return _NodesGovernance.contract.Transact(opts, "detach", server)
}

// Detach is a paid mutator transaction binding the contract method 0xceb6c343.
//
// Solidity: function detach(address server) returns()
func (_NodesGovernance *NodesGovernanceSession) Detach(server common.Address) (*types.Transaction, error) {
	return _NodesGovernance.Contract.Detach(&_NodesGovernance.TransactOpts, server)
}

// Detach is a paid mutator transaction binding the contract method 0xceb6c343.
//
// Solidity: function detach(address server) returns()
func (_NodesGovernance *NodesGovernanceTransactorSession) Detach(server common.Address) (*types.Transaction, error) {
	return _NodesGovernance.Contract.Detach(&_NodesGovernance.TransactOpts, server)
}

// FreeGPU is a paid mutator transaction binding the contract method 0x036fe9c2.
//
// Solidity: function freeGPU((address,string,uint256)[] gpuNodes) returns()
func (_NodesGovernance *NodesGovernanceTransactor) FreeGPU(opts *bind.TransactOpts, gpuNodes []NodeComputeUsed) (*types.Transaction, error) {
	return _NodesGovernance.contract.Transact(opts, "freeGPU", gpuNodes)
}

// FreeGPU is a paid mutator transaction binding the contract method 0x036fe9c2.
//
// Solidity: function freeGPU((address,string,uint256)[] gpuNodes) returns()
func (_NodesGovernance *NodesGovernanceSession) FreeGPU(gpuNodes []NodeComputeUsed) (*types.Transaction, error) {
	return _NodesGovernance.Contract.FreeGPU(&_NodesGovernance.TransactOpts, gpuNodes)
}

// FreeGPU is a paid mutator transaction binding the contract method 0x036fe9c2.
//
// Solidity: function freeGPU((address,string,uint256)[] gpuNodes) returns()
func (_NodesGovernance *NodesGovernanceTransactorSession) FreeGPU(gpuNodes []NodeComputeUsed) (*types.Transaction, error) {
	return _NodesGovernance.Contract.FreeGPU(&_NodesGovernance.TransactOpts, gpuNodes)
}

// NodesGovernanceInitialize is a paid mutator transaction binding the contract method 0xefa219e0.
//
// Solidity: function nodesGovernance_initialize((address,string,address,string[],uint256[])[] _nodesInfos, address _allocator, uint256 _roundDurationTime, address _stakeToken) returns()
func (_NodesGovernance *NodesGovernanceTransactor) NodesGovernanceInitialize(opts *bind.TransactOpts, _nodesInfos []NodeInfo, _allocator common.Address, _roundDurationTime *big.Int, _stakeToken common.Address) (*types.Transaction, error) {
	return _NodesGovernance.contract.Transact(opts, "nodesGovernance_initialize", _nodesInfos, _allocator, _roundDurationTime, _stakeToken)
}

// NodesGovernanceInitialize is a paid mutator transaction binding the contract method 0xefa219e0.
//
// Solidity: function nodesGovernance_initialize((address,string,address,string[],uint256[])[] _nodesInfos, address _allocator, uint256 _roundDurationTime, address _stakeToken) returns()
func (_NodesGovernance *NodesGovernanceSession) NodesGovernanceInitialize(_nodesInfos []NodeInfo, _allocator common.Address, _roundDurationTime *big.Int, _stakeToken common.Address) (*types.Transaction, error) {
	return _NodesGovernance.Contract.NodesGovernanceInitialize(&_NodesGovernance.TransactOpts, _nodesInfos, _allocator, _roundDurationTime, _stakeToken)
}

// NodesGovernanceInitialize is a paid mutator transaction binding the contract method 0xefa219e0.
//
// Solidity: function nodesGovernance_initialize((address,string,address,string[],uint256[])[] _nodesInfos, address _allocator, uint256 _roundDurationTime, address _stakeToken) returns()
func (_NodesGovernance *NodesGovernanceTransactorSession) NodesGovernanceInitialize(_nodesInfos []NodeInfo, _allocator common.Address, _roundDurationTime *big.Int, _stakeToken common.Address) (*types.Transaction, error) {
	return _NodesGovernance.Contract.NodesGovernanceInitialize(&_NodesGovernance.TransactOpts, _nodesInfos, _allocator, _roundDurationTime, _stakeToken)
}

// RegisterNode is a paid mutator transaction binding the contract method 0xefca74d2.
//
// Solidity: function registerNode(address wallet, string aliasIdentifier, string[] gpuTypes, uint256[] gpuNums) payable returns()
func (_NodesGovernance *NodesGovernanceTransactor) RegisterNode(opts *bind.TransactOpts, wallet common.Address, aliasIdentifier string, gpuTypes []string, gpuNums []*big.Int) (*types.Transaction, error) {
	return _NodesGovernance.contract.Transact(opts, "registerNode", wallet, aliasIdentifier, gpuTypes, gpuNums)
}

// RegisterNode is a paid mutator transaction binding the contract method 0xefca74d2.
//
// Solidity: function registerNode(address wallet, string aliasIdentifier, string[] gpuTypes, uint256[] gpuNums) payable returns()
func (_NodesGovernance *NodesGovernanceSession) RegisterNode(wallet common.Address, aliasIdentifier string, gpuTypes []string, gpuNums []*big.Int) (*types.Transaction, error) {
	return _NodesGovernance.Contract.RegisterNode(&_NodesGovernance.TransactOpts, wallet, aliasIdentifier, gpuTypes, gpuNums)
}

// RegisterNode is a paid mutator transaction binding the contract method 0xefca74d2.
//
// Solidity: function registerNode(address wallet, string aliasIdentifier, string[] gpuTypes, uint256[] gpuNums) payable returns()
func (_NodesGovernance *NodesGovernanceTransactorSession) RegisterNode(wallet common.Address, aliasIdentifier string, gpuTypes []string, gpuNums []*big.Int) (*types.Transaction, error) {
	return _NodesGovernance.Contract.RegisterNode(&_NodesGovernance.TransactOpts, wallet, aliasIdentifier, gpuTypes, gpuNums)
}

// SettlementOnePeriod is a paid mutator transaction binding the contract method 0x4d4fc0b8.
//
// Solidity: function settlementOnePeriod(uint256 detectPeriodId) returns((uint64,uint64,uint128,address,address)[] states, uint256 totalQuotas)
func (_NodesGovernance *NodesGovernanceTransactor) SettlementOnePeriod(opts *bind.TransactOpts, detectPeriodId *big.Int) (*types.Transaction, error) {
	return _NodesGovernance.contract.Transact(opts, "settlementOnePeriod", detectPeriodId)
}

// SettlementOnePeriod is a paid mutator transaction binding the contract method 0x4d4fc0b8.
//
// Solidity: function settlementOnePeriod(uint256 detectPeriodId) returns((uint64,uint64,uint128,address,address)[] states, uint256 totalQuotas)
func (_NodesGovernance *NodesGovernanceSession) SettlementOnePeriod(detectPeriodId *big.Int) (*types.Transaction, error) {
	return _NodesGovernance.Contract.SettlementOnePeriod(&_NodesGovernance.TransactOpts, detectPeriodId)
}

// SettlementOnePeriod is a paid mutator transaction binding the contract method 0x4d4fc0b8.
//
// Solidity: function settlementOnePeriod(uint256 detectPeriodId) returns((uint64,uint64,uint128,address,address)[] states, uint256 totalQuotas)
func (_NodesGovernance *NodesGovernanceTransactorSession) SettlementOnePeriod(detectPeriodId *big.Int) (*types.Transaction, error) {
	return _NodesGovernance.Contract.SettlementOnePeriod(&_NodesGovernance.TransactOpts, detectPeriodId)
}

// StartNewValidationRound is a paid mutator transaction binding the contract method 0x63c94199.
//
// Solidity: function startNewValidationRound() returns(uint256 detectId, uint256 roundId)
func (_NodesGovernance *NodesGovernanceTransactor) StartNewValidationRound(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _NodesGovernance.contract.Transact(opts, "startNewValidationRound")
}

// StartNewValidationRound is a paid mutator transaction binding the contract method 0x63c94199.
//
// Solidity: function startNewValidationRound() returns(uint256 detectId, uint256 roundId)
func (_NodesGovernance *NodesGovernanceSession) StartNewValidationRound() (*types.Transaction, error) {
	return _NodesGovernance.Contract.StartNewValidationRound(&_NodesGovernance.TransactOpts)
}

// StartNewValidationRound is a paid mutator transaction binding the contract method 0x63c94199.
//
// Solidity: function startNewValidationRound() returns(uint256 detectId, uint256 roundId)
func (_NodesGovernance *NodesGovernanceTransactorSession) StartNewValidationRound() (*types.Transaction, error) {
	return _NodesGovernance.Contract.StartNewValidationRound(&_NodesGovernance.TransactOpts)
}

// Vote is a paid mutator transaction binding the contract method 0xe2cdd42a.
//
// Solidity: function vote(uint256 roundId, address candidate, bool result) returns()
func (_NodesGovernance *NodesGovernanceTransactor) Vote(opts *bind.TransactOpts, roundId *big.Int, candidate common.Address, result bool) (*types.Transaction, error) {
	return _NodesGovernance.contract.Transact(opts, "vote", roundId, candidate, result)
}

// Vote is a paid mutator transaction binding the contract method 0xe2cdd42a.
//
// Solidity: function vote(uint256 roundId, address candidate, bool result) returns()
func (_NodesGovernance *NodesGovernanceSession) Vote(roundId *big.Int, candidate common.Address, result bool) (*types.Transaction, error) {
	return _NodesGovernance.Contract.Vote(&_NodesGovernance.TransactOpts, roundId, candidate, result)
}

// Vote is a paid mutator transaction binding the contract method 0xe2cdd42a.
//
// Solidity: function vote(uint256 roundId, address candidate, bool result) returns()
func (_NodesGovernance *NodesGovernanceTransactorSession) Vote(roundId *big.Int, candidate common.Address, result bool) (*types.Transaction, error) {
	return _NodesGovernance.Contract.Vote(&_NodesGovernance.TransactOpts, roundId, candidate, result)
}

// NodesGovernanceAuthorizedIterator is returned from FilterAuthorized and is used to iterate over the raw logs and unpacked data for Authorized events raised by the NodesGovernance contract.
type NodesGovernanceAuthorizedIterator struct {
	Event *NodesGovernanceAuthorized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NodesGovernanceAuthorizedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NodesGovernanceAuthorized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NodesGovernanceAuthorized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NodesGovernanceAuthorizedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NodesGovernanceAuthorizedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NodesGovernanceAuthorized represents a Authorized event raised by the NodesGovernance contract.
type NodesGovernanceAuthorized struct {
	Owner   common.Address
	Spender common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterAuthorized is a free log retrieval operation binding the contract event 0xf5a7f4fb8a92356e8c8c4ae7ac3589908381450500a7e2fd08c95600021ee889.
//
// Solidity: event Authorized(address indexed owner, address indexed spender)
func (_NodesGovernance *NodesGovernanceFilterer) FilterAuthorized(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*NodesGovernanceAuthorizedIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _NodesGovernance.contract.FilterLogs(opts, "Authorized", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &NodesGovernanceAuthorizedIterator{contract: _NodesGovernance.contract, event: "Authorized", logs: logs, sub: sub}, nil
}

// WatchAuthorized is a free log subscription operation binding the contract event 0xf5a7f4fb8a92356e8c8c4ae7ac3589908381450500a7e2fd08c95600021ee889.
//
// Solidity: event Authorized(address indexed owner, address indexed spender)
func (_NodesGovernance *NodesGovernanceFilterer) WatchAuthorized(opts *bind.WatchOpts, sink chan<- *NodesGovernanceAuthorized, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _NodesGovernance.contract.WatchLogs(opts, "Authorized", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NodesGovernanceAuthorized)
				if err := _NodesGovernance.contract.UnpackLog(event, "Authorized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAuthorized is a log parse operation binding the contract event 0xf5a7f4fb8a92356e8c8c4ae7ac3589908381450500a7e2fd08c95600021ee889.
//
// Solidity: event Authorized(address indexed owner, address indexed spender)
func (_NodesGovernance *NodesGovernanceFilterer) ParseAuthorized(log types.Log) (*NodesGovernanceAuthorized, error) {
	event := new(NodesGovernanceAuthorized)
	if err := _NodesGovernance.contract.UnpackLog(event, "Authorized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NodesGovernanceNodeActivedIterator is returned from FilterNodeActived and is used to iterate over the raw logs and unpacked data for NodeActived events raised by the NodesGovernance contract.
type NodesGovernanceNodeActivedIterator struct {
	Event *NodesGovernanceNodeActived // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NodesGovernanceNodeActivedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NodesGovernanceNodeActived)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NodesGovernanceNodeActived)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NodesGovernanceNodeActivedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NodesGovernanceNodeActivedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NodesGovernanceNodeActived represents a NodeActived event raised by the NodesGovernance contract.
type NodesGovernanceNodeActived struct {
	Wallet          common.Address
	Identifier      common.Address
	Time            *big.Int
	AliasIdentifier string
	GpuTypes        []string
	GpuNums         []*big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterNodeActived is a free log retrieval operation binding the contract event 0xb0a73f160683fa6bd1601bd25cd9e2addc090f0a74959bf51c6a2a4560af6f5f.
//
// Solidity: event NodeActived(address indexed wallet, address identifier, uint256 time, string aliasIdentifier, string[] gpuTypes, uint256[] gpuNums)
func (_NodesGovernance *NodesGovernanceFilterer) FilterNodeActived(opts *bind.FilterOpts, wallet []common.Address) (*NodesGovernanceNodeActivedIterator, error) {

	var walletRule []interface{}
	for _, walletItem := range wallet {
		walletRule = append(walletRule, walletItem)
	}

	logs, sub, err := _NodesGovernance.contract.FilterLogs(opts, "NodeActived", walletRule)
	if err != nil {
		return nil, err
	}
	return &NodesGovernanceNodeActivedIterator{contract: _NodesGovernance.contract, event: "NodeActived", logs: logs, sub: sub}, nil
}

// WatchNodeActived is a free log subscription operation binding the contract event 0xb0a73f160683fa6bd1601bd25cd9e2addc090f0a74959bf51c6a2a4560af6f5f.
//
// Solidity: event NodeActived(address indexed wallet, address identifier, uint256 time, string aliasIdentifier, string[] gpuTypes, uint256[] gpuNums)
func (_NodesGovernance *NodesGovernanceFilterer) WatchNodeActived(opts *bind.WatchOpts, sink chan<- *NodesGovernanceNodeActived, wallet []common.Address) (event.Subscription, error) {

	var walletRule []interface{}
	for _, walletItem := range wallet {
		walletRule = append(walletRule, walletItem)
	}

	logs, sub, err := _NodesGovernance.contract.WatchLogs(opts, "NodeActived", walletRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NodesGovernanceNodeActived)
				if err := _NodesGovernance.contract.UnpackLog(event, "NodeActived", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNodeActived is a log parse operation binding the contract event 0xb0a73f160683fa6bd1601bd25cd9e2addc090f0a74959bf51c6a2a4560af6f5f.
//
// Solidity: event NodeActived(address indexed wallet, address identifier, uint256 time, string aliasIdentifier, string[] gpuTypes, uint256[] gpuNums)
func (_NodesGovernance *NodesGovernanceFilterer) ParseNodeActived(log types.Log) (*NodesGovernanceNodeActived, error) {
	event := new(NodesGovernanceNodeActived)
	if err := _NodesGovernance.contract.UnpackLog(event, "NodeActived", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NodesGovernanceNodeAttachedIterator is returned from FilterNodeAttached and is used to iterate over the raw logs and unpacked data for NodeAttached events raised by the NodesGovernance contract.
type NodesGovernanceNodeAttachedIterator struct {
	Event *NodesGovernanceNodeAttached // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NodesGovernanceNodeAttachedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NodesGovernanceNodeAttached)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NodesGovernanceNodeAttached)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NodesGovernanceNodeAttachedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NodesGovernanceNodeAttachedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NodesGovernanceNodeAttached represents a NodeAttached event raised by the NodesGovernance contract.
type NodesGovernanceNodeAttached struct {
	IdentifierOfProvider common.Address
	IdentifierOfServer   common.Address
	Raw                  types.Log // Blockchain specific contextual infos
}

// FilterNodeAttached is a free log retrieval operation binding the contract event 0x042e2dbbe7288392f225b5cc7f610946ae1a1e8673b3f8ce4f6fc3bc6dee5aa6.
//
// Solidity: event NodeAttached(address indexed identifierOfProvider, address indexed identifierOfServer)
func (_NodesGovernance *NodesGovernanceFilterer) FilterNodeAttached(opts *bind.FilterOpts, identifierOfProvider []common.Address, identifierOfServer []common.Address) (*NodesGovernanceNodeAttachedIterator, error) {

	var identifierOfProviderRule []interface{}
	for _, identifierOfProviderItem := range identifierOfProvider {
		identifierOfProviderRule = append(identifierOfProviderRule, identifierOfProviderItem)
	}
	var identifierOfServerRule []interface{}
	for _, identifierOfServerItem := range identifierOfServer {
		identifierOfServerRule = append(identifierOfServerRule, identifierOfServerItem)
	}

	logs, sub, err := _NodesGovernance.contract.FilterLogs(opts, "NodeAttached", identifierOfProviderRule, identifierOfServerRule)
	if err != nil {
		return nil, err
	}
	return &NodesGovernanceNodeAttachedIterator{contract: _NodesGovernance.contract, event: "NodeAttached", logs: logs, sub: sub}, nil
}

// WatchNodeAttached is a free log subscription operation binding the contract event 0x042e2dbbe7288392f225b5cc7f610946ae1a1e8673b3f8ce4f6fc3bc6dee5aa6.
//
// Solidity: event NodeAttached(address indexed identifierOfProvider, address indexed identifierOfServer)
func (_NodesGovernance *NodesGovernanceFilterer) WatchNodeAttached(opts *bind.WatchOpts, sink chan<- *NodesGovernanceNodeAttached, identifierOfProvider []common.Address, identifierOfServer []common.Address) (event.Subscription, error) {

	var identifierOfProviderRule []interface{}
	for _, identifierOfProviderItem := range identifierOfProvider {
		identifierOfProviderRule = append(identifierOfProviderRule, identifierOfProviderItem)
	}
	var identifierOfServerRule []interface{}
	for _, identifierOfServerItem := range identifierOfServer {
		identifierOfServerRule = append(identifierOfServerRule, identifierOfServerItem)
	}

	logs, sub, err := _NodesGovernance.contract.WatchLogs(opts, "NodeAttached", identifierOfProviderRule, identifierOfServerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NodesGovernanceNodeAttached)
				if err := _NodesGovernance.contract.UnpackLog(event, "NodeAttached", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNodeAttached is a log parse operation binding the contract event 0x042e2dbbe7288392f225b5cc7f610946ae1a1e8673b3f8ce4f6fc3bc6dee5aa6.
//
// Solidity: event NodeAttached(address indexed identifierOfProvider, address indexed identifierOfServer)
func (_NodesGovernance *NodesGovernanceFilterer) ParseNodeAttached(log types.Log) (*NodesGovernanceNodeAttached, error) {
	event := new(NodesGovernanceNodeAttached)
	if err := _NodesGovernance.contract.UnpackLog(event, "NodeAttached", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NodesGovernanceNodeDeregisteredIterator is returned from FilterNodeDeregistered and is used to iterate over the raw logs and unpacked data for NodeDeregistered events raised by the NodesGovernance contract.
type NodesGovernanceNodeDeregisteredIterator struct {
	Event *NodesGovernanceNodeDeregistered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NodesGovernanceNodeDeregisteredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NodesGovernanceNodeDeregistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NodesGovernanceNodeDeregistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NodesGovernanceNodeDeregisteredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NodesGovernanceNodeDeregisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NodesGovernanceNodeDeregistered represents a NodeDeregistered event raised by the NodesGovernance contract.
type NodesGovernanceNodeDeregistered struct {
	Identifier      common.Address
	Time            *big.Int
	AliasIdentifier string
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterNodeDeregistered is a free log retrieval operation binding the contract event 0x60d01d146c7aa1a7d4e3fdd5543872f7d5b2a241980a66b3552ae1a86ae18453.
//
// Solidity: event NodeDeregistered(address indexed identifier, uint256 time, string aliasIdentifier)
func (_NodesGovernance *NodesGovernanceFilterer) FilterNodeDeregistered(opts *bind.FilterOpts, identifier []common.Address) (*NodesGovernanceNodeDeregisteredIterator, error) {

	var identifierRule []interface{}
	for _, identifierItem := range identifier {
		identifierRule = append(identifierRule, identifierItem)
	}

	logs, sub, err := _NodesGovernance.contract.FilterLogs(opts, "NodeDeregistered", identifierRule)
	if err != nil {
		return nil, err
	}
	return &NodesGovernanceNodeDeregisteredIterator{contract: _NodesGovernance.contract, event: "NodeDeregistered", logs: logs, sub: sub}, nil
}

// WatchNodeDeregistered is a free log subscription operation binding the contract event 0x60d01d146c7aa1a7d4e3fdd5543872f7d5b2a241980a66b3552ae1a86ae18453.
//
// Solidity: event NodeDeregistered(address indexed identifier, uint256 time, string aliasIdentifier)
func (_NodesGovernance *NodesGovernanceFilterer) WatchNodeDeregistered(opts *bind.WatchOpts, sink chan<- *NodesGovernanceNodeDeregistered, identifier []common.Address) (event.Subscription, error) {

	var identifierRule []interface{}
	for _, identifierItem := range identifier {
		identifierRule = append(identifierRule, identifierItem)
	}

	logs, sub, err := _NodesGovernance.contract.WatchLogs(opts, "NodeDeregistered", identifierRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NodesGovernanceNodeDeregistered)
				if err := _NodesGovernance.contract.UnpackLog(event, "NodeDeregistered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNodeDeregistered is a log parse operation binding the contract event 0x60d01d146c7aa1a7d4e3fdd5543872f7d5b2a241980a66b3552ae1a86ae18453.
//
// Solidity: event NodeDeregistered(address indexed identifier, uint256 time, string aliasIdentifier)
func (_NodesGovernance *NodesGovernanceFilterer) ParseNodeDeregistered(log types.Log) (*NodesGovernanceNodeDeregistered, error) {
	event := new(NodesGovernanceNodeDeregistered)
	if err := _NodesGovernance.contract.UnpackLog(event, "NodeDeregistered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NodesGovernanceNodeDetachedIterator is returned from FilterNodeDetached and is used to iterate over the raw logs and unpacked data for NodeDetached events raised by the NodesGovernance contract.
type NodesGovernanceNodeDetachedIterator struct {
	Event *NodesGovernanceNodeDetached // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NodesGovernanceNodeDetachedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NodesGovernanceNodeDetached)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NodesGovernanceNodeDetached)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NodesGovernanceNodeDetachedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NodesGovernanceNodeDetachedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NodesGovernanceNodeDetached represents a NodeDetached event raised by the NodesGovernance contract.
type NodesGovernanceNodeDetached struct {
	IdentifierOfProvider common.Address
	IdentifierOfServer   common.Address
	Raw                  types.Log // Blockchain specific contextual infos
}

// FilterNodeDetached is a free log retrieval operation binding the contract event 0x864dd06d15940858b627540246db79e66082ff76b9712b0bb5d483d168b1cd18.
//
// Solidity: event NodeDetached(address indexed identifierOfProvider, address indexed identifierOfServer)
func (_NodesGovernance *NodesGovernanceFilterer) FilterNodeDetached(opts *bind.FilterOpts, identifierOfProvider []common.Address, identifierOfServer []common.Address) (*NodesGovernanceNodeDetachedIterator, error) {

	var identifierOfProviderRule []interface{}
	for _, identifierOfProviderItem := range identifierOfProvider {
		identifierOfProviderRule = append(identifierOfProviderRule, identifierOfProviderItem)
	}
	var identifierOfServerRule []interface{}
	for _, identifierOfServerItem := range identifierOfServer {
		identifierOfServerRule = append(identifierOfServerRule, identifierOfServerItem)
	}

	logs, sub, err := _NodesGovernance.contract.FilterLogs(opts, "NodeDetached", identifierOfProviderRule, identifierOfServerRule)
	if err != nil {
		return nil, err
	}
	return &NodesGovernanceNodeDetachedIterator{contract: _NodesGovernance.contract, event: "NodeDetached", logs: logs, sub: sub}, nil
}

// WatchNodeDetached is a free log subscription operation binding the contract event 0x864dd06d15940858b627540246db79e66082ff76b9712b0bb5d483d168b1cd18.
//
// Solidity: event NodeDetached(address indexed identifierOfProvider, address indexed identifierOfServer)
func (_NodesGovernance *NodesGovernanceFilterer) WatchNodeDetached(opts *bind.WatchOpts, sink chan<- *NodesGovernanceNodeDetached, identifierOfProvider []common.Address, identifierOfServer []common.Address) (event.Subscription, error) {

	var identifierOfProviderRule []interface{}
	for _, identifierOfProviderItem := range identifierOfProvider {
		identifierOfProviderRule = append(identifierOfProviderRule, identifierOfProviderItem)
	}
	var identifierOfServerRule []interface{}
	for _, identifierOfServerItem := range identifierOfServer {
		identifierOfServerRule = append(identifierOfServerRule, identifierOfServerItem)
	}

	logs, sub, err := _NodesGovernance.contract.WatchLogs(opts, "NodeDetached", identifierOfProviderRule, identifierOfServerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NodesGovernanceNodeDetached)
				if err := _NodesGovernance.contract.UnpackLog(event, "NodeDetached", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNodeDetached is a log parse operation binding the contract event 0x864dd06d15940858b627540246db79e66082ff76b9712b0bb5d483d168b1cd18.
//
// Solidity: event NodeDetached(address indexed identifierOfProvider, address indexed identifierOfServer)
func (_NodesGovernance *NodesGovernanceFilterer) ParseNodeDetached(log types.Log) (*NodesGovernanceNodeDetached, error) {
	event := new(NodesGovernanceNodeDetached)
	if err := _NodesGovernance.contract.UnpackLog(event, "NodeDetached", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NodesGovernanceNodeRegisteredIterator is returned from FilterNodeRegistered and is used to iterate over the raw logs and unpacked data for NodeRegistered events raised by the NodesGovernance contract.
type NodesGovernanceNodeRegisteredIterator struct {
	Event *NodesGovernanceNodeRegistered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NodesGovernanceNodeRegisteredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NodesGovernanceNodeRegistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NodesGovernanceNodeRegistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NodesGovernanceNodeRegisteredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NodesGovernanceNodeRegisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NodesGovernanceNodeRegistered represents a NodeRegistered event raised by the NodesGovernance contract.
type NodesGovernanceNodeRegistered struct {
	Wallet          common.Address
	Identifier      common.Address
	Time            *big.Int
	AliasIdentifier string
	GpuTypes        []string
	GpuNums         []*big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterNodeRegistered is a free log retrieval operation binding the contract event 0x99c250edfb33141684f230eecda8aa955bf0d62d17bcaaab0ab43f318f3637b0.
//
// Solidity: event NodeRegistered(address indexed wallet, address identifier, uint256 time, string aliasIdentifier, string[] gpuTypes, uint256[] gpuNums)
func (_NodesGovernance *NodesGovernanceFilterer) FilterNodeRegistered(opts *bind.FilterOpts, wallet []common.Address) (*NodesGovernanceNodeRegisteredIterator, error) {

	var walletRule []interface{}
	for _, walletItem := range wallet {
		walletRule = append(walletRule, walletItem)
	}

	logs, sub, err := _NodesGovernance.contract.FilterLogs(opts, "NodeRegistered", walletRule)
	if err != nil {
		return nil, err
	}
	return &NodesGovernanceNodeRegisteredIterator{contract: _NodesGovernance.contract, event: "NodeRegistered", logs: logs, sub: sub}, nil
}

// WatchNodeRegistered is a free log subscription operation binding the contract event 0x99c250edfb33141684f230eecda8aa955bf0d62d17bcaaab0ab43f318f3637b0.
//
// Solidity: event NodeRegistered(address indexed wallet, address identifier, uint256 time, string aliasIdentifier, string[] gpuTypes, uint256[] gpuNums)
func (_NodesGovernance *NodesGovernanceFilterer) WatchNodeRegistered(opts *bind.WatchOpts, sink chan<- *NodesGovernanceNodeRegistered, wallet []common.Address) (event.Subscription, error) {

	var walletRule []interface{}
	for _, walletItem := range wallet {
		walletRule = append(walletRule, walletItem)
	}

	logs, sub, err := _NodesGovernance.contract.WatchLogs(opts, "NodeRegistered", walletRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NodesGovernanceNodeRegistered)
				if err := _NodesGovernance.contract.UnpackLog(event, "NodeRegistered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNodeRegistered is a log parse operation binding the contract event 0x99c250edfb33141684f230eecda8aa955bf0d62d17bcaaab0ab43f318f3637b0.
//
// Solidity: event NodeRegistered(address indexed wallet, address identifier, uint256 time, string aliasIdentifier, string[] gpuTypes, uint256[] gpuNums)
func (_NodesGovernance *NodesGovernanceFilterer) ParseNodeRegistered(log types.Log) (*NodesGovernanceNodeRegistered, error) {
	event := new(NodesGovernanceNodeRegistered)
	if err := _NodesGovernance.contract.UnpackLog(event, "NodeRegistered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NodesGovernanceSettlementResultIterator is returned from FilterSettlementResult and is used to iterate over the raw logs and unpacked data for SettlementResult events raised by the NodesGovernance contract.
type NodesGovernanceSettlementResultIterator struct {
	Event *NodesGovernanceSettlementResult // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NodesGovernanceSettlementResultIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NodesGovernanceSettlementResult)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NodesGovernanceSettlementResult)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NodesGovernanceSettlementResultIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NodesGovernanceSettlementResultIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NodesGovernanceSettlementResult represents a SettlementResult event raised by the NodesGovernance contract.
type NodesGovernanceSettlementResult struct {
	States     []NodeState
	TotalQuota *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterSettlementResult is a free log retrieval operation binding the contract event 0xd51417935ddbb98970f20a5f6f9c5070ce90768d0e3bfaba49e7e2f8621debac.
//
// Solidity: event SettlementResult((uint64,uint64,uint128,address,address)[] states, uint256 totalQuota)
func (_NodesGovernance *NodesGovernanceFilterer) FilterSettlementResult(opts *bind.FilterOpts) (*NodesGovernanceSettlementResultIterator, error) {

	logs, sub, err := _NodesGovernance.contract.FilterLogs(opts, "SettlementResult")
	if err != nil {
		return nil, err
	}
	return &NodesGovernanceSettlementResultIterator{contract: _NodesGovernance.contract, event: "SettlementResult", logs: logs, sub: sub}, nil
}

// WatchSettlementResult is a free log subscription operation binding the contract event 0xd51417935ddbb98970f20a5f6f9c5070ce90768d0e3bfaba49e7e2f8621debac.
//
// Solidity: event SettlementResult((uint64,uint64,uint128,address,address)[] states, uint256 totalQuota)
func (_NodesGovernance *NodesGovernanceFilterer) WatchSettlementResult(opts *bind.WatchOpts, sink chan<- *NodesGovernanceSettlementResult) (event.Subscription, error) {

	logs, sub, err := _NodesGovernance.contract.WatchLogs(opts, "SettlementResult")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NodesGovernanceSettlementResult)
				if err := _NodesGovernance.contract.UnpackLog(event, "SettlementResult", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSettlementResult is a log parse operation binding the contract event 0xd51417935ddbb98970f20a5f6f9c5070ce90768d0e3bfaba49e7e2f8621debac.
//
// Solidity: event SettlementResult((uint64,uint64,uint128,address,address)[] states, uint256 totalQuota)
func (_NodesGovernance *NodesGovernanceFilterer) ParseSettlementResult(log types.Log) (*NodesGovernanceSettlementResult, error) {
	event := new(NodesGovernanceSettlementResult)
	if err := _NodesGovernance.contract.UnpackLog(event, "SettlementResult", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NodesGovernanceValidationResultIterator is returned from FilterValidationResult and is used to iterate over the raw logs and unpacked data for ValidationResult events raised by the NodesGovernance contract.
type NodesGovernanceValidationResultIterator struct {
	Event *NodesGovernanceValidationResult // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NodesGovernanceValidationResultIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NodesGovernanceValidationResult)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NodesGovernanceValidationResult)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NodesGovernanceValidationResultIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NodesGovernanceValidationResultIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NodesGovernanceValidationResult represents a ValidationResult event raised by the NodesGovernance contract.
type NodesGovernanceValidationResult struct {
	RoundId   *big.Int
	Validator common.Address
	Result    bool
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterValidationResult is a free log retrieval operation binding the contract event 0x92de7c81b7cf6c7977d7cd091ccd01996264a02b7dbbce5d2a2524a8daabe769.
//
// Solidity: event ValidationResult(uint256 roundId, address validator, bool result)
func (_NodesGovernance *NodesGovernanceFilterer) FilterValidationResult(opts *bind.FilterOpts) (*NodesGovernanceValidationResultIterator, error) {

	logs, sub, err := _NodesGovernance.contract.FilterLogs(opts, "ValidationResult")
	if err != nil {
		return nil, err
	}
	return &NodesGovernanceValidationResultIterator{contract: _NodesGovernance.contract, event: "ValidationResult", logs: logs, sub: sub}, nil
}

// WatchValidationResult is a free log subscription operation binding the contract event 0x92de7c81b7cf6c7977d7cd091ccd01996264a02b7dbbce5d2a2524a8daabe769.
//
// Solidity: event ValidationResult(uint256 roundId, address validator, bool result)
func (_NodesGovernance *NodesGovernanceFilterer) WatchValidationResult(opts *bind.WatchOpts, sink chan<- *NodesGovernanceValidationResult) (event.Subscription, error) {

	logs, sub, err := _NodesGovernance.contract.WatchLogs(opts, "ValidationResult")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NodesGovernanceValidationResult)
				if err := _NodesGovernance.contract.UnpackLog(event, "ValidationResult", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidationResult is a log parse operation binding the contract event 0x92de7c81b7cf6c7977d7cd091ccd01996264a02b7dbbce5d2a2524a8daabe769.
//
// Solidity: event ValidationResult(uint256 roundId, address validator, bool result)
func (_NodesGovernance *NodesGovernanceFilterer) ParseValidationResult(log types.Log) (*NodesGovernanceValidationResult, error) {
	event := new(NodesGovernanceValidationResult)
	if err := _NodesGovernance.contract.UnpackLog(event, "ValidationResult", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NodesGovernanceValidationStartedIterator is returned from FilterValidationStarted and is used to iterate over the raw logs and unpacked data for ValidationStarted events raised by the NodesGovernance contract.
type NodesGovernanceValidationStartedIterator struct {
	Event *NodesGovernanceValidationStarted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NodesGovernanceValidationStartedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NodesGovernanceValidationStarted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NodesGovernanceValidationStarted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NodesGovernanceValidationStartedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NodesGovernanceValidationStartedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NodesGovernanceValidationStarted represents a ValidationStarted event raised by the NodesGovernance contract.
type NodesGovernanceValidationStarted struct {
	RoundId                *big.Int
	ExpectedCompletionTime *big.Int
	Candidate              common.Address
	Validators             []common.Address
	Raw                    types.Log // Blockchain specific contextual infos
}

// FilterValidationStarted is a free log retrieval operation binding the contract event 0x71afff60b83105500984ce43d4633544224775a10de240da021704c056b58bdb.
//
// Solidity: event ValidationStarted(uint256 roundId, uint256 expectedCompletionTime, address candidate, address[] validators)
func (_NodesGovernance *NodesGovernanceFilterer) FilterValidationStarted(opts *bind.FilterOpts) (*NodesGovernanceValidationStartedIterator, error) {

	logs, sub, err := _NodesGovernance.contract.FilterLogs(opts, "ValidationStarted")
	if err != nil {
		return nil, err
	}
	return &NodesGovernanceValidationStartedIterator{contract: _NodesGovernance.contract, event: "ValidationStarted", logs: logs, sub: sub}, nil
}

// WatchValidationStarted is a free log subscription operation binding the contract event 0x71afff60b83105500984ce43d4633544224775a10de240da021704c056b58bdb.
//
// Solidity: event ValidationStarted(uint256 roundId, uint256 expectedCompletionTime, address candidate, address[] validators)
func (_NodesGovernance *NodesGovernanceFilterer) WatchValidationStarted(opts *bind.WatchOpts, sink chan<- *NodesGovernanceValidationStarted) (event.Subscription, error) {

	logs, sub, err := _NodesGovernance.contract.WatchLogs(opts, "ValidationStarted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NodesGovernanceValidationStarted)
				if err := _NodesGovernance.contract.UnpackLog(event, "ValidationStarted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidationStarted is a log parse operation binding the contract event 0x71afff60b83105500984ce43d4633544224775a10de240da021704c056b58bdb.
//
// Solidity: event ValidationStarted(uint256 roundId, uint256 expectedCompletionTime, address candidate, address[] validators)
func (_NodesGovernance *NodesGovernanceFilterer) ParseValidationStarted(log types.Log) (*NodesGovernanceValidationStarted, error) {
	event := new(NodesGovernanceValidationStarted)
	if err := _NodesGovernance.contract.UnpackLog(event, "ValidationStarted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
