// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package NodesGovernance

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// NodeComputeUsed is an auto generated low-level Go binding around an user-defined struct.
type NodeComputeUsed struct {
	Identifier common.Address
	GpuType    string
	Used       *big.Int
}

// NodeInfo is an auto generated low-level Go binding around an user-defined struct.
type NodeInfo struct {
	Identifier      common.Address
	AliasIdentifier string
	Wallet          common.Address
	GpuTypes        []string
	GpuNums         []*big.Int
}

// NodeState is an auto generated low-level Go binding around an user-defined struct.
type NodeState struct {
	FailedCnt     uint64
	SuccessfulCnt uint64
	ExpectCnt     *big.Int
	Wallet        common.Address
	Identifier    common.Address
}

// NodesRegistryComputeAvailable is an auto generated low-level Go binding around an user-defined struct.
type NodesRegistryComputeAvailable struct {
	GpuType  string
	TotalNum *big.Int
	Used     *big.Int
}

// NodesRegistryNode is an auto generated low-level Go binding around an user-defined struct.
type NodesRegistryNode struct {
	Identifier       common.Address
	AliasIdentifier  string
	RegistrationTime *big.Int
	Active           bool
	Gpus             []NodesRegistryComputeAvailable
	Wallet           common.Address
	Stake            *big.Int
}

// NodesGovernanceMetaData contains all meta data concerning the NodesGovernance contract.
var NodesGovernanceMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"Authorized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"identifier\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"aliasIdentifier\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"gpuTypes\",\"type\":\"string[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"gpuNums\",\"type\":\"uint256[]\"}],\"name\":\"NodeActived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"identifierOfProvider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"identifierOfServer\",\"type\":\"address\"}],\"name\":\"NodeAttached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"identifier\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"aliasIdentifier\",\"type\":\"string\"}],\"name\":\"NodeDeregistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"identifierOfProvider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"identifierOfServer\",\"type\":\"address\"}],\"name\":\"NodeDetached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"identifier\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"aliasIdentifier\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"gpuTypes\",\"type\":\"string[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"gpuNums\",\"type\":\"uint256[]\"}],\"name\":\"NodeRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"failedCnt\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"successfulCnt\",\"type\":\"uint64\"},{\"internalType\":\"uint128\",\"name\":\"expectCnt\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"identifier\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"structNodeState[]\",\"name\":\"states\",\"type\":\"tuple[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalQuota\",\"type\":\"uint256\"}],\"name\":\"SettlementResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"name\":\"ValidationResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expectedCompletionTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"candidate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"validators\",\"type\":\"address[]\"}],\"name\":\"ValidationStarted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MIN_CANDIDATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VALIDATOR_PER_CANDIDATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startIndex\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"gpuTypes\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"gpuNums\",\"type\":\"uint256[]\"}],\"name\":\"allocGPU\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"identifier\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"gpuType\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"used\",\"type\":\"uint256\"}],\"internalType\":\"structNodeComputeUsed[]\",\"name\":\"gpuNodes\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"len\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allocator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"at\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"identifier\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"aliasIdentifier\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"registrationTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"gpuType\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"used\",\"type\":\"uint256\"}],\"internalType\":\"structNodesRegistry.ComputeAvailable[]\",\"name\":\"gpus\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"}],\"internalType\":\"structNodesRegistry.Node\",\"name\":\"node\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"server\",\"type\":\"address\"}],\"name\":\"attach\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"candidatePerRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"numOfNodes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedCompletionTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"identifier\",\"type\":\"address\"}],\"name\":\"check\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentDetectCircleId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentDetectCircleStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRoundId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRoundStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deregisterNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"detectDurationTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"detectPeriods\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"server\",\"type\":\"address\"}],\"name\":\"dettach\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"identifier\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"gpuType\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"used\",\"type\":\"uint256\"}],\"internalType\":\"structNodeComputeUsed[]\",\"name\":\"gpuNodes\",\"type\":\"tuple[]\"}],\"name\":\"freeGPU\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"identifier\",\"type\":\"address\"}],\"name\":\"get\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"identifier\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"aliasIdentifier\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"registrationTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"gpuType\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"used\",\"type\":\"uint256\"}],\"internalType\":\"structNodesRegistry.ComputeAvailable[]\",\"name\":\"gpus\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"}],\"internalType\":\"structNodesRegistry.Node\",\"name\":\"node\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"getAttach\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"detectPeriodId\",\"type\":\"uint256\"}],\"name\":\"getOnePeriodSettlement\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"failedCnt\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"successfulCnt\",\"type\":\"uint64\"},{\"internalType\":\"uint128\",\"name\":\"expectCnt\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"identifier\",\"type\":\"address\"}],\"internalType\":\"structNodeState[]\",\"name\":\"states\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"totalQuotas\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"getRoundCandidates\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"candidates\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"candidate\",\"type\":\"address\"}],\"name\":\"getValidatorsOfCandidate\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"validators\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"gpuSummary\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"gpuType\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"used\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"gpuTypeOfNodes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"length\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"identifier\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"aliasIdentifier\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"gpuTypes\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"gpuNums\",\"type\":\"uint256[]\"}],\"internalType\":\"structNodeInfo[]\",\"name\":\"_nodesInfos\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"_allocator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_roundDurationTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_stakeToken\",\"type\":\"address\"}],\"name\":\"nodesGovernance_initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"aliasIdentifier\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"gpuTypes\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"gpuNums\",\"type\":\"uint256[]\"}],\"name\":\"registerNode\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roundDurationTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"detectPeriodId\",\"type\":\"uint256\"}],\"name\":\"settlementOnePeriod\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"failedCnt\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"successfulCnt\",\"type\":\"uint64\"},{\"internalType\":\"uint128\",\"name\":\"expectCnt\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"identifier\",\"type\":\"address\"}],\"internalType\":\"structNodeState[]\",\"name\":\"states\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"totalQuotas\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeToken\",\"outputs\":[{\"internalType\":\"contractIStake\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startNewValidationRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"detectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"validatorsPerCandidate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"candidate\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"votedPerCandidate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"candidate\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"yesVotes\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"noVotes\",\"type\":\"uint128\"},{\"internalType\":\"bool\",\"name\":\"completed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x60808060405234610021576110e0600a5560b4600b5561427c90816100278239f35b600080fdfe6080604052600436101561001257600080fd5b60003560e01c8063036fe9c2146102325780630732bd7e1461022d5780630e22e7f81461022857806318767f311461022357806318b1c0811461021e578063191805d8146102195780631bb12a43146102145780631f7b6d321461020f57806326cc3399146101c95780632ad4f0ad1461020a578063380dd9011461020557806349d2b420146102005780634d4fc0b8146101fb57806351ed6a30146101f65780635ff5c03c146101f15780636252e1c2146101ec5780636300c951146101e757806363c94199146101e2578063698083af146101dd5780637a0ca1e2146101d857806393e9d413146101d35780639cbe5efd146101ce578063a7f32314146101c9578063aa5dcecc146101c4578063c23697a8146101bf578063c2bc2efc146101ba578063c7edca7a146101b5578063de137270146101b0578063e0886f90146101ab578063e2cdd42a146101a6578063ed38ed0d146101a1578063efa219e01461019c578063efca74d2146101975763f67c5bdc1461019257600080fd5b611ecd565b611d54565b611c33565b611bb5565b611a2c565b611a01565b6119e3565b611969565b611883565b61175c565b611733565b610816565b611715565b6116df565b611624565b6115d6565b61144c565b611391565b610fe2565b610ec5565b610e9c565b610989565b6108d7565b6108b9565b610832565b6107f8565b6107da565b6107bc565b610663565b6105ea565b6104c1565b61044e565b61026c565b9181601f84011215610267578235916001600160401b038311610267576020808501948460051b01011161026757565b600080fd5b346102675760208060031936011261026757600480356001600160401b0381116102675761029d9036908301610237565b6008549093906102c8906102c1906001600160a01b03165b6001600160a01b031690565b33146134db565b60005b8481106102d457005b80856102ec6102e761032d948388613687565b612d4c565b6103006001600160a01b03821615156136a9565b6001600160a01b0381166000908152600260205260409020600381015460ff16610332575b505050612229565b6102cb565b6103a36103746103576103ef9460018060a01b03166000526004602052604060002090565b61036e61036588888d613687565b8a810190612d56565b9061359b565b54916103818315156136ea565b8961039c8a610394896040998a93613687565b0135946121c1565b910161366b565b50906103b560028093019182546121d0565b90556103d76103d16103c8868c8b613687565b88810190612d56565b90613569565b926103e3858b8a613687565b013592019182546121d0565b9055853880610325565b6001600160a01b0381160361026757565b6020908160408183019282815285518094520193019160005b828110610431575050505090565b83516001600160a01b031685529381019392810192600101610423565b34610267576040366003190112610267576104bd6104aa6104b161049e602435610477816103f9565b600435600052600d60205260406000209060018060a01b0316600052602052604060002090565b60405192838092612289565b0382611acf565b6040519182918261040a565b0390f35b34610267576020366003190112610267576004356104de816103f9565b600090338252600260205261051960018060a01b03610504816040862054161515612fe5565b3384526001602052604084209216809261325c565b1561054657337f864dd06d15940858b627540246db79e66082ff76b9712b0bb5d483d168b1cd188380a380f35b60405162461bcd60e51b815260206004820152601260248201527118da1a5b19081a5cc81b9bdd08195e1a5cdd60721b6044820152606490fd5b634e487b7160e01b600052603260045260246000fd5b6006548110156105cd5760066000527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f0190600090565b610580565b80548210156105cd5760005260206000200190600090565b3461026757606036600319011261026757602435610607816103f9565b61063560443591600435600052600d60205260406000209060018060a01b0316600052602052604060002090565b80548210156102675760209161064a916105d2565b905460405160039290921b1c6001600160a01b03168152f35b34610267576000806003193601126107b9576106803315156136a9565b33600090815260026020526040902080546106ae906106a7906001600160a01b03166102b5565b1515613729565b3360009081526001602052604090206106c890541561376c565b6001806106d6818401611eb2565b926004859101925b61075b575b5050506107026106f282611b8f565b80546001600160a01b0319169055565b33600090815260026020526040902061071a906138ab565b610723336131bd565b507f60d01d146c7aa1a7d4e3fdd5543872f7d5b2a241980a66b3552ae1a86ae18453604051806107553394428361392d565b0390a280f35b82548110156107b4576107ae818661077485948761366b565b508481015461078f86610786846137b8565b019182546121d0565b90556002906107a6828201926107868454936137b8565b905555612229565b906106de565b6106e3565b80fd5b34610267576000366003190112610267576020601454604051908152f35b34610267576000366003190112610267576020601554604051908152f35b34610267576000366003190112610267576020600654604051908152f35b3461026757600036600319011261026757602060405160058152f35b3461026757604036600319011261026757608061087b602435610854816103f9565b600435600052600e60205260406000209060018060a01b0316600052602052604060002090565b60018060a01b038154169060ff6002600183015492015416906040519283526001600160801b0381166020840152831c604083015215156060820152f35b34610267576000366003190112610267576020601754604051908152f35b34610267576000366003190112610267576020600a54604051908152f35b9291906040808501908086528251809252606091828701926020809501926000915b8684841061092a57505050505050930152565b855180516001600160401b039081168952828201511682890152838101516001600160801b031684890152828101516001600160a01b03908116848a0152608091820151169088015260a0909601959094019360019290920191610917565b3461026757602080600319360112610267576004359060006109ae6014548410612b40565b6109c2836000526010602052604060002090565b928354926109d1841515612b8c565b6109e5826000526012602052604060002090565b936109f1855415612bd8565b600195610a0a610a058883019384546121d0565b61224e565b6001600160801b039390841686895b610ce4575b5050509086929154965b610b5c575b5050509080929350610a49826000526013602052604060002090565b558254610a5581612c53565b9160005b828110610aa5575050507fd51417935ddbb98970f20a5f6f9c5070ce90768d0e3bfaba49e7e2f8621debac60405180610a938585836108f5565b0390a16104bd604051928392836108f5565b80610acb610ab6610b1b93896105d2565b905460039190911b1c6001600160a01b031690565b610b106102b56002610b0284610aeb896000526011602052604060002090565b9060018060a01b0316600052602052604060002090565b01546001600160a01b031690565b610b20575b50612229565b610a59565b610b3b610b4091610aeb866000526011602052604060002090565b612cdb565b610b4a8287612cc7565b52610b558186612cc7565b5038610b15565b80548711610cdf57610b86610b7b88600052600f602052604060002090565b95848701549061225c565b946000845b610ba8575b5050610b9f8394959697612229565b96959493610a28565b8154811015610cda57610c8881610aeb87610bde8d610bcb610ab684988a6105d2565b938491600052600e602052604060002090565b8054909290610bf5906001600160a01b03166102b5565b1561032557610c1290610aeb8c6000526011602052604060002090565b91610c28610c24600283015460ff1690565b1590565b610cc0570154878160801c91161115610c8e5780610c5c610c57610c8393546001600160401b039060401c1690565b612c24565b67ffffffffffffffff60401b82549160401b169067ffffffffffffffff60401b1916179055565b612229565b90610b8b565b80610ca6610c57610c8393546001600160401b031690565b6001600160401b03166001600160401b0319825416179055565b505080610ca6610c57610c8393546001600160401b031690565b610b90565b610a2d565b9089969798999291888a8c600654841015610e8e578392918691610d0a610e65966133c2565b9087606095610d1e610c2488860151151590565b8015610e7d575b610e7157610db9610ded95610da9610dc994610c839a610d58610dd798610d528b5160018060a01b031690565b90612471565b60a0890151610d98906001600160a01b03168a519093906001600160a01b031695610d81611af0565b8181529d8e01526001600160801b031660408d0152565b6001600160a01b03909116908a0152565b6001600160a01b03166080880152565b6000526011602052604060002090565b91516001600160a01b031690565b60018060a01b0316600052602052604060002090565b815160208301516040808501516001600160401b0390931691901b67ffffffffffffffff60401b16176001600160801b0319608092831b1617825560608301516001830180546001600160a01b03199081166001600160a01b0393841617909155919093015160029092018054929093169116179055565b90919299989796610a19565b50505050505050612229565b50604084015160028e015410610d25565b505050509897969598610a1e565b34610267576000366003190112610267576009546040516001600160a01b039091168152602090f35b3461026757602036600319011261026757600435600052600f602052604060002060026001820154910154906104bd6040519283928360209093929193604081019481520152565b60005b838110610f205750506000910152565b8181015183820152602001610f10565b90602091610f4981518092818552858086019101610f0d565b601f01601f1916010190565b9291906040808501818652825180915260609081870192828260051b890101936020809601936000925b87858510610f935750505050505050930152565b806001929394959697988d605f19908203018752895190848060a01b0382511681528580610fcc858501518a878601528a850190610f30565b9301519101529801940194019294939190610f7f565b346102675760603660031901126102675760048035906001600160401b03602435818111610267576110179036908401610237565b9091604435908111610267576110309036908501610237565b6008546000939061104d906102c1906001600160a01b03166102b5565b6110568161351c565b91849385915b8383106113075750505060069361107c611077838754612008565b613604565b885b865461108a818361225c565b8b10806112fe575b156112ed576110a46110a9918c612269565b613471565b6001600160a01b0381166000908152600260205260409020909390976110d6610c2460038b015460ff1690565b6112da576001600160a01b0385166000908152600460205260408120989c9b989a9993989384019390925b878410806112d1575b156112ad578b9c9d8b9c611121868c9e9d9e612cc7565b51156112a0576111369061036e878c8f61354e565b5480156112a05761114961114f916121c1565b8761366b565b5090600182019060028254930192611169845480926121d0565b9d8e15611290576111c68f918f8f8f8f60208f956111ad878f966111b5936111a86111bf986111988b8a612cc7565b516001600160a01b039091169052565b61354e565b959093612cc7565b5101923691611b2b565b9052612cc7565b51111561122b57509161121f93916112018e611219958f6111fb8c6111f5856111ef8386612cc7565b516121d0565b92612cc7565b526121d0565b9d604061120e858d612cc7565b51015254905561224e565b93612229565b929c9b9a99989c611101565b61121f949d50611263925092611250611219946112498f8b90612cc7565b519061225c565b905561125c878d612cc7565b51906121d0565b9a61126e868c612cc7565b51604061127b838b612cc7565b510152600061128a878d612cc7565b5261224e565b50509b5050509261121f90612229565b5099509261121f90612229565b999a509a909b9793945061108a92506112c69150612229565b99969291905061107e565b508d151561110a565b9a6112c691985061108a92939450612229565b50506104bd60405192839283610f55565b50861515611092565b90919461138461138a9161131f6103d189888d61354e565b6113606002600183015492019161134e61133b845480936121d0565b6113468d8a8c6135b4565b3511156135c4565b6113598b888a6135b4565b359061225c565b905561136d8885876135b4565b356113788989612cc7565b526113598885876135b4565b95612229565b919061105c565b34610267576020366003190112610267576004358060005260126020526040600020908154906113c082612c53565b9160005b8181106113f157836113e0846000526013602052604060002090565b54906104bd604051928392836108f5565b80611402610ab661142c93886105d2565b6114226102b56002610b0284610aeb8a6000526011602052604060002090565b6114315750612229565b6113c4565b610b3b610b4091610aeb876000526011602052604060002090565b346102675760003660031901126102675761147561146c601754426121d0565b600b54106121dd565b60166114896114848254612229565b601655565b61149242601755565b61149e601554426121d0565b600a54101561159a576114ba6114b5601454612229565b601455565b6114c342601555565b61152081546114d0611aff565b9080825260208201524260408201524260608201526114fb6014546000526010602052604060002090565b9060606003918051845560208101516001850155604081015160028501550151910155565b61152c600b544261225c565b60026115438354600052600f602052604060002090565b0155611550601454612704565b60016115678354600052600f602052604060002090565b0155611583601454825461157d600b544261225c565b916122fa565b601454905460408051928352602083019190915290f35b805460016115b46014546000526010602052604060002090565b01554260036115cf6014546000526010602052604060002090565b0155611520565b34610267576020366003190112610267576004356000526010602052608060406000208054906001810154906003600282015491015491604051938452602084015260408301526060820152f35b3461026757602036600319011261026757600435611641816103f9565b600090338252600260205261167c60018060a01b03611667816040862054161515612fe5565b338452600160205260408420921680926130c6565b156116a957337f042e2dbbe7288392f225b5cc7f610946ae1a1e8673b3f8ce4f6fc3bc6dee5aa68380a380f35b60405162461bcd60e51b815260206004820152600e60248201526d18da1a5b19081a5cc8195e1a5cdd60921b6044820152606490fd5b3461026757602036600319011261026757600435600052600f6020526104bd6104aa6104b1604060002060405192838092612289565b34610267576000366003190112610267576020601654604051908152f35b34610267576000366003190112610267576008546040516001600160a01b039091168152602090f35b3461026757602036600319011261026757602061178360043561177e816103f9565b6134af565b6040519015158152f35b60209182825260018060a01b0381511683830152828101516117bc60409160e083860152610100850190610f30565b938183015190606091828601528184015115156080860152608084015195601f1993848783030160a08801528751938483528383019184808760051b8601019a01966000945b8786106118375750505050505050505060c08161182f60a060e09401518386019060018060a01b03169052565b015191015290565b90919293949596979a8780828e868660019603018a525190878061186284518c85528c850190610f30565b93858101518685015201519101529d01960196019497969593929190611802565b34610267576020366003190112610267576004356118a0816103f9565b6118a8613305565b5060018060a01b031660005260026020526104bd60406000206006604051916118d083611a79565b80546118ed906001600160a01b03165b6001600160a01b03168452565b6118f960018201611eb2565b602084015260028101546040840152611922611919600383015460ff1690565b15156060850152565b61192e6004820161333e565b60808401526005810154611956906001600160a01b03165b6001600160a01b031660a0850152565b015460c08201526040519182918261178d565b346102675760208060031936011261026757600435611987816103f9565b60018060a01b03166000526001808252604060002091604051918282855491828152019460005282600020926000905b8282106119ce576104bd866104b1818a0382611acf565b845487529586019593830193908301906119b7565b34610267576000366003190112610267576020600b54604051908152f35b34610267576020366003190112610267576104bd611a206004356133c2565b6040519182918261178d565b3461026757606036600319011261026757602435611a49816103f9565b604435801515810361026757611a619160043561288f565b005b634e487b7160e01b600052604160045260246000fd5b60e081019081106001600160401b03821117611a9457604052565b611a63565b60a081019081106001600160401b03821117611a9457604052565b606081019081106001600160401b03821117611a9457604052565b90601f801991011681019081106001600160401b03821117611a9457604052565b60405190611afd82611a99565b565b60405190608082018281106001600160401b03821117611a9457604052565b60405190611afd82611ab4565b9291926001600160401b038211611a945760405191611b54601f8201601f191660200184611acf565b829481845281830111610267578281602093846000960137010152565b9080601f8301121561026757816020611b8c93359101611b2b565b90565b6020611ba8918160405193828580945193849201610f0d565b8101600381520301902090565b3461026757604036600319011261026757600435611bd2816103f9565b602435906001600160401b038211610267576020611c2191611bf982943690600401611b71565b9060018060a01b03166000526004825260406000208260405194838680955193849201610f0d565b82019081520301902054604051908152f35b34610267576080366003190112610267576004356001600160401b03811161026757611c66611cc8913690600401610237565b919060243590611c75826103f9565b60643591611c82836103f9565b60005494611ca760ff8760081c161580978198611d46575b8115611d26575b50611f61565b85611cba600160ff196000541617600055565b611d0d575b6044359261201b565b611cce57005b611cde61ff001960005416600055565b604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602090a1005b611d2161010061ff00196000541617600055565b611cbf565b303b15915081611d38575b5038611ca1565b6001915060ff161438611d31565b600160ff8216109150611c9a565b608036600319011261026757600435611d6c816103f9565b6001600160401b0360243581811161026757366023820112156102675780600401358281116102675736602482840101116102675760443583811161026757611db9903690600401610237565b9160643594851161026757611a6195611dd86024963690600401610237565b9690950190612e3f565b90600182811c92168015611e12575b6020831014611dfc57565b634e487b7160e01b600052602260045260246000fd5b91607f1691611df1565b9060009291805491611e2d83611de2565b918282526001938481169081600014611e8f5750600114611e4f575b50505050565b90919394506000526020928360002092846000945b838610611e7b575050505001019038808080611e49565b805485870183015294019385908201611e64565b9294505050602093945060ff191683830152151560051b01019038808080611e49565b90611afd611ec69260405193848092611e1c565b0383611acf565b34610267576020366003190112610267576004356001600160401b03811161026757611f186020611f05611f52933690600401611b71565b8160405193828580945193849201610f0d565b8101600581520301902060405190611f3482611ec68184611e1c565b60026001820154910154604051938493606085526060850190610f30565b91602084015260408301520390f35b15611f6857565b60405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b634e487b7160e01b600052601160045260246000fd5b9081601802916018830403611feb57565b611fc4565b600181901b91906001600160ff1b03811603611feb57565b81810292918115918404141715611feb57565b94939060ff60005460081c16156121685760005b8181106120cd5750939450611afd93506120ae916001600160a01b0391906120809061205e8482161515612dbd565b60018060a01b03166bffffffffffffffffffffffff60a01b6008541617600855565b1661208c811515612dfd565b60018060a01b03166bffffffffffffffffffffffff60a01b6009541617600955565b6120b742601755565b6120c86120c382611fda565b600a55565b600b55565b8061214d6120ea60406120e461216395878d612d2a565b01612d4c565b6120f86102e784878d612d2a565b90858b612113612109878484612d2a565b6020810190612d56565b9061214561213b89612133612129828989612d2a565b6060810190612d88565b979096612d2a565b6080810190612d88565b969095613d87565b610c8361215e6102e783868c612d2a565b614115565b61202f565b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b600019810191908211611feb57565b91908203918211611feb57565b156121e457565b60405162461bcd60e51b815260206004820152601c60248201527f50726576696f757320726f756e64206973206e6f7420656e64696e67000000006044820152606490fd5b6000198114611feb5760010190565b634e487b7160e01b600052600060045260246000fd5b9060018201809211611feb57565b91908201809211611feb57565b8115612273570690565b634e487b7160e01b600052601260045260246000fd5b90815480825260208092019260005281600020916000905b8282106122af575050505090565b83546001600160a01b0316855293840193600193840193909101906122a1565b9092608092611b8c95948352602083015260018060a01b031660408201528160608201520190612289565b90916123126000926000526010602052604060002090565b60020192825b60058410612327575050505050565b612330436121c1565b409360409061238261237d83519761237089612362886020830194428691606093918352602083015260408201520190565b03601f1981018b528a611acf565b8851902060065490612269565b6133c2565b9082820151885410801561245b575b61244e576123bc6123ac86600052600d602052604060002090565b83516001600160a01b0316610dd7565b5461244e57917f71afff60b83105500984ce43d4633544224775a10de240da021704c056b58bdb916124096123f46124499695612229565b825190999088906001600160a01b03166124ea565b805161244190612434906001600160a01b031692610dd7610dc98a600052600d602052604060002090565b92519283928989856122cf565b0390a1612229565b612318565b9550505061244990612229565b5061246c610c246060840151151590565b612391565b8054600160401b811015611a945761248e916001820181556105d2565b819291549060031b9160018060a01b03809116831b921b1916179055565b60209291906124c2849282815194859201610f0d565b019081520190565b600411156124d457565b634e487b7160e01b600052602160045260246000fd5b92919260009061250d8161250885600052600f602052604060002090565b612471565b612515611aff565b6001600160a01b038216815260208381830152604084818401526125b1606093868582015261255286610aeb8a600052600e602052604060002090565b815181546001600160a01b039091166001600160a01b03199091161781556020820151604083015160801b6001600160801b0319166001600160801b03909116176001820155606090600201910151151560ff80198354169116179055565b845b60058610806126f1575b156126e6576125f761237d8a84516125eb816125dd878a830195866124ac565b03601f198101835282611acf565b51902060065490612269565b612606610c2486830151151590565b6126dc578761262387610aeb83600052600c602052604060002090565b82516001600160a01b0389811691169081141590816126a8575b50612654575b50505061264f90612229565b6125b3565b82610d52610dc98a610aeb61264f989d9661268f612682610c8398610dd761269f9c5160018060a01b031690565b805460ff19166001179055565b600052600d602052604060002090565b95908738612643565b6001600160a01b031660009081526020839052604090206126cc91505b5460ff1690565b6126d5816124ca565b153861263d565b5061264f90612229565b505050505050509050565b506126fd600654611ff0565b81106125bd565b6000906000526010602052604080600020600091600654915b82841061272b575050505090565b90919293606061273a866133c2565b015115801561276c575b6127625761275461275a91612229565b94612229565b92919061271d565b9361275a90612229565b5082612777866133c2565b0151600283015410612744565b1561278b57565b60405162461bcd60e51b815260206004820152601860248201527f56616c69646174696f6e2074696d6520657863656564656400000000000000006044820152606490fd5b156127d757565b60405162461bcd60e51b815260206004820152601160248201527024b73b30b634b2103b30b634b230ba37b960791b6044820152606490fd5b1561281757565b60405162461bcd60e51b815260206004820152601c60248201527f56616c69646174696f6e20616c726561647920636f6d706c65746564000000006044820152606490fd5b6001600160801b03809116908114611feb5760010190565b9190916001600160801b0380809416911601918211611feb57565b916128b360026128a985600052600f602052604060002090565b0154421115612784565b6128cb82610aeb85600052600c602052604060002090565b3360009081526020829052604090206128f9906001906128ea906126c5565b6128f3816124ca565b146127d0565b61291183610aeb86600052600e602052604060002090565b90600282019261292d612928610c24865460ff1690565b612810565b15612af257612986612993916129736001850161295961295482546001600160801b031690565b61285c565b6001600160801b03166001600160801b0319825416179055565b3360009081526020919091526040902090565b805460ff19166003179055565b60016129ad84610aeb87600052600d602052604060002090565b549101908154916001600160801b03928381169060801c83856129d08385612874565b16149182612ae8575b5050612aad57549060011c8092821611600014612a4e575050805460ff191660011790557f92de7c81b7cf6c7977d7cd091ccd01996264a02b7dbbce5d2a2524a8daabe76991612a4991612a2c90614115565b604080519182523360208301526001908201529081906060820190565b0390a1565b9091925060801c11612a5e575050565b805460ff191660011790557f92de7c81b7cf6c7977d7cd091ccd01996264a02b7dbbce5d2a2524a8daabe76990612a49905b604080519182523360208301526000908201529081906060820190565b5050815460ff1916600117909155507f92de7c81b7cf6c7977d7cd091ccd01996264a02b7dbbce5d2a2524a8daabe76991612a499150612a90565b14905038806129d9565b612b2e612b3b9161297360018501612b0e612954825460801c90565b81546001600160801b031660809190911b6001600160801b031916179055565b805460ff19166002179055565b612993565b15612b4757565b60405162461bcd60e51b815260206004820152601e60248201527f536574746c656d656e7420666f7220646574656374656420706572696f6400006044820152606490fd5b15612b9357565b60405162461bcd60e51b815260206004820152601d60248201527f44657465637420706572696f64206964206973206e6f742065786973740000006044820152606490fd5b15612bdf57565b60405162461bcd60e51b815260206004820152601760248201527f506572696f6420686173206265656e20736574746c65640000000000000000006044820152606490fd5b6001600160401b03809116908114611feb5760010190565b6001600160401b038111611a945760051b60200190565b90612c5d82612c3c565b604090612c6c82519182611acf565b8381528093612c7d601f1991612c3c565b019160005b838110612c8f5750505050565b6020908251612c9d81611a99565b60008152826000818301526000858301526000606083015260006080830152828601015201612c82565b80518210156105cd5760209160051b010190565b90604051612ce881611a99565b6080819380546001600160401b0380821685528160401c166020850152821c6040840152600260018060a01b0391826001820154166060860152015416910152565b91908110156105cd5760051b81013590609e1981360301821215610267570190565b35611b8c816103f9565b903590601e198136030182121561026757018035906001600160401b0382116102675760200191813603831361026757565b903590601e198136030182121561026757018035906001600160401b03821161026757602001918160051b3603831361026757565b15612dc457565b60405162461bcd60e51b815260206004820152601160248201527024b73b30b634b21030b63637b1b0ba37b960791b6044820152606490fd5b15612e0457565b60405162461bcd60e51b815260206004820152601360248201527224b73b30b634b21039ba30b5b2903a37b5b2b760691b6044820152606490fd5b90612e509695949392913390613d87565b6016612e5f6114848254612229565b612e6b601554426121d0565b600a541015612fa957612e826114b5601454612229565b612e8b42601555565b612e9881546114d0611aff565b612ea4600b544261225c565b6002612ebb8354600052600f602052604060002090565b0155612ec8601454612704565b6001612edf8354600052600f602052604060002090565b0155612f2a612f168254612f24612ef5436121c1565b60408051426020820152914090820152600160608201529283906080820190565b03601f198101845283611acf565b336124ea565b54612f4333610aeb83600052600d602052604060002090565b54612f525750611afd33614115565b7f71afff60b83105500984ce43d4633544224775a10de240da021704c056b58bdb90612f80600b544261225c565b612a49612f9b33610aeb85600052600d602052604060002090565b6040519384933391856122cf565b80546001612fc36014546000526010602052604060002090565b0155426003612fde6014546000526010602052604060002090565b0155612e98565b15612fec57565b60405162461bcd60e51b815260206004820152601860248201527f4964656e746966696572206d75737420626520657869737400000000000000006044820152606490fd5b9161304b9183549060031b91821b91600019901b19161790565b9055565b806000526007602052604060002054156000146130c057600654600160401b811015611a945760018101806006558110156105cd5781907ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f0155600654906000526007602052604060002055600190565b50600090565b600181019082600052816020526040600020541560001461312f578054600160401b811015611a945761311a6131038260018794018555846105d2565b819391549060031b91821b91600019901b19161790565b90555491600052602052604060002055600190565b505050600090565b600654801561317d57600019810190808210156105cd577ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3e600091600683520155600655565b634e487b7160e01b600052603160045260246000fd5b805490811561317d57600019918201916131ad83836105d2565b909182549160031b1b1916905555565b6000818152600760205260409020548015613255576000199181830191808311611feb57600654938401938411611feb578383613218946000960361321e575b505050613208613137565b6000526007602052604060002090565b55600190565b6132086132469161323e61323461324c95610596565b90549060031b1c90565b928391610596565b90613031565b553880806131fd565b5050600090565b60018101918060005282602052604060002054928315156000146132fc576000199284840190858211611feb578054948501948511611feb5760009585836132b09461321898036132bf575b505050613193565b90600052602052604060002090565b6132e3613246916132d36132f394876105d2565b90549060031b1c928391876105d2565b8590600052602052604060002090565b553880806132a8565b50505050600090565b6040519061331282611a79565b600060c08382815260606020820152826040820152826060820152606060808201528260a08201520152565b90815461334a81612c3c565b9260409361335a85519182611acf565b828152809460208092019260005281600020906000935b85851061338057505050505050565b600384600192845161339181611ab4565b85516133a1816104aa818b611e1c565b81528487015483820152600287015486820152815201930194019391613371565b6133d4906133ce613305565b50610596565b60018060a01b0391549060031b1c16600052600260205260406000206006604051916133ff83611a79565b8054613413906001600160a01b03166118e0565b61341f60018201611eb2565b60208401526002810154604084015261343f611919600383015460ff1690565b61344b6004820161333e565b60808401526005810154613467906001600160a01b0316611946565b015460c082015290565b6006548110156105cd5760066000527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f01546001600160a01b031690565b6001600160a01b031660009081526002602052604090206003015460ff166134d657600090565b600190565b156134e257565b60405162461bcd60e51b815260206004820152601260248201527127b7363c903337b91030b63637b1b0ba37b960711b6044820152606490fd5b9061352682612c3c565b6135336040519182611acf565b8281528092613544601f1991612c3c565b0190602036910137565b908210156105cd576135659160051b810190612d56565b9091565b6020908260405193849283378101600581520301902090565b6020908260405193849283378101600381520301902090565b6020919283604051948593843782019081520301902090565b91908110156105cd5760051b0190565b156135cb57565b60405162461bcd60e51b81526020600482015260116024820152700cee0ea40d2e640dcdee840cadcdeeaced607b1b6044820152606490fd5b9061360e82612c3c565b60409061361d82519182611acf565b838152809361362e601f1991612c3c565b0191600091825b848110613643575050505050565b602090835161365181611ab4565b858152826060818301528686830152828501015201613635565b80548210156105cd576000526003602060002091020190600090565b91908110156105cd5760051b81013590605e1981360301821215610267570190565b156136b057565b60405162461bcd60e51b815260206004820152601260248201527124b73b30b634b21034b232b73a34b334b2b960711b6044820152606490fd5b156136f157565b60405162461bcd60e51b815260206004820152601060248201526f496e76616c696420677075207479706560801b6044820152606490fd5b1561373057565b60405162461bcd60e51b81526020600482015260146024820152731259195b9d1a599a595c881b9bdd08195e1a5cdd60621b6044820152606490fd5b1561377357565b60405162461bcd60e51b815260206004820152601760248201527f4964656e74696669657220686173206368696c6472656e0000000000000000006044820152606490fd5b6040519081600082546137ca81611de2565b9360019180831690811561382f57506001146137f2575b505060209250600581520301902090565b90915060005260209081600020906000915b85831061381b5750505050602091810138806137e1565b805487840152869450918301918101613804565b92505050602093915060ff1916825280151502810138806137e1565b818110613856575050565b6000815560010161384b565b61386c8154611de2565b9081613876575050565b81601f60009311600114613888575055565b9080839182526138a7601f60208420940160051c84016001850161384b565b5555565b9060008083556001926138bf848201613862565b600293828583015560039483868401556004830191825492858155836138f3575b5050505060058101829055600601559050565b8388029388850403611feb57855260208520928301925b838110156138e0578061391d8992613862565b868382015586848201550161390a565b604090611b8c939281528160208201520190610f30565b1561394b57565b60405162461bcd60e51b815260206004820152601060248201526f496e76616c696420475055206461746160801b6044820152606490fd5b1561398a57565b60405162461bcd60e51b815260206004820152601c60248201527f496e76616c69642077616c6c6574206f72206964656e746966696572000000006044820152606490fd5b156139d657565b60405162461bcd60e51b815260206004820152601060248201526f1259195b9d1a599a595c88195e1a5cdd60821b6044820152606490fd5b15613a1557565b60405162461bcd60e51b8152602060048201526016602482015275105b1a585cc81a59195b9d1a599a595c88195e1a5cdd60521b6044820152606490fd5b9190601f8111613a6257505050565b611afd926000526020600020906020601f840160051c83019310613a8e575b601f0160051c019061384b565b9091508190613a81565b9092916001600160401b038111611a9457613abd81613ab78454611de2565b84613a53565b6000601f8211600114613af75781929394600092613aec575b50508160011b916000199060031b1c1916179055565b013590503880613ad6565b601f19821694613b0c84600052602060002090565b91805b878110613b47575083600195969710613b2d575b505050811b019055565b0135600019600384901b60f8161c19169055388080613b23565b90926020600181928686013581550194019101613b0f565b91908254600160401b811015611a9457613b8090600194858201815561366b565b919091613c715780519384516001600160401b038111611a9457613bae81613ba88654611de2565b86613a53565b60209081601f8211600114613bff5790806040959493926002979899600092613bf4575b5050600019600383901b1c191690831b1786555b820151908501550151910155565b015190503880613bd2565b601f19821690613c1487600052602060002090565b9160005b818110613c5c5750918391600298999a879695604099989510613c43575b505050811b018655613be6565b015160001960f88460031b161c19169055388080613c36565b8a830151845592860192918501918501613c18565b612238565b908060209392818452848401376000828201840152601f01601f1916010190565b81835290916001600160fb1b0383116102675760209260051b809284830137010190565b989795929093613cea9297959460018060a01b03168a52602097888b015260a060408b015260a08a0191613c76565b94878603606089015281865280860195818360051b82010196846000925b858410613d285750505050505050846080611b8c95968503910152613c97565b90919293949598601f198282030184528935601e19843603018112156102675783018681019190356001600160401b03811161026757803603831361026757613d7688928392600195613c76565b9b0194019401929594939190613d08565b9693909491959284831480613ff6575b613da090613944565b600160a01b6001900387818a169983898c1515613e1a613e2d93613df4613e2794846102b595613feb575b80613fe2575b613dda90613983565b6001600160a01b0316600090815260026020526040902090565b8054909790613e1590613e0f906001600160a01b03166102b5565b156139cf565b613582565b546001600160a01b031690565b15613a0e565b6001600160a01b0389166000908152600460205260409020613e8c9083546001600160a01b0319166001600160a01b038c16178455914260028501556005840180546001600160a01b0319166001600160a01b03909216919091179055565b600190613e9c858c848601613a98565b346006840155600092600401835b888110613f2d5750505050509186959391613eec613f2896947f99c250edfb33141684f230eecda8aa955bf0d62d17bcaaab0ab43f318f3637b09a991661304f565b50613f1a87613efb838b613582565b80546001600160a01b0319166001600160a01b03909216919091179055565b604051978897429089613cbb565b0390a2565b8088613fb786613fae8f8f968f613fa782848f9b8a8f8f90613fdd9f8689613fa194613f9a6103d19e61036e958a613f88613f7688613f6e818f8b9061354e565b9690946135b4565b3591613f80611b1e565b943691611b2b565b83526020830152604082015282613b5f565b549561354e565b556135b4565b359661354e565b0191825461225c565b9055610c838a8a613fd86103d185613fd081868661354e565b95909461354e565b613a98565b613eaa565b50821515613dd1565b508981161515613dcb565b50841515613d97565b9061400982612c3c565b6140166040519182611acf565b8281528092614027601f1991612c3c565b019060005b82811061403857505050565b80606060208093850101520161402c565b90815180825260208080930193019160005b828110614069575050505090565b83518552938101939281019260010161405b565b919594926140a79160018060a01b031683526020968784015260a0604084015260a0830190611e1c565b94818603606083015283518087528187019180808360051b8a01019601926000905b8382106140e8575050505050611b8c9394506080818403910152614049565b909192939683806141066001938d601f199082030186528b51610f30565b990192019201909392916140c9565b6001600160a01b03908116600090815260026020526040902080549192916141409084161515613729565b60038101614152610c24825460ff1690565b61415d575b50509050565b805460ff191660011790556004810192835461417881613fff565b906141828161351c565b9060005b8181106141f5575050600584015494955092937fb0a73f160683fa6bd1601bd25cd9e2addc090f0a74959bf51c6a2a4560af6f5f936141ea916001600160a01b031686549093906001600160a01b031660016040519687961698019042908661407d565b0390a2803880614157565b8061420c614206614241938b61366b565b50611eb2565b6142168287612cc7565b526142218186612cc7565b50600161422e828b61366b565b50015461423b8286612cc7565b52612229565b61418656fea26469706673582212200305822041a2c0bf1ec3db977f3c0864eb3863f1c5962905f96c051fe61c79e164736f6c63430008140033",
}

// NodesGovernanceABI is the input ABI used to generate the binding from.
// Deprecated: Use NodesGovernanceMetaData.ABI instead.
var NodesGovernanceABI = NodesGovernanceMetaData.ABI

// NodesGovernanceBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use NodesGovernanceMetaData.Bin instead.
var NodesGovernanceBin = NodesGovernanceMetaData.Bin

// DeployNodesGovernance deploys a new Ethereum contract, binding an instance of NodesGovernance to it.
func DeployNodesGovernance(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *NodesGovernance, error) {
	parsed, err := NodesGovernanceMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(NodesGovernanceBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &NodesGovernance{NodesGovernanceCaller: NodesGovernanceCaller{contract: contract}, NodesGovernanceTransactor: NodesGovernanceTransactor{contract: contract}, NodesGovernanceFilterer: NodesGovernanceFilterer{contract: contract}}, nil
}

// NodesGovernance is an auto generated Go binding around an Ethereum contract.
type NodesGovernance struct {
	NodesGovernanceCaller     // Read-only binding to the contract
	NodesGovernanceTransactor // Write-only binding to the contract
	NodesGovernanceFilterer   // Log filterer for contract events
}

// NodesGovernanceCaller is an auto generated read-only Go binding around an Ethereum contract.
type NodesGovernanceCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NodesGovernanceTransactor is an auto generated write-only Go binding around an Ethereum contract.
type NodesGovernanceTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NodesGovernanceFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type NodesGovernanceFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NodesGovernanceSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type NodesGovernanceSession struct {
	Contract     *NodesGovernance  // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// NodesGovernanceCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type NodesGovernanceCallerSession struct {
	Contract *NodesGovernanceCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts          // Call options to use throughout this session
}

// NodesGovernanceTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type NodesGovernanceTransactorSession struct {
	Contract     *NodesGovernanceTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts          // Transaction auth options to use throughout this session
}

// NodesGovernanceRaw is an auto generated low-level Go binding around an Ethereum contract.
type NodesGovernanceRaw struct {
	Contract *NodesGovernance // Generic contract binding to access the raw methods on
}

// NodesGovernanceCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type NodesGovernanceCallerRaw struct {
	Contract *NodesGovernanceCaller // Generic read-only contract binding to access the raw methods on
}

// NodesGovernanceTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type NodesGovernanceTransactorRaw struct {
	Contract *NodesGovernanceTransactor // Generic write-only contract binding to access the raw methods on
}

// NewNodesGovernance creates a new instance of NodesGovernance, bound to a specific deployed contract.
func NewNodesGovernance(address common.Address, backend bind.ContractBackend) (*NodesGovernance, error) {
	contract, err := bindNodesGovernance(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &NodesGovernance{NodesGovernanceCaller: NodesGovernanceCaller{contract: contract}, NodesGovernanceTransactor: NodesGovernanceTransactor{contract: contract}, NodesGovernanceFilterer: NodesGovernanceFilterer{contract: contract}}, nil
}

// NewNodesGovernanceCaller creates a new read-only instance of NodesGovernance, bound to a specific deployed contract.
func NewNodesGovernanceCaller(address common.Address, caller bind.ContractCaller) (*NodesGovernanceCaller, error) {
	contract, err := bindNodesGovernance(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &NodesGovernanceCaller{contract: contract}, nil
}

// NewNodesGovernanceTransactor creates a new write-only instance of NodesGovernance, bound to a specific deployed contract.
func NewNodesGovernanceTransactor(address common.Address, transactor bind.ContractTransactor) (*NodesGovernanceTransactor, error) {
	contract, err := bindNodesGovernance(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &NodesGovernanceTransactor{contract: contract}, nil
}

// NewNodesGovernanceFilterer creates a new log filterer instance of NodesGovernance, bound to a specific deployed contract.
func NewNodesGovernanceFilterer(address common.Address, filterer bind.ContractFilterer) (*NodesGovernanceFilterer, error) {
	contract, err := bindNodesGovernance(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &NodesGovernanceFilterer{contract: contract}, nil
}

// bindNodesGovernance binds a generic wrapper to an already deployed contract.
func bindNodesGovernance(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := NodesGovernanceMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_NodesGovernance *NodesGovernanceRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _NodesGovernance.Contract.NodesGovernanceCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_NodesGovernance *NodesGovernanceRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _NodesGovernance.Contract.NodesGovernanceTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_NodesGovernance *NodesGovernanceRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _NodesGovernance.Contract.NodesGovernanceTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_NodesGovernance *NodesGovernanceCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _NodesGovernance.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_NodesGovernance *NodesGovernanceTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _NodesGovernance.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_NodesGovernance *NodesGovernanceTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _NodesGovernance.Contract.contract.Transact(opts, method, params...)
}

// MINCANDIDATE is a free data retrieval call binding the contract method 0x26cc3399.
//
// Solidity: function MIN_CANDIDATE() view returns(uint256)
func (_NodesGovernance *NodesGovernanceCaller) MINCANDIDATE(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _NodesGovernance.contract.Call(opts, &out, "MIN_CANDIDATE")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MINCANDIDATE is a free data retrieval call binding the contract method 0x26cc3399.
//
// Solidity: function MIN_CANDIDATE() view returns(uint256)
func (_NodesGovernance *NodesGovernanceSession) MINCANDIDATE() (*big.Int, error) {
	return _NodesGovernance.Contract.MINCANDIDATE(&_NodesGovernance.CallOpts)
}

// MINCANDIDATE is a free data retrieval call binding the contract method 0x26cc3399.
//
// Solidity: function MIN_CANDIDATE() view returns(uint256)
func (_NodesGovernance *NodesGovernanceCallerSession) MINCANDIDATE() (*big.Int, error) {
	return _NodesGovernance.Contract.MINCANDIDATE(&_NodesGovernance.CallOpts)
}

// VALIDATORPERCANDIDATE is a free data retrieval call binding the contract method 0xa7f32314.
//
// Solidity: function VALIDATOR_PER_CANDIDATE() view returns(uint256)
func (_NodesGovernance *NodesGovernanceCaller) VALIDATORPERCANDIDATE(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _NodesGovernance.contract.Call(opts, &out, "VALIDATOR_PER_CANDIDATE")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// VALIDATORPERCANDIDATE is a free data retrieval call binding the contract method 0xa7f32314.
//
// Solidity: function VALIDATOR_PER_CANDIDATE() view returns(uint256)
func (_NodesGovernance *NodesGovernanceSession) VALIDATORPERCANDIDATE() (*big.Int, error) {
	return _NodesGovernance.Contract.VALIDATORPERCANDIDATE(&_NodesGovernance.CallOpts)
}

// VALIDATORPERCANDIDATE is a free data retrieval call binding the contract method 0xa7f32314.
//
// Solidity: function VALIDATOR_PER_CANDIDATE() view returns(uint256)
func (_NodesGovernance *NodesGovernanceCallerSession) VALIDATORPERCANDIDATE() (*big.Int, error) {
	return _NodesGovernance.Contract.VALIDATORPERCANDIDATE(&_NodesGovernance.CallOpts)
}

// Allocator is a free data retrieval call binding the contract method 0xaa5dcecc.
//
// Solidity: function allocator() view returns(address)
func (_NodesGovernance *NodesGovernanceCaller) Allocator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _NodesGovernance.contract.Call(opts, &out, "allocator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Allocator is a free data retrieval call binding the contract method 0xaa5dcecc.
//
// Solidity: function allocator() view returns(address)
func (_NodesGovernance *NodesGovernanceSession) Allocator() (common.Address, error) {
	return _NodesGovernance.Contract.Allocator(&_NodesGovernance.CallOpts)
}

// Allocator is a free data retrieval call binding the contract method 0xaa5dcecc.
//
// Solidity: function allocator() view returns(address)
func (_NodesGovernance *NodesGovernanceCallerSession) Allocator() (common.Address, error) {
	return _NodesGovernance.Contract.Allocator(&_NodesGovernance.CallOpts)
}

// At is a free data retrieval call binding the contract method 0xe0886f90.
//
// Solidity: function at(uint256 index) view returns((address,string,uint256,bool,(string,uint256,uint256)[],address,uint256) node)
func (_NodesGovernance *NodesGovernanceCaller) At(opts *bind.CallOpts, index *big.Int) (NodesRegistryNode, error) {
	var out []interface{}
	err := _NodesGovernance.contract.Call(opts, &out, "at", index)

	if err != nil {
		return *new(NodesRegistryNode), err
	}

	out0 := *abi.ConvertType(out[0], new(NodesRegistryNode)).(*NodesRegistryNode)

	return out0, err

}

// At is a free data retrieval call binding the contract method 0xe0886f90.
//
// Solidity: function at(uint256 index) view returns((address,string,uint256,bool,(string,uint256,uint256)[],address,uint256) node)
func (_NodesGovernance *NodesGovernanceSession) At(index *big.Int) (NodesRegistryNode, error) {
	return _NodesGovernance.Contract.At(&_NodesGovernance.CallOpts, index)
}

// At is a free data retrieval call binding the contract method 0xe0886f90.
//
// Solidity: function at(uint256 index) view returns((address,string,uint256,bool,(string,uint256,uint256)[],address,uint256) node)
func (_NodesGovernance *NodesGovernanceCallerSession) At(index *big.Int) (NodesRegistryNode, error) {
	return _NodesGovernance.Contract.At(&_NodesGovernance.CallOpts, index)
}

// CandidatePerRound is a free data retrieval call binding the contract method 0x5ff5c03c.
//
// Solidity: function candidatePerRound(uint256 ) view returns(uint256 numOfNodes, uint256 expectedCompletionTime)
func (_NodesGovernance *NodesGovernanceCaller) CandidatePerRound(opts *bind.CallOpts, arg0 *big.Int) (struct {
	NumOfNodes             *big.Int
	ExpectedCompletionTime *big.Int
}, error) {
	var out []interface{}
	err := _NodesGovernance.contract.Call(opts, &out, "candidatePerRound", arg0)

	outstruct := new(struct {
		NumOfNodes             *big.Int
		ExpectedCompletionTime *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.NumOfNodes = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.ExpectedCompletionTime = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// CandidatePerRound is a free data retrieval call binding the contract method 0x5ff5c03c.
//
// Solidity: function candidatePerRound(uint256 ) view returns(uint256 numOfNodes, uint256 expectedCompletionTime)
func (_NodesGovernance *NodesGovernanceSession) CandidatePerRound(arg0 *big.Int) (struct {
	NumOfNodes             *big.Int
	ExpectedCompletionTime *big.Int
}, error) {
	return _NodesGovernance.Contract.CandidatePerRound(&_NodesGovernance.CallOpts, arg0)
}

// CandidatePerRound is a free data retrieval call binding the contract method 0x5ff5c03c.
//
// Solidity: function candidatePerRound(uint256 ) view returns(uint256 numOfNodes, uint256 expectedCompletionTime)
func (_NodesGovernance *NodesGovernanceCallerSession) CandidatePerRound(arg0 *big.Int) (struct {
	NumOfNodes             *big.Int
	ExpectedCompletionTime *big.Int
}, error) {
	return _NodesGovernance.Contract.CandidatePerRound(&_NodesGovernance.CallOpts, arg0)
}

// Check is a free data retrieval call binding the contract method 0xc23697a8.
//
// Solidity: function check(address identifier) view returns(bool)
func (_NodesGovernance *NodesGovernanceCaller) Check(opts *bind.CallOpts, identifier common.Address) (bool, error) {
	var out []interface{}
	err := _NodesGovernance.contract.Call(opts, &out, "check", identifier)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Check is a free data retrieval call binding the contract method 0xc23697a8.
//
// Solidity: function check(address identifier) view returns(bool)
func (_NodesGovernance *NodesGovernanceSession) Check(identifier common.Address) (bool, error) {
	return _NodesGovernance.Contract.Check(&_NodesGovernance.CallOpts, identifier)
}

// Check is a free data retrieval call binding the contract method 0xc23697a8.
//
// Solidity: function check(address identifier) view returns(bool)
func (_NodesGovernance *NodesGovernanceCallerSession) Check(identifier common.Address) (bool, error) {
	return _NodesGovernance.Contract.Check(&_NodesGovernance.CallOpts, identifier)
}

// CurrentDetectCircleId is a free data retrieval call binding the contract method 0x191805d8.
//
// Solidity: function currentDetectCircleId() view returns(uint256)
func (_NodesGovernance *NodesGovernanceCaller) CurrentDetectCircleId(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _NodesGovernance.contract.Call(opts, &out, "currentDetectCircleId")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CurrentDetectCircleId is a free data retrieval call binding the contract method 0x191805d8.
//
// Solidity: function currentDetectCircleId() view returns(uint256)
func (_NodesGovernance *NodesGovernanceSession) CurrentDetectCircleId() (*big.Int, error) {
	return _NodesGovernance.Contract.CurrentDetectCircleId(&_NodesGovernance.CallOpts)
}

// CurrentDetectCircleId is a free data retrieval call binding the contract method 0x191805d8.
//
// Solidity: function currentDetectCircleId() view returns(uint256)
func (_NodesGovernance *NodesGovernanceCallerSession) CurrentDetectCircleId() (*big.Int, error) {
	return _NodesGovernance.Contract.CurrentDetectCircleId(&_NodesGovernance.CallOpts)
}

// CurrentDetectCircleStartTime is a free data retrieval call binding the contract method 0x1bb12a43.
//
// Solidity: function currentDetectCircleStartTime() view returns(uint256)
func (_NodesGovernance *NodesGovernanceCaller) CurrentDetectCircleStartTime(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _NodesGovernance.contract.Call(opts, &out, "currentDetectCircleStartTime")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CurrentDetectCircleStartTime is a free data retrieval call binding the contract method 0x1bb12a43.
//
// Solidity: function currentDetectCircleStartTime() view returns(uint256)
func (_NodesGovernance *NodesGovernanceSession) CurrentDetectCircleStartTime() (*big.Int, error) {
	return _NodesGovernance.Contract.CurrentDetectCircleStartTime(&_NodesGovernance.CallOpts)
}

// CurrentDetectCircleStartTime is a free data retrieval call binding the contract method 0x1bb12a43.
//
// Solidity: function currentDetectCircleStartTime() view returns(uint256)
func (_NodesGovernance *NodesGovernanceCallerSession) CurrentDetectCircleStartTime() (*big.Int, error) {
	return _NodesGovernance.Contract.CurrentDetectCircleStartTime(&_NodesGovernance.CallOpts)
}

// CurrentRoundId is a free data retrieval call binding the contract method 0x9cbe5efd.
//
// Solidity: function currentRoundId() view returns(uint256)
func (_NodesGovernance *NodesGovernanceCaller) CurrentRoundId(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _NodesGovernance.contract.Call(opts, &out, "currentRoundId")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CurrentRoundId is a free data retrieval call binding the contract method 0x9cbe5efd.
//
// Solidity: function currentRoundId() view returns(uint256)
func (_NodesGovernance *NodesGovernanceSession) CurrentRoundId() (*big.Int, error) {
	return _NodesGovernance.Contract.CurrentRoundId(&_NodesGovernance.CallOpts)
}

// CurrentRoundId is a free data retrieval call binding the contract method 0x9cbe5efd.
//
// Solidity: function currentRoundId() view returns(uint256)
func (_NodesGovernance *NodesGovernanceCallerSession) CurrentRoundId() (*big.Int, error) {
	return _NodesGovernance.Contract.CurrentRoundId(&_NodesGovernance.CallOpts)
}

// CurrentRoundStartTime is a free data retrieval call binding the contract method 0x380dd901.
//
// Solidity: function currentRoundStartTime() view returns(uint256)
func (_NodesGovernance *NodesGovernanceCaller) CurrentRoundStartTime(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _NodesGovernance.contract.Call(opts, &out, "currentRoundStartTime")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CurrentRoundStartTime is a free data retrieval call binding the contract method 0x380dd901.
//
// Solidity: function currentRoundStartTime() view returns(uint256)
func (_NodesGovernance *NodesGovernanceSession) CurrentRoundStartTime() (*big.Int, error) {
	return _NodesGovernance.Contract.CurrentRoundStartTime(&_NodesGovernance.CallOpts)
}

// CurrentRoundStartTime is a free data retrieval call binding the contract method 0x380dd901.
//
// Solidity: function currentRoundStartTime() view returns(uint256)
func (_NodesGovernance *NodesGovernanceCallerSession) CurrentRoundStartTime() (*big.Int, error) {
	return _NodesGovernance.Contract.CurrentRoundStartTime(&_NodesGovernance.CallOpts)
}

// DetectDurationTime is a free data retrieval call binding the contract method 0x49d2b420.
//
// Solidity: function detectDurationTime() view returns(uint256)
func (_NodesGovernance *NodesGovernanceCaller) DetectDurationTime(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _NodesGovernance.contract.Call(opts, &out, "detectDurationTime")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// DetectDurationTime is a free data retrieval call binding the contract method 0x49d2b420.
//
// Solidity: function detectDurationTime() view returns(uint256)
func (_NodesGovernance *NodesGovernanceSession) DetectDurationTime() (*big.Int, error) {
	return _NodesGovernance.Contract.DetectDurationTime(&_NodesGovernance.CallOpts)
}

// DetectDurationTime is a free data retrieval call binding the contract method 0x49d2b420.
//
// Solidity: function detectDurationTime() view returns(uint256)
func (_NodesGovernance *NodesGovernanceCallerSession) DetectDurationTime() (*big.Int, error) {
	return _NodesGovernance.Contract.DetectDurationTime(&_NodesGovernance.CallOpts)
}

// DetectPeriods is a free data retrieval call binding the contract method 0x698083af.
//
// Solidity: function detectPeriods(uint256 ) view returns(uint256 startId, uint256 endId, uint256 startTime, uint256 endTime)
func (_NodesGovernance *NodesGovernanceCaller) DetectPeriods(opts *bind.CallOpts, arg0 *big.Int) (struct {
	StartId   *big.Int
	EndId     *big.Int
	StartTime *big.Int
	EndTime   *big.Int
}, error) {
	var out []interface{}
	err := _NodesGovernance.contract.Call(opts, &out, "detectPeriods", arg0)

	outstruct := new(struct {
		StartId   *big.Int
		EndId     *big.Int
		StartTime *big.Int
		EndTime   *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.StartId = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.EndId = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.StartTime = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.EndTime = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// DetectPeriods is a free data retrieval call binding the contract method 0x698083af.
//
// Solidity: function detectPeriods(uint256 ) view returns(uint256 startId, uint256 endId, uint256 startTime, uint256 endTime)
func (_NodesGovernance *NodesGovernanceSession) DetectPeriods(arg0 *big.Int) (struct {
	StartId   *big.Int
	EndId     *big.Int
	StartTime *big.Int
	EndTime   *big.Int
}, error) {
	return _NodesGovernance.Contract.DetectPeriods(&_NodesGovernance.CallOpts, arg0)
}

// DetectPeriods is a free data retrieval call binding the contract method 0x698083af.
//
// Solidity: function detectPeriods(uint256 ) view returns(uint256 startId, uint256 endId, uint256 startTime, uint256 endTime)
func (_NodesGovernance *NodesGovernanceCallerSession) DetectPeriods(arg0 *big.Int) (struct {
	StartId   *big.Int
	EndId     *big.Int
	StartTime *big.Int
	EndTime   *big.Int
}, error) {
	return _NodesGovernance.Contract.DetectPeriods(&_NodesGovernance.CallOpts, arg0)
}

// Get is a free data retrieval call binding the contract method 0xc2bc2efc.
//
// Solidity: function get(address identifier) view returns((address,string,uint256,bool,(string,uint256,uint256)[],address,uint256) node)
func (_NodesGovernance *NodesGovernanceCaller) Get(opts *bind.CallOpts, identifier common.Address) (NodesRegistryNode, error) {
	var out []interface{}
	err := _NodesGovernance.contract.Call(opts, &out, "get", identifier)

	if err != nil {
		return *new(NodesRegistryNode), err
	}

	out0 := *abi.ConvertType(out[0], new(NodesRegistryNode)).(*NodesRegistryNode)

	return out0, err

}

// Get is a free data retrieval call binding the contract method 0xc2bc2efc.
//
// Solidity: function get(address identifier) view returns((address,string,uint256,bool,(string,uint256,uint256)[],address,uint256) node)
func (_NodesGovernance *NodesGovernanceSession) Get(identifier common.Address) (NodesRegistryNode, error) {
	return _NodesGovernance.Contract.Get(&_NodesGovernance.CallOpts, identifier)
}

// Get is a free data retrieval call binding the contract method 0xc2bc2efc.
//
// Solidity: function get(address identifier) view returns((address,string,uint256,bool,(string,uint256,uint256)[],address,uint256) node)
func (_NodesGovernance *NodesGovernanceCallerSession) Get(identifier common.Address) (NodesRegistryNode, error) {
	return _NodesGovernance.Contract.Get(&_NodesGovernance.CallOpts, identifier)
}

// GetAttach is a free data retrieval call binding the contract method 0xc7edca7a.
//
// Solidity: function getAttach(address provider) view returns(address[])
func (_NodesGovernance *NodesGovernanceCaller) GetAttach(opts *bind.CallOpts, provider common.Address) ([]common.Address, error) {
	var out []interface{}
	err := _NodesGovernance.contract.Call(opts, &out, "getAttach", provider)

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetAttach is a free data retrieval call binding the contract method 0xc7edca7a.
//
// Solidity: function getAttach(address provider) view returns(address[])
func (_NodesGovernance *NodesGovernanceSession) GetAttach(provider common.Address) ([]common.Address, error) {
	return _NodesGovernance.Contract.GetAttach(&_NodesGovernance.CallOpts, provider)
}

// GetAttach is a free data retrieval call binding the contract method 0xc7edca7a.
//
// Solidity: function getAttach(address provider) view returns(address[])
func (_NodesGovernance *NodesGovernanceCallerSession) GetAttach(provider common.Address) ([]common.Address, error) {
	return _NodesGovernance.Contract.GetAttach(&_NodesGovernance.CallOpts, provider)
}

// GetOnePeriodSettlement is a free data retrieval call binding the contract method 0x6300c951.
//
// Solidity: function getOnePeriodSettlement(uint256 detectPeriodId) view returns((uint64,uint64,uint128,address,address)[] states, uint256 totalQuotas)
func (_NodesGovernance *NodesGovernanceCaller) GetOnePeriodSettlement(opts *bind.CallOpts, detectPeriodId *big.Int) (struct {
	States      []NodeState
	TotalQuotas *big.Int
}, error) {
	var out []interface{}
	err := _NodesGovernance.contract.Call(opts, &out, "getOnePeriodSettlement", detectPeriodId)

	outstruct := new(struct {
		States      []NodeState
		TotalQuotas *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.States = *abi.ConvertType(out[0], new([]NodeState)).(*[]NodeState)
	outstruct.TotalQuotas = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// GetOnePeriodSettlement is a free data retrieval call binding the contract method 0x6300c951.
//
// Solidity: function getOnePeriodSettlement(uint256 detectPeriodId) view returns((uint64,uint64,uint128,address,address)[] states, uint256 totalQuotas)
func (_NodesGovernance *NodesGovernanceSession) GetOnePeriodSettlement(detectPeriodId *big.Int) (struct {
	States      []NodeState
	TotalQuotas *big.Int
}, error) {
	return _NodesGovernance.Contract.GetOnePeriodSettlement(&_NodesGovernance.CallOpts, detectPeriodId)
}

// GetOnePeriodSettlement is a free data retrieval call binding the contract method 0x6300c951.
//
// Solidity: function getOnePeriodSettlement(uint256 detectPeriodId) view returns((uint64,uint64,uint128,address,address)[] states, uint256 totalQuotas)
func (_NodesGovernance *NodesGovernanceCallerSession) GetOnePeriodSettlement(detectPeriodId *big.Int) (struct {
	States      []NodeState
	TotalQuotas *big.Int
}, error) {
	return _NodesGovernance.Contract.GetOnePeriodSettlement(&_NodesGovernance.CallOpts, detectPeriodId)
}

// GetRoundCandidates is a free data retrieval call binding the contract method 0x93e9d413.
//
// Solidity: function getRoundCandidates(uint256 roundId) view returns(address[] candidates)
func (_NodesGovernance *NodesGovernanceCaller) GetRoundCandidates(opts *bind.CallOpts, roundId *big.Int) ([]common.Address, error) {
	var out []interface{}
	err := _NodesGovernance.contract.Call(opts, &out, "getRoundCandidates", roundId)

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetRoundCandidates is a free data retrieval call binding the contract method 0x93e9d413.
//
// Solidity: function getRoundCandidates(uint256 roundId) view returns(address[] candidates)
func (_NodesGovernance *NodesGovernanceSession) GetRoundCandidates(roundId *big.Int) ([]common.Address, error) {
	return _NodesGovernance.Contract.GetRoundCandidates(&_NodesGovernance.CallOpts, roundId)
}

// GetRoundCandidates is a free data retrieval call binding the contract method 0x93e9d413.
//
// Solidity: function getRoundCandidates(uint256 roundId) view returns(address[] candidates)
func (_NodesGovernance *NodesGovernanceCallerSession) GetRoundCandidates(roundId *big.Int) ([]common.Address, error) {
	return _NodesGovernance.Contract.GetRoundCandidates(&_NodesGovernance.CallOpts, roundId)
}

// GetValidatorsOfCandidate is a free data retrieval call binding the contract method 0x0732bd7e.
//
// Solidity: function getValidatorsOfCandidate(uint256 roundId, address candidate) view returns(address[] validators)
func (_NodesGovernance *NodesGovernanceCaller) GetValidatorsOfCandidate(opts *bind.CallOpts, roundId *big.Int, candidate common.Address) ([]common.Address, error) {
	var out []interface{}
	err := _NodesGovernance.contract.Call(opts, &out, "getValidatorsOfCandidate", roundId, candidate)

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetValidatorsOfCandidate is a free data retrieval call binding the contract method 0x0732bd7e.
//
// Solidity: function getValidatorsOfCandidate(uint256 roundId, address candidate) view returns(address[] validators)
func (_NodesGovernance *NodesGovernanceSession) GetValidatorsOfCandidate(roundId *big.Int, candidate common.Address) ([]common.Address, error) {
	return _NodesGovernance.Contract.GetValidatorsOfCandidate(&_NodesGovernance.CallOpts, roundId, candidate)
}

// GetValidatorsOfCandidate is a free data retrieval call binding the contract method 0x0732bd7e.
//
// Solidity: function getValidatorsOfCandidate(uint256 roundId, address candidate) view returns(address[] validators)
func (_NodesGovernance *NodesGovernanceCallerSession) GetValidatorsOfCandidate(roundId *big.Int, candidate common.Address) ([]common.Address, error) {
	return _NodesGovernance.Contract.GetValidatorsOfCandidate(&_NodesGovernance.CallOpts, roundId, candidate)
}

// GpuSummary is a free data retrieval call binding the contract method 0xf67c5bdc.
//
// Solidity: function gpuSummary(string ) view returns(string gpuType, uint256 totalNum, uint256 used)
func (_NodesGovernance *NodesGovernanceCaller) GpuSummary(opts *bind.CallOpts, arg0 string) (struct {
	GpuType  string
	TotalNum *big.Int
	Used     *big.Int
}, error) {
	var out []interface{}
	err := _NodesGovernance.contract.Call(opts, &out, "gpuSummary", arg0)

	outstruct := new(struct {
		GpuType  string
		TotalNum *big.Int
		Used     *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.GpuType = *abi.ConvertType(out[0], new(string)).(*string)
	outstruct.TotalNum = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.Used = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// GpuSummary is a free data retrieval call binding the contract method 0xf67c5bdc.
//
// Solidity: function gpuSummary(string ) view returns(string gpuType, uint256 totalNum, uint256 used)
func (_NodesGovernance *NodesGovernanceSession) GpuSummary(arg0 string) (struct {
	GpuType  string
	TotalNum *big.Int
	Used     *big.Int
}, error) {
	return _NodesGovernance.Contract.GpuSummary(&_NodesGovernance.CallOpts, arg0)
}

// GpuSummary is a free data retrieval call binding the contract method 0xf67c5bdc.
//
// Solidity: function gpuSummary(string ) view returns(string gpuType, uint256 totalNum, uint256 used)
func (_NodesGovernance *NodesGovernanceCallerSession) GpuSummary(arg0 string) (struct {
	GpuType  string
	TotalNum *big.Int
	Used     *big.Int
}, error) {
	return _NodesGovernance.Contract.GpuSummary(&_NodesGovernance.CallOpts, arg0)
}

// GpuTypeOfNodes is a free data retrieval call binding the contract method 0xed38ed0d.
//
// Solidity: function gpuTypeOfNodes(address , string ) view returns(uint256)
func (_NodesGovernance *NodesGovernanceCaller) GpuTypeOfNodes(opts *bind.CallOpts, arg0 common.Address, arg1 string) (*big.Int, error) {
	var out []interface{}
	err := _NodesGovernance.contract.Call(opts, &out, "gpuTypeOfNodes", arg0, arg1)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GpuTypeOfNodes is a free data retrieval call binding the contract method 0xed38ed0d.
//
// Solidity: function gpuTypeOfNodes(address , string ) view returns(uint256)
func (_NodesGovernance *NodesGovernanceSession) GpuTypeOfNodes(arg0 common.Address, arg1 string) (*big.Int, error) {
	return _NodesGovernance.Contract.GpuTypeOfNodes(&_NodesGovernance.CallOpts, arg0, arg1)
}

// GpuTypeOfNodes is a free data retrieval call binding the contract method 0xed38ed0d.
//
// Solidity: function gpuTypeOfNodes(address , string ) view returns(uint256)
func (_NodesGovernance *NodesGovernanceCallerSession) GpuTypeOfNodes(arg0 common.Address, arg1 string) (*big.Int, error) {
	return _NodesGovernance.Contract.GpuTypeOfNodes(&_NodesGovernance.CallOpts, arg0, arg1)
}

// Length is a free data retrieval call binding the contract method 0x1f7b6d32.
//
// Solidity: function length() view returns(uint256)
func (_NodesGovernance *NodesGovernanceCaller) Length(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _NodesGovernance.contract.Call(opts, &out, "length")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Length is a free data retrieval call binding the contract method 0x1f7b6d32.
//
// Solidity: function length() view returns(uint256)
func (_NodesGovernance *NodesGovernanceSession) Length() (*big.Int, error) {
	return _NodesGovernance.Contract.Length(&_NodesGovernance.CallOpts)
}

// Length is a free data retrieval call binding the contract method 0x1f7b6d32.
//
// Solidity: function length() view returns(uint256)
func (_NodesGovernance *NodesGovernanceCallerSession) Length() (*big.Int, error) {
	return _NodesGovernance.Contract.Length(&_NodesGovernance.CallOpts)
}

// RoundDurationTime is a free data retrieval call binding the contract method 0xde137270.
//
// Solidity: function roundDurationTime() view returns(uint256)
func (_NodesGovernance *NodesGovernanceCaller) RoundDurationTime(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _NodesGovernance.contract.Call(opts, &out, "roundDurationTime")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RoundDurationTime is a free data retrieval call binding the contract method 0xde137270.
//
// Solidity: function roundDurationTime() view returns(uint256)
func (_NodesGovernance *NodesGovernanceSession) RoundDurationTime() (*big.Int, error) {
	return _NodesGovernance.Contract.RoundDurationTime(&_NodesGovernance.CallOpts)
}

// RoundDurationTime is a free data retrieval call binding the contract method 0xde137270.
//
// Solidity: function roundDurationTime() view returns(uint256)
func (_NodesGovernance *NodesGovernanceCallerSession) RoundDurationTime() (*big.Int, error) {
	return _NodesGovernance.Contract.RoundDurationTime(&_NodesGovernance.CallOpts)
}

// StakeToken is a free data retrieval call binding the contract method 0x51ed6a30.
//
// Solidity: function stakeToken() view returns(address)
func (_NodesGovernance *NodesGovernanceCaller) StakeToken(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _NodesGovernance.contract.Call(opts, &out, "stakeToken")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// StakeToken is a free data retrieval call binding the contract method 0x51ed6a30.
//
// Solidity: function stakeToken() view returns(address)
func (_NodesGovernance *NodesGovernanceSession) StakeToken() (common.Address, error) {
	return _NodesGovernance.Contract.StakeToken(&_NodesGovernance.CallOpts)
}

// StakeToken is a free data retrieval call binding the contract method 0x51ed6a30.
//
// Solidity: function stakeToken() view returns(address)
func (_NodesGovernance *NodesGovernanceCallerSession) StakeToken() (common.Address, error) {
	return _NodesGovernance.Contract.StakeToken(&_NodesGovernance.CallOpts)
}

// ValidatorsPerCandidate is a free data retrieval call binding the contract method 0x18767f31.
//
// Solidity: function validatorsPerCandidate(uint256 , address , uint256 ) view returns(address)
func (_NodesGovernance *NodesGovernanceCaller) ValidatorsPerCandidate(opts *bind.CallOpts, arg0 *big.Int, arg1 common.Address, arg2 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _NodesGovernance.contract.Call(opts, &out, "validatorsPerCandidate", arg0, arg1, arg2)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ValidatorsPerCandidate is a free data retrieval call binding the contract method 0x18767f31.
//
// Solidity: function validatorsPerCandidate(uint256 , address , uint256 ) view returns(address)
func (_NodesGovernance *NodesGovernanceSession) ValidatorsPerCandidate(arg0 *big.Int, arg1 common.Address, arg2 *big.Int) (common.Address, error) {
	return _NodesGovernance.Contract.ValidatorsPerCandidate(&_NodesGovernance.CallOpts, arg0, arg1, arg2)
}

// ValidatorsPerCandidate is a free data retrieval call binding the contract method 0x18767f31.
//
// Solidity: function validatorsPerCandidate(uint256 , address , uint256 ) view returns(address)
func (_NodesGovernance *NodesGovernanceCallerSession) ValidatorsPerCandidate(arg0 *big.Int, arg1 common.Address, arg2 *big.Int) (common.Address, error) {
	return _NodesGovernance.Contract.ValidatorsPerCandidate(&_NodesGovernance.CallOpts, arg0, arg1, arg2)
}

// VotedPerCandidate is a free data retrieval call binding the contract method 0x2ad4f0ad.
//
// Solidity: function votedPerCandidate(uint256 , address ) view returns(address candidate, uint128 yesVotes, uint128 noVotes, bool completed)
func (_NodesGovernance *NodesGovernanceCaller) VotedPerCandidate(opts *bind.CallOpts, arg0 *big.Int, arg1 common.Address) (struct {
	Candidate common.Address
	YesVotes  *big.Int
	NoVotes   *big.Int
	Completed bool
}, error) {
	var out []interface{}
	err := _NodesGovernance.contract.Call(opts, &out, "votedPerCandidate", arg0, arg1)

	outstruct := new(struct {
		Candidate common.Address
		YesVotes  *big.Int
		NoVotes   *big.Int
		Completed bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Candidate = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.YesVotes = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.NoVotes = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.Completed = *abi.ConvertType(out[3], new(bool)).(*bool)

	return *outstruct, err

}

// VotedPerCandidate is a free data retrieval call binding the contract method 0x2ad4f0ad.
//
// Solidity: function votedPerCandidate(uint256 , address ) view returns(address candidate, uint128 yesVotes, uint128 noVotes, bool completed)
func (_NodesGovernance *NodesGovernanceSession) VotedPerCandidate(arg0 *big.Int, arg1 common.Address) (struct {
	Candidate common.Address
	YesVotes  *big.Int
	NoVotes   *big.Int
	Completed bool
}, error) {
	return _NodesGovernance.Contract.VotedPerCandidate(&_NodesGovernance.CallOpts, arg0, arg1)
}

// VotedPerCandidate is a free data retrieval call binding the contract method 0x2ad4f0ad.
//
// Solidity: function votedPerCandidate(uint256 , address ) view returns(address candidate, uint128 yesVotes, uint128 noVotes, bool completed)
func (_NodesGovernance *NodesGovernanceCallerSession) VotedPerCandidate(arg0 *big.Int, arg1 common.Address) (struct {
	Candidate common.Address
	YesVotes  *big.Int
	NoVotes   *big.Int
	Completed bool
}, error) {
	return _NodesGovernance.Contract.VotedPerCandidate(&_NodesGovernance.CallOpts, arg0, arg1)
}

// AllocGPU is a paid mutator transaction binding the contract method 0x6252e1c2.
//
// Solidity: function allocGPU(uint256 startIndex, string[] gpuTypes, uint256[] gpuNums) returns((address,string,uint256)[] gpuNodes, uint256 len)
func (_NodesGovernance *NodesGovernanceTransactor) AllocGPU(opts *bind.TransactOpts, startIndex *big.Int, gpuTypes []string, gpuNums []*big.Int) (*types.Transaction, error) {
	return _NodesGovernance.contract.Transact(opts, "allocGPU", startIndex, gpuTypes, gpuNums)
}

// AllocGPU is a paid mutator transaction binding the contract method 0x6252e1c2.
//
// Solidity: function allocGPU(uint256 startIndex, string[] gpuTypes, uint256[] gpuNums) returns((address,string,uint256)[] gpuNodes, uint256 len)
func (_NodesGovernance *NodesGovernanceSession) AllocGPU(startIndex *big.Int, gpuTypes []string, gpuNums []*big.Int) (*types.Transaction, error) {
	return _NodesGovernance.Contract.AllocGPU(&_NodesGovernance.TransactOpts, startIndex, gpuTypes, gpuNums)
}

// AllocGPU is a paid mutator transaction binding the contract method 0x6252e1c2.
//
// Solidity: function allocGPU(uint256 startIndex, string[] gpuTypes, uint256[] gpuNums) returns((address,string,uint256)[] gpuNodes, uint256 len)
func (_NodesGovernance *NodesGovernanceTransactorSession) AllocGPU(startIndex *big.Int, gpuTypes []string, gpuNums []*big.Int) (*types.Transaction, error) {
	return _NodesGovernance.Contract.AllocGPU(&_NodesGovernance.TransactOpts, startIndex, gpuTypes, gpuNums)
}

// Attach is a paid mutator transaction binding the contract method 0x7a0ca1e2.
//
// Solidity: function attach(address server) returns()
func (_NodesGovernance *NodesGovernanceTransactor) Attach(opts *bind.TransactOpts, server common.Address) (*types.Transaction, error) {
	return _NodesGovernance.contract.Transact(opts, "attach", server)
}

// Attach is a paid mutator transaction binding the contract method 0x7a0ca1e2.
//
// Solidity: function attach(address server) returns()
func (_NodesGovernance *NodesGovernanceSession) Attach(server common.Address) (*types.Transaction, error) {
	return _NodesGovernance.Contract.Attach(&_NodesGovernance.TransactOpts, server)
}

// Attach is a paid mutator transaction binding the contract method 0x7a0ca1e2.
//
// Solidity: function attach(address server) returns()
func (_NodesGovernance *NodesGovernanceTransactorSession) Attach(server common.Address) (*types.Transaction, error) {
	return _NodesGovernance.Contract.Attach(&_NodesGovernance.TransactOpts, server)
}

// DeregisterNode is a paid mutator transaction binding the contract method 0x18b1c081.
//
// Solidity: function deregisterNode() returns()
func (_NodesGovernance *NodesGovernanceTransactor) DeregisterNode(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _NodesGovernance.contract.Transact(opts, "deregisterNode")
}

// DeregisterNode is a paid mutator transaction binding the contract method 0x18b1c081.
//
// Solidity: function deregisterNode() returns()
func (_NodesGovernance *NodesGovernanceSession) DeregisterNode() (*types.Transaction, error) {
	return _NodesGovernance.Contract.DeregisterNode(&_NodesGovernance.TransactOpts)
}

// DeregisterNode is a paid mutator transaction binding the contract method 0x18b1c081.
//
// Solidity: function deregisterNode() returns()
func (_NodesGovernance *NodesGovernanceTransactorSession) DeregisterNode() (*types.Transaction, error) {
	return _NodesGovernance.Contract.DeregisterNode(&_NodesGovernance.TransactOpts)
}

// Dettach is a paid mutator transaction binding the contract method 0x0e22e7f8.
//
// Solidity: function dettach(address server) returns()
func (_NodesGovernance *NodesGovernanceTransactor) Dettach(opts *bind.TransactOpts, server common.Address) (*types.Transaction, error) {
	return _NodesGovernance.contract.Transact(opts, "dettach", server)
}

// Dettach is a paid mutator transaction binding the contract method 0x0e22e7f8.
//
// Solidity: function dettach(address server) returns()
func (_NodesGovernance *NodesGovernanceSession) Dettach(server common.Address) (*types.Transaction, error) {
	return _NodesGovernance.Contract.Dettach(&_NodesGovernance.TransactOpts, server)
}

// Dettach is a paid mutator transaction binding the contract method 0x0e22e7f8.
//
// Solidity: function dettach(address server) returns()
func (_NodesGovernance *NodesGovernanceTransactorSession) Dettach(server common.Address) (*types.Transaction, error) {
	return _NodesGovernance.Contract.Dettach(&_NodesGovernance.TransactOpts, server)
}

// FreeGPU is a paid mutator transaction binding the contract method 0x036fe9c2.
//
// Solidity: function freeGPU((address,string,uint256)[] gpuNodes) returns()
func (_NodesGovernance *NodesGovernanceTransactor) FreeGPU(opts *bind.TransactOpts, gpuNodes []NodeComputeUsed) (*types.Transaction, error) {
	return _NodesGovernance.contract.Transact(opts, "freeGPU", gpuNodes)
}

// FreeGPU is a paid mutator transaction binding the contract method 0x036fe9c2.
//
// Solidity: function freeGPU((address,string,uint256)[] gpuNodes) returns()
func (_NodesGovernance *NodesGovernanceSession) FreeGPU(gpuNodes []NodeComputeUsed) (*types.Transaction, error) {
	return _NodesGovernance.Contract.FreeGPU(&_NodesGovernance.TransactOpts, gpuNodes)
}

// FreeGPU is a paid mutator transaction binding the contract method 0x036fe9c2.
//
// Solidity: function freeGPU((address,string,uint256)[] gpuNodes) returns()
func (_NodesGovernance *NodesGovernanceTransactorSession) FreeGPU(gpuNodes []NodeComputeUsed) (*types.Transaction, error) {
	return _NodesGovernance.Contract.FreeGPU(&_NodesGovernance.TransactOpts, gpuNodes)
}

// NodesGovernanceInitialize is a paid mutator transaction binding the contract method 0xefa219e0.
//
// Solidity: function nodesGovernance_initialize((address,string,address,string[],uint256[])[] _nodesInfos, address _allocator, uint256 _roundDurationTime, address _stakeToken) returns()
func (_NodesGovernance *NodesGovernanceTransactor) NodesGovernanceInitialize(opts *bind.TransactOpts, _nodesInfos []NodeInfo, _allocator common.Address, _roundDurationTime *big.Int, _stakeToken common.Address) (*types.Transaction, error) {
	return _NodesGovernance.contract.Transact(opts, "nodesGovernance_initialize", _nodesInfos, _allocator, _roundDurationTime, _stakeToken)
}

// NodesGovernanceInitialize is a paid mutator transaction binding the contract method 0xefa219e0.
//
// Solidity: function nodesGovernance_initialize((address,string,address,string[],uint256[])[] _nodesInfos, address _allocator, uint256 _roundDurationTime, address _stakeToken) returns()
func (_NodesGovernance *NodesGovernanceSession) NodesGovernanceInitialize(_nodesInfos []NodeInfo, _allocator common.Address, _roundDurationTime *big.Int, _stakeToken common.Address) (*types.Transaction, error) {
	return _NodesGovernance.Contract.NodesGovernanceInitialize(&_NodesGovernance.TransactOpts, _nodesInfos, _allocator, _roundDurationTime, _stakeToken)
}

// NodesGovernanceInitialize is a paid mutator transaction binding the contract method 0xefa219e0.
//
// Solidity: function nodesGovernance_initialize((address,string,address,string[],uint256[])[] _nodesInfos, address _allocator, uint256 _roundDurationTime, address _stakeToken) returns()
func (_NodesGovernance *NodesGovernanceTransactorSession) NodesGovernanceInitialize(_nodesInfos []NodeInfo, _allocator common.Address, _roundDurationTime *big.Int, _stakeToken common.Address) (*types.Transaction, error) {
	return _NodesGovernance.Contract.NodesGovernanceInitialize(&_NodesGovernance.TransactOpts, _nodesInfos, _allocator, _roundDurationTime, _stakeToken)
}

// RegisterNode is a paid mutator transaction binding the contract method 0xefca74d2.
//
// Solidity: function registerNode(address wallet, string aliasIdentifier, string[] gpuTypes, uint256[] gpuNums) payable returns()
func (_NodesGovernance *NodesGovernanceTransactor) RegisterNode(opts *bind.TransactOpts, wallet common.Address, aliasIdentifier string, gpuTypes []string, gpuNums []*big.Int) (*types.Transaction, error) {
	return _NodesGovernance.contract.Transact(opts, "registerNode", wallet, aliasIdentifier, gpuTypes, gpuNums)
}

// RegisterNode is a paid mutator transaction binding the contract method 0xefca74d2.
//
// Solidity: function registerNode(address wallet, string aliasIdentifier, string[] gpuTypes, uint256[] gpuNums) payable returns()
func (_NodesGovernance *NodesGovernanceSession) RegisterNode(wallet common.Address, aliasIdentifier string, gpuTypes []string, gpuNums []*big.Int) (*types.Transaction, error) {
	return _NodesGovernance.Contract.RegisterNode(&_NodesGovernance.TransactOpts, wallet, aliasIdentifier, gpuTypes, gpuNums)
}

// RegisterNode is a paid mutator transaction binding the contract method 0xefca74d2.
//
// Solidity: function registerNode(address wallet, string aliasIdentifier, string[] gpuTypes, uint256[] gpuNums) payable returns()
func (_NodesGovernance *NodesGovernanceTransactorSession) RegisterNode(wallet common.Address, aliasIdentifier string, gpuTypes []string, gpuNums []*big.Int) (*types.Transaction, error) {
	return _NodesGovernance.Contract.RegisterNode(&_NodesGovernance.TransactOpts, wallet, aliasIdentifier, gpuTypes, gpuNums)
}

// SettlementOnePeriod is a paid mutator transaction binding the contract method 0x4d4fc0b8.
//
// Solidity: function settlementOnePeriod(uint256 detectPeriodId) returns((uint64,uint64,uint128,address,address)[] states, uint256 totalQuotas)
func (_NodesGovernance *NodesGovernanceTransactor) SettlementOnePeriod(opts *bind.TransactOpts, detectPeriodId *big.Int) (*types.Transaction, error) {
	return _NodesGovernance.contract.Transact(opts, "settlementOnePeriod", detectPeriodId)
}

// SettlementOnePeriod is a paid mutator transaction binding the contract method 0x4d4fc0b8.
//
// Solidity: function settlementOnePeriod(uint256 detectPeriodId) returns((uint64,uint64,uint128,address,address)[] states, uint256 totalQuotas)
func (_NodesGovernance *NodesGovernanceSession) SettlementOnePeriod(detectPeriodId *big.Int) (*types.Transaction, error) {
	return _NodesGovernance.Contract.SettlementOnePeriod(&_NodesGovernance.TransactOpts, detectPeriodId)
}

// SettlementOnePeriod is a paid mutator transaction binding the contract method 0x4d4fc0b8.
//
// Solidity: function settlementOnePeriod(uint256 detectPeriodId) returns((uint64,uint64,uint128,address,address)[] states, uint256 totalQuotas)
func (_NodesGovernance *NodesGovernanceTransactorSession) SettlementOnePeriod(detectPeriodId *big.Int) (*types.Transaction, error) {
	return _NodesGovernance.Contract.SettlementOnePeriod(&_NodesGovernance.TransactOpts, detectPeriodId)
}

// StartNewValidationRound is a paid mutator transaction binding the contract method 0x63c94199.
//
// Solidity: function startNewValidationRound() returns(uint256 detectId, uint256 roundId)
func (_NodesGovernance *NodesGovernanceTransactor) StartNewValidationRound(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _NodesGovernance.contract.Transact(opts, "startNewValidationRound")
}

// StartNewValidationRound is a paid mutator transaction binding the contract method 0x63c94199.
//
// Solidity: function startNewValidationRound() returns(uint256 detectId, uint256 roundId)
func (_NodesGovernance *NodesGovernanceSession) StartNewValidationRound() (*types.Transaction, error) {
	return _NodesGovernance.Contract.StartNewValidationRound(&_NodesGovernance.TransactOpts)
}

// StartNewValidationRound is a paid mutator transaction binding the contract method 0x63c94199.
//
// Solidity: function startNewValidationRound() returns(uint256 detectId, uint256 roundId)
func (_NodesGovernance *NodesGovernanceTransactorSession) StartNewValidationRound() (*types.Transaction, error) {
	return _NodesGovernance.Contract.StartNewValidationRound(&_NodesGovernance.TransactOpts)
}

// Vote is a paid mutator transaction binding the contract method 0xe2cdd42a.
//
// Solidity: function vote(uint256 roundId, address candidate, bool result) returns()
func (_NodesGovernance *NodesGovernanceTransactor) Vote(opts *bind.TransactOpts, roundId *big.Int, candidate common.Address, result bool) (*types.Transaction, error) {
	return _NodesGovernance.contract.Transact(opts, "vote", roundId, candidate, result)
}

// Vote is a paid mutator transaction binding the contract method 0xe2cdd42a.
//
// Solidity: function vote(uint256 roundId, address candidate, bool result) returns()
func (_NodesGovernance *NodesGovernanceSession) Vote(roundId *big.Int, candidate common.Address, result bool) (*types.Transaction, error) {
	return _NodesGovernance.Contract.Vote(&_NodesGovernance.TransactOpts, roundId, candidate, result)
}

// Vote is a paid mutator transaction binding the contract method 0xe2cdd42a.
//
// Solidity: function vote(uint256 roundId, address candidate, bool result) returns()
func (_NodesGovernance *NodesGovernanceTransactorSession) Vote(roundId *big.Int, candidate common.Address, result bool) (*types.Transaction, error) {
	return _NodesGovernance.Contract.Vote(&_NodesGovernance.TransactOpts, roundId, candidate, result)
}

// NodesGovernanceAuthorizedIterator is returned from FilterAuthorized and is used to iterate over the raw logs and unpacked data for Authorized events raised by the NodesGovernance contract.
type NodesGovernanceAuthorizedIterator struct {
	Event *NodesGovernanceAuthorized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NodesGovernanceAuthorizedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NodesGovernanceAuthorized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NodesGovernanceAuthorized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NodesGovernanceAuthorizedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NodesGovernanceAuthorizedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NodesGovernanceAuthorized represents a Authorized event raised by the NodesGovernance contract.
type NodesGovernanceAuthorized struct {
	Owner   common.Address
	Spender common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterAuthorized is a free log retrieval operation binding the contract event 0xf5a7f4fb8a92356e8c8c4ae7ac3589908381450500a7e2fd08c95600021ee889.
//
// Solidity: event Authorized(address indexed owner, address indexed spender)
func (_NodesGovernance *NodesGovernanceFilterer) FilterAuthorized(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*NodesGovernanceAuthorizedIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _NodesGovernance.contract.FilterLogs(opts, "Authorized", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &NodesGovernanceAuthorizedIterator{contract: _NodesGovernance.contract, event: "Authorized", logs: logs, sub: sub}, nil
}

// WatchAuthorized is a free log subscription operation binding the contract event 0xf5a7f4fb8a92356e8c8c4ae7ac3589908381450500a7e2fd08c95600021ee889.
//
// Solidity: event Authorized(address indexed owner, address indexed spender)
func (_NodesGovernance *NodesGovernanceFilterer) WatchAuthorized(opts *bind.WatchOpts, sink chan<- *NodesGovernanceAuthorized, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _NodesGovernance.contract.WatchLogs(opts, "Authorized", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NodesGovernanceAuthorized)
				if err := _NodesGovernance.contract.UnpackLog(event, "Authorized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAuthorized is a log parse operation binding the contract event 0xf5a7f4fb8a92356e8c8c4ae7ac3589908381450500a7e2fd08c95600021ee889.
//
// Solidity: event Authorized(address indexed owner, address indexed spender)
func (_NodesGovernance *NodesGovernanceFilterer) ParseAuthorized(log types.Log) (*NodesGovernanceAuthorized, error) {
	event := new(NodesGovernanceAuthorized)
	if err := _NodesGovernance.contract.UnpackLog(event, "Authorized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NodesGovernanceInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the NodesGovernance contract.
type NodesGovernanceInitializedIterator struct {
	Event *NodesGovernanceInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NodesGovernanceInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NodesGovernanceInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NodesGovernanceInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NodesGovernanceInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NodesGovernanceInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NodesGovernanceInitialized represents a Initialized event raised by the NodesGovernance contract.
type NodesGovernanceInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_NodesGovernance *NodesGovernanceFilterer) FilterInitialized(opts *bind.FilterOpts) (*NodesGovernanceInitializedIterator, error) {

	logs, sub, err := _NodesGovernance.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &NodesGovernanceInitializedIterator{contract: _NodesGovernance.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_NodesGovernance *NodesGovernanceFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *NodesGovernanceInitialized) (event.Subscription, error) {

	logs, sub, err := _NodesGovernance.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NodesGovernanceInitialized)
				if err := _NodesGovernance.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_NodesGovernance *NodesGovernanceFilterer) ParseInitialized(log types.Log) (*NodesGovernanceInitialized, error) {
	event := new(NodesGovernanceInitialized)
	if err := _NodesGovernance.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NodesGovernanceNodeActivedIterator is returned from FilterNodeActived and is used to iterate over the raw logs and unpacked data for NodeActived events raised by the NodesGovernance contract.
type NodesGovernanceNodeActivedIterator struct {
	Event *NodesGovernanceNodeActived // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NodesGovernanceNodeActivedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NodesGovernanceNodeActived)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NodesGovernanceNodeActived)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NodesGovernanceNodeActivedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NodesGovernanceNodeActivedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NodesGovernanceNodeActived represents a NodeActived event raised by the NodesGovernance contract.
type NodesGovernanceNodeActived struct {
	Wallet          common.Address
	Identifier      common.Address
	Time            *big.Int
	AliasIdentifier string
	GpuTypes        []string
	GpuNums         []*big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterNodeActived is a free log retrieval operation binding the contract event 0xb0a73f160683fa6bd1601bd25cd9e2addc090f0a74959bf51c6a2a4560af6f5f.
//
// Solidity: event NodeActived(address indexed wallet, address identifier, uint256 time, string aliasIdentifier, string[] gpuTypes, uint256[] gpuNums)
func (_NodesGovernance *NodesGovernanceFilterer) FilterNodeActived(opts *bind.FilterOpts, wallet []common.Address) (*NodesGovernanceNodeActivedIterator, error) {

	var walletRule []interface{}
	for _, walletItem := range wallet {
		walletRule = append(walletRule, walletItem)
	}

	logs, sub, err := _NodesGovernance.contract.FilterLogs(opts, "NodeActived", walletRule)
	if err != nil {
		return nil, err
	}
	return &NodesGovernanceNodeActivedIterator{contract: _NodesGovernance.contract, event: "NodeActived", logs: logs, sub: sub}, nil
}

// WatchNodeActived is a free log subscription operation binding the contract event 0xb0a73f160683fa6bd1601bd25cd9e2addc090f0a74959bf51c6a2a4560af6f5f.
//
// Solidity: event NodeActived(address indexed wallet, address identifier, uint256 time, string aliasIdentifier, string[] gpuTypes, uint256[] gpuNums)
func (_NodesGovernance *NodesGovernanceFilterer) WatchNodeActived(opts *bind.WatchOpts, sink chan<- *NodesGovernanceNodeActived, wallet []common.Address) (event.Subscription, error) {

	var walletRule []interface{}
	for _, walletItem := range wallet {
		walletRule = append(walletRule, walletItem)
	}

	logs, sub, err := _NodesGovernance.contract.WatchLogs(opts, "NodeActived", walletRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NodesGovernanceNodeActived)
				if err := _NodesGovernance.contract.UnpackLog(event, "NodeActived", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNodeActived is a log parse operation binding the contract event 0xb0a73f160683fa6bd1601bd25cd9e2addc090f0a74959bf51c6a2a4560af6f5f.
//
// Solidity: event NodeActived(address indexed wallet, address identifier, uint256 time, string aliasIdentifier, string[] gpuTypes, uint256[] gpuNums)
func (_NodesGovernance *NodesGovernanceFilterer) ParseNodeActived(log types.Log) (*NodesGovernanceNodeActived, error) {
	event := new(NodesGovernanceNodeActived)
	if err := _NodesGovernance.contract.UnpackLog(event, "NodeActived", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NodesGovernanceNodeAttachedIterator is returned from FilterNodeAttached and is used to iterate over the raw logs and unpacked data for NodeAttached events raised by the NodesGovernance contract.
type NodesGovernanceNodeAttachedIterator struct {
	Event *NodesGovernanceNodeAttached // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NodesGovernanceNodeAttachedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NodesGovernanceNodeAttached)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NodesGovernanceNodeAttached)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NodesGovernanceNodeAttachedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NodesGovernanceNodeAttachedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NodesGovernanceNodeAttached represents a NodeAttached event raised by the NodesGovernance contract.
type NodesGovernanceNodeAttached struct {
	IdentifierOfProvider common.Address
	IdentifierOfServer   common.Address
	Raw                  types.Log // Blockchain specific contextual infos
}

// FilterNodeAttached is a free log retrieval operation binding the contract event 0x042e2dbbe7288392f225b5cc7f610946ae1a1e8673b3f8ce4f6fc3bc6dee5aa6.
//
// Solidity: event NodeAttached(address indexed identifierOfProvider, address indexed identifierOfServer)
func (_NodesGovernance *NodesGovernanceFilterer) FilterNodeAttached(opts *bind.FilterOpts, identifierOfProvider []common.Address, identifierOfServer []common.Address) (*NodesGovernanceNodeAttachedIterator, error) {

	var identifierOfProviderRule []interface{}
	for _, identifierOfProviderItem := range identifierOfProvider {
		identifierOfProviderRule = append(identifierOfProviderRule, identifierOfProviderItem)
	}
	var identifierOfServerRule []interface{}
	for _, identifierOfServerItem := range identifierOfServer {
		identifierOfServerRule = append(identifierOfServerRule, identifierOfServerItem)
	}

	logs, sub, err := _NodesGovernance.contract.FilterLogs(opts, "NodeAttached", identifierOfProviderRule, identifierOfServerRule)
	if err != nil {
		return nil, err
	}
	return &NodesGovernanceNodeAttachedIterator{contract: _NodesGovernance.contract, event: "NodeAttached", logs: logs, sub: sub}, nil
}

// WatchNodeAttached is a free log subscription operation binding the contract event 0x042e2dbbe7288392f225b5cc7f610946ae1a1e8673b3f8ce4f6fc3bc6dee5aa6.
//
// Solidity: event NodeAttached(address indexed identifierOfProvider, address indexed identifierOfServer)
func (_NodesGovernance *NodesGovernanceFilterer) WatchNodeAttached(opts *bind.WatchOpts, sink chan<- *NodesGovernanceNodeAttached, identifierOfProvider []common.Address, identifierOfServer []common.Address) (event.Subscription, error) {

	var identifierOfProviderRule []interface{}
	for _, identifierOfProviderItem := range identifierOfProvider {
		identifierOfProviderRule = append(identifierOfProviderRule, identifierOfProviderItem)
	}
	var identifierOfServerRule []interface{}
	for _, identifierOfServerItem := range identifierOfServer {
		identifierOfServerRule = append(identifierOfServerRule, identifierOfServerItem)
	}

	logs, sub, err := _NodesGovernance.contract.WatchLogs(opts, "NodeAttached", identifierOfProviderRule, identifierOfServerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NodesGovernanceNodeAttached)
				if err := _NodesGovernance.contract.UnpackLog(event, "NodeAttached", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNodeAttached is a log parse operation binding the contract event 0x042e2dbbe7288392f225b5cc7f610946ae1a1e8673b3f8ce4f6fc3bc6dee5aa6.
//
// Solidity: event NodeAttached(address indexed identifierOfProvider, address indexed identifierOfServer)
func (_NodesGovernance *NodesGovernanceFilterer) ParseNodeAttached(log types.Log) (*NodesGovernanceNodeAttached, error) {
	event := new(NodesGovernanceNodeAttached)
	if err := _NodesGovernance.contract.UnpackLog(event, "NodeAttached", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NodesGovernanceNodeDeregisteredIterator is returned from FilterNodeDeregistered and is used to iterate over the raw logs and unpacked data for NodeDeregistered events raised by the NodesGovernance contract.
type NodesGovernanceNodeDeregisteredIterator struct {
	Event *NodesGovernanceNodeDeregistered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NodesGovernanceNodeDeregisteredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NodesGovernanceNodeDeregistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NodesGovernanceNodeDeregistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NodesGovernanceNodeDeregisteredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NodesGovernanceNodeDeregisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NodesGovernanceNodeDeregistered represents a NodeDeregistered event raised by the NodesGovernance contract.
type NodesGovernanceNodeDeregistered struct {
	Identifier      common.Address
	Time            *big.Int
	AliasIdentifier string
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterNodeDeregistered is a free log retrieval operation binding the contract event 0x60d01d146c7aa1a7d4e3fdd5543872f7d5b2a241980a66b3552ae1a86ae18453.
//
// Solidity: event NodeDeregistered(address indexed identifier, uint256 time, string aliasIdentifier)
func (_NodesGovernance *NodesGovernanceFilterer) FilterNodeDeregistered(opts *bind.FilterOpts, identifier []common.Address) (*NodesGovernanceNodeDeregisteredIterator, error) {

	var identifierRule []interface{}
	for _, identifierItem := range identifier {
		identifierRule = append(identifierRule, identifierItem)
	}

	logs, sub, err := _NodesGovernance.contract.FilterLogs(opts, "NodeDeregistered", identifierRule)
	if err != nil {
		return nil, err
	}
	return &NodesGovernanceNodeDeregisteredIterator{contract: _NodesGovernance.contract, event: "NodeDeregistered", logs: logs, sub: sub}, nil
}

// WatchNodeDeregistered is a free log subscription operation binding the contract event 0x60d01d146c7aa1a7d4e3fdd5543872f7d5b2a241980a66b3552ae1a86ae18453.
//
// Solidity: event NodeDeregistered(address indexed identifier, uint256 time, string aliasIdentifier)
func (_NodesGovernance *NodesGovernanceFilterer) WatchNodeDeregistered(opts *bind.WatchOpts, sink chan<- *NodesGovernanceNodeDeregistered, identifier []common.Address) (event.Subscription, error) {

	var identifierRule []interface{}
	for _, identifierItem := range identifier {
		identifierRule = append(identifierRule, identifierItem)
	}

	logs, sub, err := _NodesGovernance.contract.WatchLogs(opts, "NodeDeregistered", identifierRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NodesGovernanceNodeDeregistered)
				if err := _NodesGovernance.contract.UnpackLog(event, "NodeDeregistered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNodeDeregistered is a log parse operation binding the contract event 0x60d01d146c7aa1a7d4e3fdd5543872f7d5b2a241980a66b3552ae1a86ae18453.
//
// Solidity: event NodeDeregistered(address indexed identifier, uint256 time, string aliasIdentifier)
func (_NodesGovernance *NodesGovernanceFilterer) ParseNodeDeregistered(log types.Log) (*NodesGovernanceNodeDeregistered, error) {
	event := new(NodesGovernanceNodeDeregistered)
	if err := _NodesGovernance.contract.UnpackLog(event, "NodeDeregistered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NodesGovernanceNodeDetachedIterator is returned from FilterNodeDetached and is used to iterate over the raw logs and unpacked data for NodeDetached events raised by the NodesGovernance contract.
type NodesGovernanceNodeDetachedIterator struct {
	Event *NodesGovernanceNodeDetached // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NodesGovernanceNodeDetachedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NodesGovernanceNodeDetached)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NodesGovernanceNodeDetached)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NodesGovernanceNodeDetachedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NodesGovernanceNodeDetachedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NodesGovernanceNodeDetached represents a NodeDetached event raised by the NodesGovernance contract.
type NodesGovernanceNodeDetached struct {
	IdentifierOfProvider common.Address
	IdentifierOfServer   common.Address
	Raw                  types.Log // Blockchain specific contextual infos
}

// FilterNodeDetached is a free log retrieval operation binding the contract event 0x864dd06d15940858b627540246db79e66082ff76b9712b0bb5d483d168b1cd18.
//
// Solidity: event NodeDetached(address indexed identifierOfProvider, address indexed identifierOfServer)
func (_NodesGovernance *NodesGovernanceFilterer) FilterNodeDetached(opts *bind.FilterOpts, identifierOfProvider []common.Address, identifierOfServer []common.Address) (*NodesGovernanceNodeDetachedIterator, error) {

	var identifierOfProviderRule []interface{}
	for _, identifierOfProviderItem := range identifierOfProvider {
		identifierOfProviderRule = append(identifierOfProviderRule, identifierOfProviderItem)
	}
	var identifierOfServerRule []interface{}
	for _, identifierOfServerItem := range identifierOfServer {
		identifierOfServerRule = append(identifierOfServerRule, identifierOfServerItem)
	}

	logs, sub, err := _NodesGovernance.contract.FilterLogs(opts, "NodeDetached", identifierOfProviderRule, identifierOfServerRule)
	if err != nil {
		return nil, err
	}
	return &NodesGovernanceNodeDetachedIterator{contract: _NodesGovernance.contract, event: "NodeDetached", logs: logs, sub: sub}, nil
}

// WatchNodeDetached is a free log subscription operation binding the contract event 0x864dd06d15940858b627540246db79e66082ff76b9712b0bb5d483d168b1cd18.
//
// Solidity: event NodeDetached(address indexed identifierOfProvider, address indexed identifierOfServer)
func (_NodesGovernance *NodesGovernanceFilterer) WatchNodeDetached(opts *bind.WatchOpts, sink chan<- *NodesGovernanceNodeDetached, identifierOfProvider []common.Address, identifierOfServer []common.Address) (event.Subscription, error) {

	var identifierOfProviderRule []interface{}
	for _, identifierOfProviderItem := range identifierOfProvider {
		identifierOfProviderRule = append(identifierOfProviderRule, identifierOfProviderItem)
	}
	var identifierOfServerRule []interface{}
	for _, identifierOfServerItem := range identifierOfServer {
		identifierOfServerRule = append(identifierOfServerRule, identifierOfServerItem)
	}

	logs, sub, err := _NodesGovernance.contract.WatchLogs(opts, "NodeDetached", identifierOfProviderRule, identifierOfServerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NodesGovernanceNodeDetached)
				if err := _NodesGovernance.contract.UnpackLog(event, "NodeDetached", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNodeDetached is a log parse operation binding the contract event 0x864dd06d15940858b627540246db79e66082ff76b9712b0bb5d483d168b1cd18.
//
// Solidity: event NodeDetached(address indexed identifierOfProvider, address indexed identifierOfServer)
func (_NodesGovernance *NodesGovernanceFilterer) ParseNodeDetached(log types.Log) (*NodesGovernanceNodeDetached, error) {
	event := new(NodesGovernanceNodeDetached)
	if err := _NodesGovernance.contract.UnpackLog(event, "NodeDetached", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NodesGovernanceNodeRegisteredIterator is returned from FilterNodeRegistered and is used to iterate over the raw logs and unpacked data for NodeRegistered events raised by the NodesGovernance contract.
type NodesGovernanceNodeRegisteredIterator struct {
	Event *NodesGovernanceNodeRegistered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NodesGovernanceNodeRegisteredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NodesGovernanceNodeRegistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NodesGovernanceNodeRegistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NodesGovernanceNodeRegisteredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NodesGovernanceNodeRegisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NodesGovernanceNodeRegistered represents a NodeRegistered event raised by the NodesGovernance contract.
type NodesGovernanceNodeRegistered struct {
	Wallet          common.Address
	Identifier      common.Address
	Time            *big.Int
	AliasIdentifier string
	GpuTypes        []string
	GpuNums         []*big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterNodeRegistered is a free log retrieval operation binding the contract event 0x99c250edfb33141684f230eecda8aa955bf0d62d17bcaaab0ab43f318f3637b0.
//
// Solidity: event NodeRegistered(address indexed wallet, address identifier, uint256 time, string aliasIdentifier, string[] gpuTypes, uint256[] gpuNums)
func (_NodesGovernance *NodesGovernanceFilterer) FilterNodeRegistered(opts *bind.FilterOpts, wallet []common.Address) (*NodesGovernanceNodeRegisteredIterator, error) {

	var walletRule []interface{}
	for _, walletItem := range wallet {
		walletRule = append(walletRule, walletItem)
	}

	logs, sub, err := _NodesGovernance.contract.FilterLogs(opts, "NodeRegistered", walletRule)
	if err != nil {
		return nil, err
	}
	return &NodesGovernanceNodeRegisteredIterator{contract: _NodesGovernance.contract, event: "NodeRegistered", logs: logs, sub: sub}, nil
}

// WatchNodeRegistered is a free log subscription operation binding the contract event 0x99c250edfb33141684f230eecda8aa955bf0d62d17bcaaab0ab43f318f3637b0.
//
// Solidity: event NodeRegistered(address indexed wallet, address identifier, uint256 time, string aliasIdentifier, string[] gpuTypes, uint256[] gpuNums)
func (_NodesGovernance *NodesGovernanceFilterer) WatchNodeRegistered(opts *bind.WatchOpts, sink chan<- *NodesGovernanceNodeRegistered, wallet []common.Address) (event.Subscription, error) {

	var walletRule []interface{}
	for _, walletItem := range wallet {
		walletRule = append(walletRule, walletItem)
	}

	logs, sub, err := _NodesGovernance.contract.WatchLogs(opts, "NodeRegistered", walletRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NodesGovernanceNodeRegistered)
				if err := _NodesGovernance.contract.UnpackLog(event, "NodeRegistered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNodeRegistered is a log parse operation binding the contract event 0x99c250edfb33141684f230eecda8aa955bf0d62d17bcaaab0ab43f318f3637b0.
//
// Solidity: event NodeRegistered(address indexed wallet, address identifier, uint256 time, string aliasIdentifier, string[] gpuTypes, uint256[] gpuNums)
func (_NodesGovernance *NodesGovernanceFilterer) ParseNodeRegistered(log types.Log) (*NodesGovernanceNodeRegistered, error) {
	event := new(NodesGovernanceNodeRegistered)
	if err := _NodesGovernance.contract.UnpackLog(event, "NodeRegistered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NodesGovernanceSettlementResultIterator is returned from FilterSettlementResult and is used to iterate over the raw logs and unpacked data for SettlementResult events raised by the NodesGovernance contract.
type NodesGovernanceSettlementResultIterator struct {
	Event *NodesGovernanceSettlementResult // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NodesGovernanceSettlementResultIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NodesGovernanceSettlementResult)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NodesGovernanceSettlementResult)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NodesGovernanceSettlementResultIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NodesGovernanceSettlementResultIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NodesGovernanceSettlementResult represents a SettlementResult event raised by the NodesGovernance contract.
type NodesGovernanceSettlementResult struct {
	States     []NodeState
	TotalQuota *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterSettlementResult is a free log retrieval operation binding the contract event 0xd51417935ddbb98970f20a5f6f9c5070ce90768d0e3bfaba49e7e2f8621debac.
//
// Solidity: event SettlementResult((uint64,uint64,uint128,address,address)[] states, uint256 totalQuota)
func (_NodesGovernance *NodesGovernanceFilterer) FilterSettlementResult(opts *bind.FilterOpts) (*NodesGovernanceSettlementResultIterator, error) {

	logs, sub, err := _NodesGovernance.contract.FilterLogs(opts, "SettlementResult")
	if err != nil {
		return nil, err
	}
	return &NodesGovernanceSettlementResultIterator{contract: _NodesGovernance.contract, event: "SettlementResult", logs: logs, sub: sub}, nil
}

// WatchSettlementResult is a free log subscription operation binding the contract event 0xd51417935ddbb98970f20a5f6f9c5070ce90768d0e3bfaba49e7e2f8621debac.
//
// Solidity: event SettlementResult((uint64,uint64,uint128,address,address)[] states, uint256 totalQuota)
func (_NodesGovernance *NodesGovernanceFilterer) WatchSettlementResult(opts *bind.WatchOpts, sink chan<- *NodesGovernanceSettlementResult) (event.Subscription, error) {

	logs, sub, err := _NodesGovernance.contract.WatchLogs(opts, "SettlementResult")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NodesGovernanceSettlementResult)
				if err := _NodesGovernance.contract.UnpackLog(event, "SettlementResult", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSettlementResult is a log parse operation binding the contract event 0xd51417935ddbb98970f20a5f6f9c5070ce90768d0e3bfaba49e7e2f8621debac.
//
// Solidity: event SettlementResult((uint64,uint64,uint128,address,address)[] states, uint256 totalQuota)
func (_NodesGovernance *NodesGovernanceFilterer) ParseSettlementResult(log types.Log) (*NodesGovernanceSettlementResult, error) {
	event := new(NodesGovernanceSettlementResult)
	if err := _NodesGovernance.contract.UnpackLog(event, "SettlementResult", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NodesGovernanceValidationResultIterator is returned from FilterValidationResult and is used to iterate over the raw logs and unpacked data for ValidationResult events raised by the NodesGovernance contract.
type NodesGovernanceValidationResultIterator struct {
	Event *NodesGovernanceValidationResult // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NodesGovernanceValidationResultIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NodesGovernanceValidationResult)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NodesGovernanceValidationResult)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NodesGovernanceValidationResultIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NodesGovernanceValidationResultIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NodesGovernanceValidationResult represents a ValidationResult event raised by the NodesGovernance contract.
type NodesGovernanceValidationResult struct {
	RoundId   *big.Int
	Validator common.Address
	Result    bool
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterValidationResult is a free log retrieval operation binding the contract event 0x92de7c81b7cf6c7977d7cd091ccd01996264a02b7dbbce5d2a2524a8daabe769.
//
// Solidity: event ValidationResult(uint256 roundId, address validator, bool result)
func (_NodesGovernance *NodesGovernanceFilterer) FilterValidationResult(opts *bind.FilterOpts) (*NodesGovernanceValidationResultIterator, error) {

	logs, sub, err := _NodesGovernance.contract.FilterLogs(opts, "ValidationResult")
	if err != nil {
		return nil, err
	}
	return &NodesGovernanceValidationResultIterator{contract: _NodesGovernance.contract, event: "ValidationResult", logs: logs, sub: sub}, nil
}

// WatchValidationResult is a free log subscription operation binding the contract event 0x92de7c81b7cf6c7977d7cd091ccd01996264a02b7dbbce5d2a2524a8daabe769.
//
// Solidity: event ValidationResult(uint256 roundId, address validator, bool result)
func (_NodesGovernance *NodesGovernanceFilterer) WatchValidationResult(opts *bind.WatchOpts, sink chan<- *NodesGovernanceValidationResult) (event.Subscription, error) {

	logs, sub, err := _NodesGovernance.contract.WatchLogs(opts, "ValidationResult")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NodesGovernanceValidationResult)
				if err := _NodesGovernance.contract.UnpackLog(event, "ValidationResult", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidationResult is a log parse operation binding the contract event 0x92de7c81b7cf6c7977d7cd091ccd01996264a02b7dbbce5d2a2524a8daabe769.
//
// Solidity: event ValidationResult(uint256 roundId, address validator, bool result)
func (_NodesGovernance *NodesGovernanceFilterer) ParseValidationResult(log types.Log) (*NodesGovernanceValidationResult, error) {
	event := new(NodesGovernanceValidationResult)
	if err := _NodesGovernance.contract.UnpackLog(event, "ValidationResult", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NodesGovernanceValidationStartedIterator is returned from FilterValidationStarted and is used to iterate over the raw logs and unpacked data for ValidationStarted events raised by the NodesGovernance contract.
type NodesGovernanceValidationStartedIterator struct {
	Event *NodesGovernanceValidationStarted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NodesGovernanceValidationStartedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NodesGovernanceValidationStarted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NodesGovernanceValidationStarted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NodesGovernanceValidationStartedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NodesGovernanceValidationStartedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NodesGovernanceValidationStarted represents a ValidationStarted event raised by the NodesGovernance contract.
type NodesGovernanceValidationStarted struct {
	RoundId                *big.Int
	ExpectedCompletionTime *big.Int
	Candidate              common.Address
	Validators             []common.Address
	Raw                    types.Log // Blockchain specific contextual infos
}

// FilterValidationStarted is a free log retrieval operation binding the contract event 0x71afff60b83105500984ce43d4633544224775a10de240da021704c056b58bdb.
//
// Solidity: event ValidationStarted(uint256 roundId, uint256 expectedCompletionTime, address candidate, address[] validators)
func (_NodesGovernance *NodesGovernanceFilterer) FilterValidationStarted(opts *bind.FilterOpts) (*NodesGovernanceValidationStartedIterator, error) {

	logs, sub, err := _NodesGovernance.contract.FilterLogs(opts, "ValidationStarted")
	if err != nil {
		return nil, err
	}
	return &NodesGovernanceValidationStartedIterator{contract: _NodesGovernance.contract, event: "ValidationStarted", logs: logs, sub: sub}, nil
}

// WatchValidationStarted is a free log subscription operation binding the contract event 0x71afff60b83105500984ce43d4633544224775a10de240da021704c056b58bdb.
//
// Solidity: event ValidationStarted(uint256 roundId, uint256 expectedCompletionTime, address candidate, address[] validators)
func (_NodesGovernance *NodesGovernanceFilterer) WatchValidationStarted(opts *bind.WatchOpts, sink chan<- *NodesGovernanceValidationStarted) (event.Subscription, error) {

	logs, sub, err := _NodesGovernance.contract.WatchLogs(opts, "ValidationStarted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NodesGovernanceValidationStarted)
				if err := _NodesGovernance.contract.UnpackLog(event, "ValidationStarted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidationStarted is a log parse operation binding the contract event 0x71afff60b83105500984ce43d4633544224775a10de240da021704c056b58bdb.
//
// Solidity: event ValidationStarted(uint256 roundId, uint256 expectedCompletionTime, address candidate, address[] validators)
func (_NodesGovernance *NodesGovernanceFilterer) ParseValidationStarted(log types.Log) (*NodesGovernanceValidationStarted, error) {
	event := new(NodesGovernanceValidationStarted)
	if err := _NodesGovernance.contract.UnpackLog(event, "ValidationStarted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
