// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package NodesRegistryImpl

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// NodeComputeUsed is an auto generated low-level Go binding around an user-defined struct.
type NodeComputeUsed struct {
	Identifier common.Address
	GpuType    string
	Used       *big.Int
}

// NodesRegistryComputeAvailable is an auto generated low-level Go binding around an user-defined struct.
type NodesRegistryComputeAvailable struct {
	GpuType  string
	TotalNum *big.Int
	Used     *big.Int
}

// NodesRegistryNode is an auto generated low-level Go binding around an user-defined struct.
type NodesRegistryNode struct {
	Identifier       common.Address
	AliasIdentifier  string
	RegistrationTime *big.Int
	Active           bool
	Gpus             []NodesRegistryComputeAvailable
	Wallet           common.Address
	Stake            *big.Int
}

// NodesRegistryImplMetaData contains all meta data concerning the NodesRegistryImpl contract.
var NodesRegistryImplMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"Authorized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"identifier\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"aliasIdentifier\",\"type\":\"string\"}],\"name\":\"NodeActived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"identifier\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"aliasIdentifier\",\"type\":\"string\"}],\"name\":\"NodeDeregistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"identifier\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"aliasIdentifier\",\"type\":\"string\"}],\"name\":\"NodeRegistered\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startIndex\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"gpuTypes\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"gpuNums\",\"type\":\"uint256[]\"}],\"name\":\"allocGPU\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"identifier\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"gpuType\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"used\",\"type\":\"uint256\"}],\"internalType\":\"structNodeComputeUsed[]\",\"name\":\"gpuNodes\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"len\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allocator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"authorizedPerson\",\"type\":\"address\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"at\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"identifier\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"aliasIdentifier\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"registrationTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"gpuType\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"used\",\"type\":\"uint256\"}],\"internalType\":\"structNodesRegistry.ComputeAvailable[]\",\"name\":\"gpus\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"}],\"internalType\":\"structNodesRegistry.Node\",\"name\":\"node\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"identifier\",\"type\":\"address\"}],\"name\":\"check\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deregisterNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"authorizer\",\"type\":\"address\"}],\"name\":\"deregisterNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"identifier\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"gpuType\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"used\",\"type\":\"uint256\"}],\"internalType\":\"structNodeComputeUsed[]\",\"name\":\"gpuNodes\",\"type\":\"tuple[]\"}],\"name\":\"freeGPU\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"identifier\",\"type\":\"address\"}],\"name\":\"get\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"identifier\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"aliasIdentifier\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"registrationTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"gpuType\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"used\",\"type\":\"uint256\"}],\"internalType\":\"structNodesRegistry.ComputeAvailable[]\",\"name\":\"gpus\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"}],\"internalType\":\"structNodesRegistry.Node\",\"name\":\"node\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"gpuSummary\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"gpuType\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"used\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"gpuTypeOfNodes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"length\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_identifiers\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"_aliasIdentifiers\",\"type\":\"string[]\"},{\"internalType\":\"address[]\",\"name\":\"_wallets\",\"type\":\"address[]\"},{\"internalType\":\"string[][]\",\"name\":\"_gpuTypes\",\"type\":\"string[][]\"},{\"internalType\":\"uint256[][]\",\"name\":\"_gpuNums\",\"type\":\"uint256[][]\"},{\"internalType\":\"address\",\"name\":\"_allocator\",\"type\":\"address\"}],\"name\":\"nodesRegistryImpl_initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"aliasIdentifier\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"gpuTypes\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"gpuNums\",\"type\":\"uint256[]\"}],\"name\":\"registerNode\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]",
	Bin: "",
}

// NodesRegistryImplABI is the input ABI used to generate the binding from.
// Deprecated: Use NodesRegistryImplMetaData.ABI instead.
var NodesRegistryImplABI = NodesRegistryImplMetaData.ABI

// NodesRegistryImplBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use NodesRegistryImplMetaData.Bin instead.
var NodesRegistryImplBin = NodesRegistryImplMetaData.Bin

// DeployNodesRegistryImpl deploys a new Ethereum contract, binding an instance of NodesRegistryImpl to it.
func DeployNodesRegistryImpl(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *NodesRegistryImpl, error) {
	parsed, err := NodesRegistryImplMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(NodesRegistryImplBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &NodesRegistryImpl{NodesRegistryImplCaller: NodesRegistryImplCaller{contract: contract}, NodesRegistryImplTransactor: NodesRegistryImplTransactor{contract: contract}, NodesRegistryImplFilterer: NodesRegistryImplFilterer{contract: contract}}, nil
}

// NodesRegistryImpl is an auto generated Go binding around an Ethereum contract.
type NodesRegistryImpl struct {
	NodesRegistryImplCaller     // Read-only binding to the contract
	NodesRegistryImplTransactor // Write-only binding to the contract
	NodesRegistryImplFilterer   // Log filterer for contract events
}

// NodesRegistryImplCaller is an auto generated read-only Go binding around an Ethereum contract.
type NodesRegistryImplCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NodesRegistryImplTransactor is an auto generated write-only Go binding around an Ethereum contract.
type NodesRegistryImplTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NodesRegistryImplFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type NodesRegistryImplFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NodesRegistryImplSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type NodesRegistryImplSession struct {
	Contract     *NodesRegistryImpl // Generic contract binding to set the session for
	CallOpts     bind.CallOpts      // Call options to use throughout this session
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// NodesRegistryImplCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type NodesRegistryImplCallerSession struct {
	Contract *NodesRegistryImplCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts            // Call options to use throughout this session
}

// NodesRegistryImplTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type NodesRegistryImplTransactorSession struct {
	Contract     *NodesRegistryImplTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts            // Transaction auth options to use throughout this session
}

// NodesRegistryImplRaw is an auto generated low-level Go binding around an Ethereum contract.
type NodesRegistryImplRaw struct {
	Contract *NodesRegistryImpl // Generic contract binding to access the raw methods on
}

// NodesRegistryImplCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type NodesRegistryImplCallerRaw struct {
	Contract *NodesRegistryImplCaller // Generic read-only contract binding to access the raw methods on
}

// NodesRegistryImplTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type NodesRegistryImplTransactorRaw struct {
	Contract *NodesRegistryImplTransactor // Generic write-only contract binding to access the raw methods on
}

// NewNodesRegistryImpl creates a new instance of NodesRegistryImpl, bound to a specific deployed contract.
func NewNodesRegistryImpl(address common.Address, backend bind.ContractBackend) (*NodesRegistryImpl, error) {
	contract, err := bindNodesRegistryImpl(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &NodesRegistryImpl{NodesRegistryImplCaller: NodesRegistryImplCaller{contract: contract}, NodesRegistryImplTransactor: NodesRegistryImplTransactor{contract: contract}, NodesRegistryImplFilterer: NodesRegistryImplFilterer{contract: contract}}, nil
}

// NewNodesRegistryImplCaller creates a new read-only instance of NodesRegistryImpl, bound to a specific deployed contract.
func NewNodesRegistryImplCaller(address common.Address, caller bind.ContractCaller) (*NodesRegistryImplCaller, error) {
	contract, err := bindNodesRegistryImpl(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &NodesRegistryImplCaller{contract: contract}, nil
}

// NewNodesRegistryImplTransactor creates a new write-only instance of NodesRegistryImpl, bound to a specific deployed contract.
func NewNodesRegistryImplTransactor(address common.Address, transactor bind.ContractTransactor) (*NodesRegistryImplTransactor, error) {
	contract, err := bindNodesRegistryImpl(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &NodesRegistryImplTransactor{contract: contract}, nil
}

// NewNodesRegistryImplFilterer creates a new log filterer instance of NodesRegistryImpl, bound to a specific deployed contract.
func NewNodesRegistryImplFilterer(address common.Address, filterer bind.ContractFilterer) (*NodesRegistryImplFilterer, error) {
	contract, err := bindNodesRegistryImpl(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &NodesRegistryImplFilterer{contract: contract}, nil
}

// bindNodesRegistryImpl binds a generic wrapper to an already deployed contract.
func bindNodesRegistryImpl(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := NodesRegistryImplMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_NodesRegistryImpl *NodesRegistryImplRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _NodesRegistryImpl.Contract.NodesRegistryImplCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_NodesRegistryImpl *NodesRegistryImplRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _NodesRegistryImpl.Contract.NodesRegistryImplTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_NodesRegistryImpl *NodesRegistryImplRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _NodesRegistryImpl.Contract.NodesRegistryImplTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_NodesRegistryImpl *NodesRegistryImplCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _NodesRegistryImpl.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_NodesRegistryImpl *NodesRegistryImplTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _NodesRegistryImpl.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_NodesRegistryImpl *NodesRegistryImplTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _NodesRegistryImpl.Contract.contract.Transact(opts, method, params...)
}

// Allocator is a free data retrieval call binding the contract method 0xaa5dcecc.
//
// Solidity: function allocator() view returns(address)
func (_NodesRegistryImpl *NodesRegistryImplCaller) Allocator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _NodesRegistryImpl.contract.Call(opts, &out, "allocator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Allocator is a free data retrieval call binding the contract method 0xaa5dcecc.
//
// Solidity: function allocator() view returns(address)
func (_NodesRegistryImpl *NodesRegistryImplSession) Allocator() (common.Address, error) {
	return _NodesRegistryImpl.Contract.Allocator(&_NodesRegistryImpl.CallOpts)
}

// Allocator is a free data retrieval call binding the contract method 0xaa5dcecc.
//
// Solidity: function allocator() view returns(address)
func (_NodesRegistryImpl *NodesRegistryImplCallerSession) Allocator() (common.Address, error) {
	return _NodesRegistryImpl.Contract.Allocator(&_NodesRegistryImpl.CallOpts)
}

// At is a free data retrieval call binding the contract method 0xe0886f90.
//
// Solidity: function at(uint256 index) view returns((address,string,uint256,bool,(string,uint256,uint256)[],address,uint256) node)
func (_NodesRegistryImpl *NodesRegistryImplCaller) At(opts *bind.CallOpts, index *big.Int) (NodesRegistryNode, error) {
	var out []interface{}
	err := _NodesRegistryImpl.contract.Call(opts, &out, "at", index)

	if err != nil {
		return *new(NodesRegistryNode), err
	}

	out0 := *abi.ConvertType(out[0], new(NodesRegistryNode)).(*NodesRegistryNode)

	return out0, err

}

// At is a free data retrieval call binding the contract method 0xe0886f90.
//
// Solidity: function at(uint256 index) view returns((address,string,uint256,bool,(string,uint256,uint256)[],address,uint256) node)
func (_NodesRegistryImpl *NodesRegistryImplSession) At(index *big.Int) (NodesRegistryNode, error) {
	return _NodesRegistryImpl.Contract.At(&_NodesRegistryImpl.CallOpts, index)
}

// At is a free data retrieval call binding the contract method 0xe0886f90.
//
// Solidity: function at(uint256 index) view returns((address,string,uint256,bool,(string,uint256,uint256)[],address,uint256) node)
func (_NodesRegistryImpl *NodesRegistryImplCallerSession) At(index *big.Int) (NodesRegistryNode, error) {
	return _NodesRegistryImpl.Contract.At(&_NodesRegistryImpl.CallOpts, index)
}

// Check is a free data retrieval call binding the contract method 0xc23697a8.
//
// Solidity: function check(address identifier) view returns(bool)
func (_NodesRegistryImpl *NodesRegistryImplCaller) Check(opts *bind.CallOpts, identifier common.Address) (bool, error) {
	var out []interface{}
	err := _NodesRegistryImpl.contract.Call(opts, &out, "check", identifier)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Check is a free data retrieval call binding the contract method 0xc23697a8.
//
// Solidity: function check(address identifier) view returns(bool)
func (_NodesRegistryImpl *NodesRegistryImplSession) Check(identifier common.Address) (bool, error) {
	return _NodesRegistryImpl.Contract.Check(&_NodesRegistryImpl.CallOpts, identifier)
}

// Check is a free data retrieval call binding the contract method 0xc23697a8.
//
// Solidity: function check(address identifier) view returns(bool)
func (_NodesRegistryImpl *NodesRegistryImplCallerSession) Check(identifier common.Address) (bool, error) {
	return _NodesRegistryImpl.Contract.Check(&_NodesRegistryImpl.CallOpts, identifier)
}

// Get is a free data retrieval call binding the contract method 0xc2bc2efc.
//
// Solidity: function get(address identifier) view returns((address,string,uint256,bool,(string,uint256,uint256)[],address,uint256) node)
func (_NodesRegistryImpl *NodesRegistryImplCaller) Get(opts *bind.CallOpts, identifier common.Address) (NodesRegistryNode, error) {
	var out []interface{}
	err := _NodesRegistryImpl.contract.Call(opts, &out, "get", identifier)

	if err != nil {
		return *new(NodesRegistryNode), err
	}

	out0 := *abi.ConvertType(out[0], new(NodesRegistryNode)).(*NodesRegistryNode)

	return out0, err

}

// Get is a free data retrieval call binding the contract method 0xc2bc2efc.
//
// Solidity: function get(address identifier) view returns((address,string,uint256,bool,(string,uint256,uint256)[],address,uint256) node)
func (_NodesRegistryImpl *NodesRegistryImplSession) Get(identifier common.Address) (NodesRegistryNode, error) {
	return _NodesRegistryImpl.Contract.Get(&_NodesRegistryImpl.CallOpts, identifier)
}

// Get is a free data retrieval call binding the contract method 0xc2bc2efc.
//
// Solidity: function get(address identifier) view returns((address,string,uint256,bool,(string,uint256,uint256)[],address,uint256) node)
func (_NodesRegistryImpl *NodesRegistryImplCallerSession) Get(identifier common.Address) (NodesRegistryNode, error) {
	return _NodesRegistryImpl.Contract.Get(&_NodesRegistryImpl.CallOpts, identifier)
}

// GpuSummary is a free data retrieval call binding the contract method 0xf67c5bdc.
//
// Solidity: function gpuSummary(string ) view returns(string gpuType, uint256 totalNum, uint256 used)
func (_NodesRegistryImpl *NodesRegistryImplCaller) GpuSummary(opts *bind.CallOpts, arg0 string) (struct {
	GpuType  string
	TotalNum *big.Int
	Used     *big.Int
}, error) {
	var out []interface{}
	err := _NodesRegistryImpl.contract.Call(opts, &out, "gpuSummary", arg0)

	outstruct := new(struct {
		GpuType  string
		TotalNum *big.Int
		Used     *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.GpuType = *abi.ConvertType(out[0], new(string)).(*string)
	outstruct.TotalNum = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.Used = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// GpuSummary is a free data retrieval call binding the contract method 0xf67c5bdc.
//
// Solidity: function gpuSummary(string ) view returns(string gpuType, uint256 totalNum, uint256 used)
func (_NodesRegistryImpl *NodesRegistryImplSession) GpuSummary(arg0 string) (struct {
	GpuType  string
	TotalNum *big.Int
	Used     *big.Int
}, error) {
	return _NodesRegistryImpl.Contract.GpuSummary(&_NodesRegistryImpl.CallOpts, arg0)
}

// GpuSummary is a free data retrieval call binding the contract method 0xf67c5bdc.
//
// Solidity: function gpuSummary(string ) view returns(string gpuType, uint256 totalNum, uint256 used)
func (_NodesRegistryImpl *NodesRegistryImplCallerSession) GpuSummary(arg0 string) (struct {
	GpuType  string
	TotalNum *big.Int
	Used     *big.Int
}, error) {
	return _NodesRegistryImpl.Contract.GpuSummary(&_NodesRegistryImpl.CallOpts, arg0)
}

// GpuTypeOfNodes is a free data retrieval call binding the contract method 0xed38ed0d.
//
// Solidity: function gpuTypeOfNodes(address , string ) view returns(uint256)
func (_NodesRegistryImpl *NodesRegistryImplCaller) GpuTypeOfNodes(opts *bind.CallOpts, arg0 common.Address, arg1 string) (*big.Int, error) {
	var out []interface{}
	err := _NodesRegistryImpl.contract.Call(opts, &out, "gpuTypeOfNodes", arg0, arg1)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GpuTypeOfNodes is a free data retrieval call binding the contract method 0xed38ed0d.
//
// Solidity: function gpuTypeOfNodes(address , string ) view returns(uint256)
func (_NodesRegistryImpl *NodesRegistryImplSession) GpuTypeOfNodes(arg0 common.Address, arg1 string) (*big.Int, error) {
	return _NodesRegistryImpl.Contract.GpuTypeOfNodes(&_NodesRegistryImpl.CallOpts, arg0, arg1)
}

// GpuTypeOfNodes is a free data retrieval call binding the contract method 0xed38ed0d.
//
// Solidity: function gpuTypeOfNodes(address , string ) view returns(uint256)
func (_NodesRegistryImpl *NodesRegistryImplCallerSession) GpuTypeOfNodes(arg0 common.Address, arg1 string) (*big.Int, error) {
	return _NodesRegistryImpl.Contract.GpuTypeOfNodes(&_NodesRegistryImpl.CallOpts, arg0, arg1)
}

// Length is a free data retrieval call binding the contract method 0x1f7b6d32.
//
// Solidity: function length() view returns(uint256)
func (_NodesRegistryImpl *NodesRegistryImplCaller) Length(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _NodesRegistryImpl.contract.Call(opts, &out, "length")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Length is a free data retrieval call binding the contract method 0x1f7b6d32.
//
// Solidity: function length() view returns(uint256)
func (_NodesRegistryImpl *NodesRegistryImplSession) Length() (*big.Int, error) {
	return _NodesRegistryImpl.Contract.Length(&_NodesRegistryImpl.CallOpts)
}

// Length is a free data retrieval call binding the contract method 0x1f7b6d32.
//
// Solidity: function length() view returns(uint256)
func (_NodesRegistryImpl *NodesRegistryImplCallerSession) Length() (*big.Int, error) {
	return _NodesRegistryImpl.Contract.Length(&_NodesRegistryImpl.CallOpts)
}

// AllocGPU is a paid mutator transaction binding the contract method 0x6252e1c2.
//
// Solidity: function allocGPU(uint256 startIndex, string[] gpuTypes, uint256[] gpuNums) returns((address,string,uint256)[] gpuNodes, uint256 len)
func (_NodesRegistryImpl *NodesRegistryImplTransactor) AllocGPU(opts *bind.TransactOpts, startIndex *big.Int, gpuTypes []string, gpuNums []*big.Int) (*types.Transaction, error) {
	return _NodesRegistryImpl.contract.Transact(opts, "allocGPU", startIndex, gpuTypes, gpuNums)
}

// AllocGPU is a paid mutator transaction binding the contract method 0x6252e1c2.
//
// Solidity: function allocGPU(uint256 startIndex, string[] gpuTypes, uint256[] gpuNums) returns((address,string,uint256)[] gpuNodes, uint256 len)
func (_NodesRegistryImpl *NodesRegistryImplSession) AllocGPU(startIndex *big.Int, gpuTypes []string, gpuNums []*big.Int) (*types.Transaction, error) {
	return _NodesRegistryImpl.Contract.AllocGPU(&_NodesRegistryImpl.TransactOpts, startIndex, gpuTypes, gpuNums)
}

// AllocGPU is a paid mutator transaction binding the contract method 0x6252e1c2.
//
// Solidity: function allocGPU(uint256 startIndex, string[] gpuTypes, uint256[] gpuNums) returns((address,string,uint256)[] gpuNodes, uint256 len)
func (_NodesRegistryImpl *NodesRegistryImplTransactorSession) AllocGPU(startIndex *big.Int, gpuTypes []string, gpuNums []*big.Int) (*types.Transaction, error) {
	return _NodesRegistryImpl.Contract.AllocGPU(&_NodesRegistryImpl.TransactOpts, startIndex, gpuTypes, gpuNums)
}

// Approve is a paid mutator transaction binding the contract method 0xdaea85c5.
//
// Solidity: function approve(address authorizedPerson) returns(bool)
func (_NodesRegistryImpl *NodesRegistryImplTransactor) Approve(opts *bind.TransactOpts, authorizedPerson common.Address) (*types.Transaction, error) {
	return _NodesRegistryImpl.contract.Transact(opts, "approve", authorizedPerson)
}

// Approve is a paid mutator transaction binding the contract method 0xdaea85c5.
//
// Solidity: function approve(address authorizedPerson) returns(bool)
func (_NodesRegistryImpl *NodesRegistryImplSession) Approve(authorizedPerson common.Address) (*types.Transaction, error) {
	return _NodesRegistryImpl.Contract.Approve(&_NodesRegistryImpl.TransactOpts, authorizedPerson)
}

// Approve is a paid mutator transaction binding the contract method 0xdaea85c5.
//
// Solidity: function approve(address authorizedPerson) returns(bool)
func (_NodesRegistryImpl *NodesRegistryImplTransactorSession) Approve(authorizedPerson common.Address) (*types.Transaction, error) {
	return _NodesRegistryImpl.Contract.Approve(&_NodesRegistryImpl.TransactOpts, authorizedPerson)
}

// DeregisterNode is a paid mutator transaction binding the contract method 0x18b1c081.
//
// Solidity: function deregisterNode() returns()
func (_NodesRegistryImpl *NodesRegistryImplTransactor) DeregisterNode(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _NodesRegistryImpl.contract.Transact(opts, "deregisterNode")
}

// DeregisterNode is a paid mutator transaction binding the contract method 0x18b1c081.
//
// Solidity: function deregisterNode() returns()
func (_NodesRegistryImpl *NodesRegistryImplSession) DeregisterNode() (*types.Transaction, error) {
	return _NodesRegistryImpl.Contract.DeregisterNode(&_NodesRegistryImpl.TransactOpts)
}

// DeregisterNode is a paid mutator transaction binding the contract method 0x18b1c081.
//
// Solidity: function deregisterNode() returns()
func (_NodesRegistryImpl *NodesRegistryImplTransactorSession) DeregisterNode() (*types.Transaction, error) {
	return _NodesRegistryImpl.Contract.DeregisterNode(&_NodesRegistryImpl.TransactOpts)
}

// DeregisterNode0 is a paid mutator transaction binding the contract method 0xe7658aaf.
//
// Solidity: function deregisterNode(address authorizer) returns()
func (_NodesRegistryImpl *NodesRegistryImplTransactor) DeregisterNode0(opts *bind.TransactOpts, authorizer common.Address) (*types.Transaction, error) {
	return _NodesRegistryImpl.contract.Transact(opts, "deregisterNode0", authorizer)
}

// DeregisterNode0 is a paid mutator transaction binding the contract method 0xe7658aaf.
//
// Solidity: function deregisterNode(address authorizer) returns()
func (_NodesRegistryImpl *NodesRegistryImplSession) DeregisterNode0(authorizer common.Address) (*types.Transaction, error) {
	return _NodesRegistryImpl.Contract.DeregisterNode0(&_NodesRegistryImpl.TransactOpts, authorizer)
}

// DeregisterNode0 is a paid mutator transaction binding the contract method 0xe7658aaf.
//
// Solidity: function deregisterNode(address authorizer) returns()
func (_NodesRegistryImpl *NodesRegistryImplTransactorSession) DeregisterNode0(authorizer common.Address) (*types.Transaction, error) {
	return _NodesRegistryImpl.Contract.DeregisterNode0(&_NodesRegistryImpl.TransactOpts, authorizer)
}

// FreeGPU is a paid mutator transaction binding the contract method 0x036fe9c2.
//
// Solidity: function freeGPU((address,string,uint256)[] gpuNodes) returns()
func (_NodesRegistryImpl *NodesRegistryImplTransactor) FreeGPU(opts *bind.TransactOpts, gpuNodes []NodeComputeUsed) (*types.Transaction, error) {
	return _NodesRegistryImpl.contract.Transact(opts, "freeGPU", gpuNodes)
}

// FreeGPU is a paid mutator transaction binding the contract method 0x036fe9c2.
//
// Solidity: function freeGPU((address,string,uint256)[] gpuNodes) returns()
func (_NodesRegistryImpl *NodesRegistryImplSession) FreeGPU(gpuNodes []NodeComputeUsed) (*types.Transaction, error) {
	return _NodesRegistryImpl.Contract.FreeGPU(&_NodesRegistryImpl.TransactOpts, gpuNodes)
}

// FreeGPU is a paid mutator transaction binding the contract method 0x036fe9c2.
//
// Solidity: function freeGPU((address,string,uint256)[] gpuNodes) returns()
func (_NodesRegistryImpl *NodesRegistryImplTransactorSession) FreeGPU(gpuNodes []NodeComputeUsed) (*types.Transaction, error) {
	return _NodesRegistryImpl.Contract.FreeGPU(&_NodesRegistryImpl.TransactOpts, gpuNodes)
}

// NodesRegistryImplInitialize is a paid mutator transaction binding the contract method 0xd154e6dc.
//
// Solidity: function nodesRegistryImpl_initialize(address[] _identifiers, string[] _aliasIdentifiers, address[] _wallets, string[][] _gpuTypes, uint256[][] _gpuNums, address _allocator) returns()
func (_NodesRegistryImpl *NodesRegistryImplTransactor) NodesRegistryImplInitialize(opts *bind.TransactOpts, _identifiers []common.Address, _aliasIdentifiers []string, _wallets []common.Address, _gpuTypes [][]string, _gpuNums [][]*big.Int, _allocator common.Address) (*types.Transaction, error) {
	return _NodesRegistryImpl.contract.Transact(opts, "nodesRegistryImpl_initialize", _identifiers, _aliasIdentifiers, _wallets, _gpuTypes, _gpuNums, _allocator)
}

// NodesRegistryImplInitialize is a paid mutator transaction binding the contract method 0xd154e6dc.
//
// Solidity: function nodesRegistryImpl_initialize(address[] _identifiers, string[] _aliasIdentifiers, address[] _wallets, string[][] _gpuTypes, uint256[][] _gpuNums, address _allocator) returns()
func (_NodesRegistryImpl *NodesRegistryImplSession) NodesRegistryImplInitialize(_identifiers []common.Address, _aliasIdentifiers []string, _wallets []common.Address, _gpuTypes [][]string, _gpuNums [][]*big.Int, _allocator common.Address) (*types.Transaction, error) {
	return _NodesRegistryImpl.Contract.NodesRegistryImplInitialize(&_NodesRegistryImpl.TransactOpts, _identifiers, _aliasIdentifiers, _wallets, _gpuTypes, _gpuNums, _allocator)
}

// NodesRegistryImplInitialize is a paid mutator transaction binding the contract method 0xd154e6dc.
//
// Solidity: function nodesRegistryImpl_initialize(address[] _identifiers, string[] _aliasIdentifiers, address[] _wallets, string[][] _gpuTypes, uint256[][] _gpuNums, address _allocator) returns()
func (_NodesRegistryImpl *NodesRegistryImplTransactorSession) NodesRegistryImplInitialize(_identifiers []common.Address, _aliasIdentifiers []string, _wallets []common.Address, _gpuTypes [][]string, _gpuNums [][]*big.Int, _allocator common.Address) (*types.Transaction, error) {
	return _NodesRegistryImpl.Contract.NodesRegistryImplInitialize(&_NodesRegistryImpl.TransactOpts, _identifiers, _aliasIdentifiers, _wallets, _gpuTypes, _gpuNums, _allocator)
}

// RegisterNode is a paid mutator transaction binding the contract method 0xefca74d2.
//
// Solidity: function registerNode(address wallet, string aliasIdentifier, string[] gpuTypes, uint256[] gpuNums) payable returns()
func (_NodesRegistryImpl *NodesRegistryImplTransactor) RegisterNode(opts *bind.TransactOpts, wallet common.Address, aliasIdentifier string, gpuTypes []string, gpuNums []*big.Int) (*types.Transaction, error) {
	return _NodesRegistryImpl.contract.Transact(opts, "registerNode", wallet, aliasIdentifier, gpuTypes, gpuNums)
}

// RegisterNode is a paid mutator transaction binding the contract method 0xefca74d2.
//
// Solidity: function registerNode(address wallet, string aliasIdentifier, string[] gpuTypes, uint256[] gpuNums) payable returns()
func (_NodesRegistryImpl *NodesRegistryImplSession) RegisterNode(wallet common.Address, aliasIdentifier string, gpuTypes []string, gpuNums []*big.Int) (*types.Transaction, error) {
	return _NodesRegistryImpl.Contract.RegisterNode(&_NodesRegistryImpl.TransactOpts, wallet, aliasIdentifier, gpuTypes, gpuNums)
}

// RegisterNode is a paid mutator transaction binding the contract method 0xefca74d2.
//
// Solidity: function registerNode(address wallet, string aliasIdentifier, string[] gpuTypes, uint256[] gpuNums) payable returns()
func (_NodesRegistryImpl *NodesRegistryImplTransactorSession) RegisterNode(wallet common.Address, aliasIdentifier string, gpuTypes []string, gpuNums []*big.Int) (*types.Transaction, error) {
	return _NodesRegistryImpl.Contract.RegisterNode(&_NodesRegistryImpl.TransactOpts, wallet, aliasIdentifier, gpuTypes, gpuNums)
}

// NodesRegistryImplAuthorizedIterator is returned from FilterAuthorized and is used to iterate over the raw logs and unpacked data for Authorized events raised by the NodesRegistryImpl contract.
type NodesRegistryImplAuthorizedIterator struct {
	Event *NodesRegistryImplAuthorized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NodesRegistryImplAuthorizedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NodesRegistryImplAuthorized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NodesRegistryImplAuthorized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NodesRegistryImplAuthorizedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NodesRegistryImplAuthorizedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NodesRegistryImplAuthorized represents a Authorized event raised by the NodesRegistryImpl contract.
type NodesRegistryImplAuthorized struct {
	Owner   common.Address
	Spender common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterAuthorized is a free log retrieval operation binding the contract event 0xf5a7f4fb8a92356e8c8c4ae7ac3589908381450500a7e2fd08c95600021ee889.
//
// Solidity: event Authorized(address indexed owner, address indexed spender)
func (_NodesRegistryImpl *NodesRegistryImplFilterer) FilterAuthorized(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*NodesRegistryImplAuthorizedIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _NodesRegistryImpl.contract.FilterLogs(opts, "Authorized", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &NodesRegistryImplAuthorizedIterator{contract: _NodesRegistryImpl.contract, event: "Authorized", logs: logs, sub: sub}, nil
}

// WatchAuthorized is a free log subscription operation binding the contract event 0xf5a7f4fb8a92356e8c8c4ae7ac3589908381450500a7e2fd08c95600021ee889.
//
// Solidity: event Authorized(address indexed owner, address indexed spender)
func (_NodesRegistryImpl *NodesRegistryImplFilterer) WatchAuthorized(opts *bind.WatchOpts, sink chan<- *NodesRegistryImplAuthorized, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _NodesRegistryImpl.contract.WatchLogs(opts, "Authorized", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NodesRegistryImplAuthorized)
				if err := _NodesRegistryImpl.contract.UnpackLog(event, "Authorized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAuthorized is a log parse operation binding the contract event 0xf5a7f4fb8a92356e8c8c4ae7ac3589908381450500a7e2fd08c95600021ee889.
//
// Solidity: event Authorized(address indexed owner, address indexed spender)
func (_NodesRegistryImpl *NodesRegistryImplFilterer) ParseAuthorized(log types.Log) (*NodesRegistryImplAuthorized, error) {
	event := new(NodesRegistryImplAuthorized)
	if err := _NodesRegistryImpl.contract.UnpackLog(event, "Authorized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NodesRegistryImplNodeActivedIterator is returned from FilterNodeActived and is used to iterate over the raw logs and unpacked data for NodeActived events raised by the NodesRegistryImpl contract.
type NodesRegistryImplNodeActivedIterator struct {
	Event *NodesRegistryImplNodeActived // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NodesRegistryImplNodeActivedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NodesRegistryImplNodeActived)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NodesRegistryImplNodeActived)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NodesRegistryImplNodeActivedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NodesRegistryImplNodeActivedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NodesRegistryImplNodeActived represents a NodeActived event raised by the NodesRegistryImpl contract.
type NodesRegistryImplNodeActived struct {
	Wallet          common.Address
	Identifier      common.Address
	Time            *big.Int
	AliasIdentifier string
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterNodeActived is a free log retrieval operation binding the contract event 0x25cdb56344c72b35eff48499be35553cea1cf3ee21c613692d20ea5a5c539e37.
//
// Solidity: event NodeActived(address indexed wallet, address identifier, uint256 time, string aliasIdentifier)
func (_NodesRegistryImpl *NodesRegistryImplFilterer) FilterNodeActived(opts *bind.FilterOpts, wallet []common.Address) (*NodesRegistryImplNodeActivedIterator, error) {

	var walletRule []interface{}
	for _, walletItem := range wallet {
		walletRule = append(walletRule, walletItem)
	}

	logs, sub, err := _NodesRegistryImpl.contract.FilterLogs(opts, "NodeActived", walletRule)
	if err != nil {
		return nil, err
	}
	return &NodesRegistryImplNodeActivedIterator{contract: _NodesRegistryImpl.contract, event: "NodeActived", logs: logs, sub: sub}, nil
}

// WatchNodeActived is a free log subscription operation binding the contract event 0x25cdb56344c72b35eff48499be35553cea1cf3ee21c613692d20ea5a5c539e37.
//
// Solidity: event NodeActived(address indexed wallet, address identifier, uint256 time, string aliasIdentifier)
func (_NodesRegistryImpl *NodesRegistryImplFilterer) WatchNodeActived(opts *bind.WatchOpts, sink chan<- *NodesRegistryImplNodeActived, wallet []common.Address) (event.Subscription, error) {

	var walletRule []interface{}
	for _, walletItem := range wallet {
		walletRule = append(walletRule, walletItem)
	}

	logs, sub, err := _NodesRegistryImpl.contract.WatchLogs(opts, "NodeActived", walletRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NodesRegistryImplNodeActived)
				if err := _NodesRegistryImpl.contract.UnpackLog(event, "NodeActived", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNodeActived is a log parse operation binding the contract event 0x25cdb56344c72b35eff48499be35553cea1cf3ee21c613692d20ea5a5c539e37.
//
// Solidity: event NodeActived(address indexed wallet, address identifier, uint256 time, string aliasIdentifier)
func (_NodesRegistryImpl *NodesRegistryImplFilterer) ParseNodeActived(log types.Log) (*NodesRegistryImplNodeActived, error) {
	event := new(NodesRegistryImplNodeActived)
	if err := _NodesRegistryImpl.contract.UnpackLog(event, "NodeActived", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NodesRegistryImplNodeDeregisteredIterator is returned from FilterNodeDeregistered and is used to iterate over the raw logs and unpacked data for NodeDeregistered events raised by the NodesRegistryImpl contract.
type NodesRegistryImplNodeDeregisteredIterator struct {
	Event *NodesRegistryImplNodeDeregistered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NodesRegistryImplNodeDeregisteredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NodesRegistryImplNodeDeregistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NodesRegistryImplNodeDeregistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NodesRegistryImplNodeDeregisteredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NodesRegistryImplNodeDeregisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NodesRegistryImplNodeDeregistered represents a NodeDeregistered event raised by the NodesRegistryImpl contract.
type NodesRegistryImplNodeDeregistered struct {
	Identifier      common.Address
	Time            *big.Int
	AliasIdentifier string
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterNodeDeregistered is a free log retrieval operation binding the contract event 0x60d01d146c7aa1a7d4e3fdd5543872f7d5b2a241980a66b3552ae1a86ae18453.
//
// Solidity: event NodeDeregistered(address indexed identifier, uint256 time, string aliasIdentifier)
func (_NodesRegistryImpl *NodesRegistryImplFilterer) FilterNodeDeregistered(opts *bind.FilterOpts, identifier []common.Address) (*NodesRegistryImplNodeDeregisteredIterator, error) {

	var identifierRule []interface{}
	for _, identifierItem := range identifier {
		identifierRule = append(identifierRule, identifierItem)
	}

	logs, sub, err := _NodesRegistryImpl.contract.FilterLogs(opts, "NodeDeregistered", identifierRule)
	if err != nil {
		return nil, err
	}
	return &NodesRegistryImplNodeDeregisteredIterator{contract: _NodesRegistryImpl.contract, event: "NodeDeregistered", logs: logs, sub: sub}, nil
}

// WatchNodeDeregistered is a free log subscription operation binding the contract event 0x60d01d146c7aa1a7d4e3fdd5543872f7d5b2a241980a66b3552ae1a86ae18453.
//
// Solidity: event NodeDeregistered(address indexed identifier, uint256 time, string aliasIdentifier)
func (_NodesRegistryImpl *NodesRegistryImplFilterer) WatchNodeDeregistered(opts *bind.WatchOpts, sink chan<- *NodesRegistryImplNodeDeregistered, identifier []common.Address) (event.Subscription, error) {

	var identifierRule []interface{}
	for _, identifierItem := range identifier {
		identifierRule = append(identifierRule, identifierItem)
	}

	logs, sub, err := _NodesRegistryImpl.contract.WatchLogs(opts, "NodeDeregistered", identifierRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NodesRegistryImplNodeDeregistered)
				if err := _NodesRegistryImpl.contract.UnpackLog(event, "NodeDeregistered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNodeDeregistered is a log parse operation binding the contract event 0x60d01d146c7aa1a7d4e3fdd5543872f7d5b2a241980a66b3552ae1a86ae18453.
//
// Solidity: event NodeDeregistered(address indexed identifier, uint256 time, string aliasIdentifier)
func (_NodesRegistryImpl *NodesRegistryImplFilterer) ParseNodeDeregistered(log types.Log) (*NodesRegistryImplNodeDeregistered, error) {
	event := new(NodesRegistryImplNodeDeregistered)
	if err := _NodesRegistryImpl.contract.UnpackLog(event, "NodeDeregistered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NodesRegistryImplNodeRegisteredIterator is returned from FilterNodeRegistered and is used to iterate over the raw logs and unpacked data for NodeRegistered events raised by the NodesRegistryImpl contract.
type NodesRegistryImplNodeRegisteredIterator struct {
	Event *NodesRegistryImplNodeRegistered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NodesRegistryImplNodeRegisteredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NodesRegistryImplNodeRegistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NodesRegistryImplNodeRegistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NodesRegistryImplNodeRegisteredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NodesRegistryImplNodeRegisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NodesRegistryImplNodeRegistered represents a NodeRegistered event raised by the NodesRegistryImpl contract.
type NodesRegistryImplNodeRegistered struct {
	Wallet          common.Address
	Identifier      common.Address
	Time            *big.Int
	AliasIdentifier string
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterNodeRegistered is a free log retrieval operation binding the contract event 0x0b464c895406310478ed7e414061d7621fd5f7444d7618e96d7fbb917a51f302.
//
// Solidity: event NodeRegistered(address indexed wallet, address identifier, uint256 time, string aliasIdentifier)
func (_NodesRegistryImpl *NodesRegistryImplFilterer) FilterNodeRegistered(opts *bind.FilterOpts, wallet []common.Address) (*NodesRegistryImplNodeRegisteredIterator, error) {

	var walletRule []interface{}
	for _, walletItem := range wallet {
		walletRule = append(walletRule, walletItem)
	}

	logs, sub, err := _NodesRegistryImpl.contract.FilterLogs(opts, "NodeRegistered", walletRule)
	if err != nil {
		return nil, err
	}
	return &NodesRegistryImplNodeRegisteredIterator{contract: _NodesRegistryImpl.contract, event: "NodeRegistered", logs: logs, sub: sub}, nil
}

// WatchNodeRegistered is a free log subscription operation binding the contract event 0x0b464c895406310478ed7e414061d7621fd5f7444d7618e96d7fbb917a51f302.
//
// Solidity: event NodeRegistered(address indexed wallet, address identifier, uint256 time, string aliasIdentifier)
func (_NodesRegistryImpl *NodesRegistryImplFilterer) WatchNodeRegistered(opts *bind.WatchOpts, sink chan<- *NodesRegistryImplNodeRegistered, wallet []common.Address) (event.Subscription, error) {

	var walletRule []interface{}
	for _, walletItem := range wallet {
		walletRule = append(walletRule, walletItem)
	}

	logs, sub, err := _NodesRegistryImpl.contract.WatchLogs(opts, "NodeRegistered", walletRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NodesRegistryImplNodeRegistered)
				if err := _NodesRegistryImpl.contract.UnpackLog(event, "NodeRegistered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNodeRegistered is a log parse operation binding the contract event 0x0b464c895406310478ed7e414061d7621fd5f7444d7618e96d7fbb917a51f302.
//
// Solidity: event NodeRegistered(address indexed wallet, address identifier, uint256 time, string aliasIdentifier)
func (_NodesRegistryImpl *NodesRegistryImplFilterer) ParseNodeRegistered(log types.Log) (*NodesRegistryImplNodeRegistered, error) {
	event := new(NodesRegistryImplNodeRegistered)
	if err := _NodesRegistryImpl.contract.UnpackLog(event, "NodeRegistered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
