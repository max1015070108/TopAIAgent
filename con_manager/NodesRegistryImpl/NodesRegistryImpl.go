// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package NodesRegistryImpl

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// NodeComputeUsed is an auto generated low-level Go binding around an user-defined struct.
type NodeComputeUsed struct {
	Identifier common.Address
	GpuType    string
	Used       *big.Int
}

// NodeInfo is an auto generated low-level Go binding around an user-defined struct.
type NodeInfo struct {
	Identifier      common.Address
	AliasIdentifier string
	Wallet          common.Address
	GpuTypes        []string
	GpuNums         []*big.Int
}

// NodesRegistryComputeAvailable is an auto generated low-level Go binding around an user-defined struct.
type NodesRegistryComputeAvailable struct {
	GpuType  string
	TotalNum *big.Int
	Used     *big.Int
}

// NodesRegistryNode is an auto generated low-level Go binding around an user-defined struct.
type NodesRegistryNode struct {
	Identifier       common.Address
	AliasIdentifier  string
	RegistrationTime *big.Int
	Active           bool
	Gpus             []NodesRegistryComputeAvailable
	Wallet           common.Address
	Stake            *big.Int
}

// NodesRegistryImplMetaData contains all meta data concerning the NodesRegistryImpl contract.
var NodesRegistryImplMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"Authorized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"identifier\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"aliasIdentifier\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"gpuTypes\",\"type\":\"string[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"gpuNums\",\"type\":\"uint256[]\"}],\"name\":\"NodeActived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"identifierOfProvider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"identifierOfServer\",\"type\":\"address\"}],\"name\":\"NodeAttached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"identifier\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"aliasIdentifier\",\"type\":\"string\"}],\"name\":\"NodeDeregistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"identifierOfProvider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"identifierOfServer\",\"type\":\"address\"}],\"name\":\"NodeDetached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"identifier\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"aliasIdentifier\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"gpuTypes\",\"type\":\"string[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"gpuNums\",\"type\":\"uint256[]\"}],\"name\":\"NodeRegistered\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startIndex\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"gpuTypes\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"gpuNums\",\"type\":\"uint256[]\"}],\"name\":\"allocGPU\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"identifier\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"gpuType\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"used\",\"type\":\"uint256\"}],\"internalType\":\"structNodeComputeUsed[]\",\"name\":\"gpuNodes\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"len\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allocator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"at\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"identifier\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"aliasIdentifier\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"registrationTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"gpuType\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"used\",\"type\":\"uint256\"}],\"internalType\":\"structNodesRegistry.ComputeAvailable[]\",\"name\":\"gpus\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"}],\"internalType\":\"structNodesRegistry.Node\",\"name\":\"node\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"server\",\"type\":\"address\"}],\"name\":\"attach\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"identifier\",\"type\":\"address\"}],\"name\":\"check\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deregisterNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"server\",\"type\":\"address\"}],\"name\":\"dettach\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"identifier\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"gpuType\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"used\",\"type\":\"uint256\"}],\"internalType\":\"structNodeComputeUsed[]\",\"name\":\"gpuNodes\",\"type\":\"tuple[]\"}],\"name\":\"freeGPU\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"identifier\",\"type\":\"address\"}],\"name\":\"get\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"identifier\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"aliasIdentifier\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"registrationTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"gpuType\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"used\",\"type\":\"uint256\"}],\"internalType\":\"structNodesRegistry.ComputeAvailable[]\",\"name\":\"gpus\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"}],\"internalType\":\"structNodesRegistry.Node\",\"name\":\"node\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"getAttach\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"gpuSummary\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"gpuType\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"used\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"gpuTypeOfNodes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"length\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"identifier\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"aliasIdentifier\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"gpuTypes\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"gpuNums\",\"type\":\"uint256[]\"}],\"internalType\":\"structNodeInfo[]\",\"name\":\"_nodesInfos\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"_allocator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakeToken\",\"type\":\"address\"}],\"name\":\"nodesRegistryImpl_initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"aliasIdentifier\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"gpuTypes\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"gpuNums\",\"type\":\"uint256[]\"}],\"name\":\"registerNode\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeToken\",\"outputs\":[{\"internalType\":\"contractIStake\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x60808060405234610016576128c3908161001c8239f35b600080fdfe6080604052600436101561001257600080fd5b60003560e01c8063036fe9c2146101175780630e22e7f81461011257806318b1c0811461010d5780631f7b6d32146101085780633edbf1791461010357806351ed6a30146100fe5780636252e1c2146100f95780637a0ca1e2146100f4578063aa5dcecc146100ef578063c23697a8146100ea578063c2bc2efc146100e5578063c7edca7a146100e0578063e0886f90146100db578063ed38ed0d146100d6578063efca74d2146100d15763f67c5bdc146100cc57600080fd5b6111e8565b61106d565b610fef565b610e91565b610e0b565b610d01565b610bda565b610bb1565b610af6565b61073f565b610641565b610525565b610507565b6103ae565b6102ef565b610151565b9181601f8401121561014c578235916001600160401b03831161014c576020808501948460051b01011161014c57565b600080fd5b3461014c5760208060031936011261014c57600480356001600160401b03811161014c57610182903690830161011c565b6008549093906101ad906101a6906001600160a01b03165b6001600160a01b031690565b331461179c565b60005b8481106101b957005b80856101d16101cc6102129483886119eb565b611a0d565b6101e56001600160a01b0382161515611a17565b6001600160a01b0381166000908152600260205260409020600381015460ff16610217575b50505061180f565b6101b0565b61028861025961023c6102d49460018060a01b03166000526004602052604060002090565b61025361024a88888d6119eb565b8a81019061181e565b9061189d565b5491610266831515611a58565b896102818a610279896040998a936119eb565b013594611468565b91016119cf565b509061029a600280930191825461147c565b90556102bc6102b66102ad868c8b6119eb565b8881019061181e565b9061186b565b926102c8858b8a6119eb565b0135920191825461147c565b905585388061020a565b6001600160a01b0381160361014c57565b3461014c57602036600319011261014c5760043561030c816102de565b600090338252600260205261034760018060a01b03610332816040862054161515611296565b338452600160205260408420921680926115ae565b1561037457337f864dd06d15940858b627540246db79e66082ff76b9712b0bb5d483d168b1cd188380a380f35b60405162461bcd60e51b815260206004820152601260248201527118da1a5b19081a5cc81b9bdd08195e1a5cdd60721b6044820152606490fd5b3461014c57600080600319360112610504576103cb331515611a17565b33600090815260026020526040902080546103f9906103f2906001600160a01b031661019a565b1515611a97565b336000908152600160205260409020610413905415611ada565b6001806104218184016111cd565b926004859101925b6104a6575b50505061044d61043d82610fc9565b80546001600160a01b0319169055565b33600090815260026020526040902061046590611c2f565b61046e3361150f565b507f60d01d146c7aa1a7d4e3fdd5543872f7d5b2a241980a66b3552ae1a86ae18453604051806104a033944283611cb1565b0390a280f35b82548110156104ff576104f981866104bf8594876119cf565b50848101546104da866104d184611b26565b0191825461147c565b90556002906104f1828201926104d1845493611b26565b90555561180f565b90610429565b61042e565b80fd5b3461014c57600036600319011261014c576020600654604051908152f35b3461014c57606036600319011261014c576004356001600160401b03811161014c576105586105b591369060040161011c565b602492919235610567816102de565b60443591610574836102de565b6000549461059960ff8760081c161580978198610633575b8115610613575b50612388565b856105ac600160ff196000541617600055565b6105fa576123eb565b6105bb57005b6105cb61ff001960005416600055565b604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602090a1005b61060e61010061ff00196000541617600055565b6123eb565b303b15915081610625575b5038610593565b6001915060ff16143861061e565b600160ff821610915061058c565b3461014c57600036600319011261014c576009546040516001600160a01b039091168152602090f35b60005b83811061067d5750506000910152565b818101518382015260200161066d565b906020916106a68151809281855285808601910161066a565b601f01601f1916010190565b9291906040808501818652825180915260609081870192828260051b890101936020809601936000925b878585106106f05750505050505050930152565b806001929394959697988d605f19908203018752895190848060a01b0382511681528580610729858501518a878601528a85019061068d565b93015191015298019401940192949391906106dc565b3461014c57606036600319011261014c5760048035906001600160401b0360243581811161014c57610774903690840161011c565b909160443590811161014c5761078d903690850161011c565b600854600093906107aa906101a6906001600160a01b031661019a565b6107b3816117dd565b91849385915b838310610a6c575050506006936107d96107d4838754611935565b611948565b885b86546107e78183611914565b8b1080610a63575b15610a4e57610801610806918c6119af565b611732565b6001600160a01b03811660009081526002602052604090209093909761083761083360038b015460ff1690565b1590565b610a3b576001600160a01b0385166000908152600460205260408120989c9b989a9993989384019390925b87841080610a32575b15610a0e578b9c9d8b9c610882868c9e9d9e611921565b5115610a015761089790610253878c8f611850565b548015610a01576108aa6108b091611468565b876119cf565b50906001820190600282549301926108ca8454809261147c565b9d8e156109f1576109278f918f8f8f8f60208f9561090e878f9661091693610909610920986108f98b8a611921565b516001600160a01b039091169052565b611850565b959093611921565b5101923691610f65565b9052611921565b51111561098c57509161098093916109628e61097a958f61095c8c610956856109508386611921565b5161147c565b92611921565b5261147c565b9d604061096f858d611921565b510152549055611906565b9361180f565b929c9b9a99989c610862565b610980949d506109c49250926109b161097a946109aa8f8b90611921565b5190611914565b90556109bd878d611921565b519061147c565b9a6109cf868c611921565b5160406109dc838b611921565b51015260006109eb878d611921565b52611906565b50509b505050926109809061180f565b509950926109809061180f565b999a509a909b979394506107e79250610a27915061180f565b9996929190506107db565b508d151561086b565b9a610a279198506107e79293945061180f565b5050610a5f604051928392836106b2565b0390f35b508615156107ef565b909194610ae9610aef91610a846102b689888d611850565b610ac560026001830154920191610ab3610aa08454809361147c565b610aab8d8a8c6118b6565b3511156118c6565b610abe8b888a6118b6565b3590611914565b9055610ad28885876118b6565b35610add8989611921565b52610abe8885876118b6565b9561180f565b91906107b9565b3461014c57602036600319011261014c57600435610b13816102de565b6000903382526002602052610b4e60018060a01b03610b39816040862054161515611296565b338452600160205260408420921680926113e1565b15610b7b57337f042e2dbbe7288392f225b5cc7f610946ae1a1e8673b3f8ce4f6fc3bc6dee5aa68380a380f35b60405162461bcd60e51b815260206004820152600e60248201526d18da1a5b19081a5cc8195e1a5cdd60921b6044820152606490fd5b3461014c57600036600319011261014c576008546040516001600160a01b039091168152602090f35b3461014c57602036600319011261014c576020610c01600435610bfc816102de565b611770565b6040519015158152f35b60209182825260018060a01b038151168383015282810151610c3a60409160e08386015261010085019061068d565b938183015190606091828601528184015115156080860152608084015195601f1993848783030160a08801528751938483528383019184808760051b8601019a01966000945b878610610cb55750505050505050505060c081610cad60a060e09401518386019060018060a01b03169052565b015191015290565b90919293949596979a8780828e868660019603018a5251908780610ce084518c85528c85019061068d565b93858101518685015201519101529d01960196019497969593929190610c80565b3461014c57602036600319011261014c57600435610d1e816102de565b610d26611657565b5060018060a01b03166000526002602052610a5f6040600020600660405191610d4e83610efa565b80546001600160a01b03168352610d67600182016111cd565b602084015260028101546040840152610d90610d87600383015460ff1690565b15156060850152565b610d9c600482016116a7565b608084015260058101546001600160a01b031660a0840152015460c082015260405191829182610c0b565b6020908160408183019282815285518094520193019160005b828110610dee575050505090565b83516001600160a01b031685529381019392810192600101610de0565b3461014c5760208060031936011261014c57600435610e29816102de565b60018060a01b03166000526001808252604060002091604051918282855491828152019460005282600020926000905b828210610e7c57610a5f86610e70818a0382610f35565b60405191829182610dc7565b84548752958601959383019390830190610e59565b3461014c57602036600319011261014c57610eaa611657565b50610eb66004356112f8565b60018060a01b0391549060031b1c166000526002602052610a5f6040600020600660405191610d4e83610efa565b634e487b7160e01b600052604160045260246000fd5b60e081019081106001600160401b03821117610f1557604052565b610ee4565b606081019081106001600160401b03821117610f1557604052565b90601f801991011681019081106001600160401b03821117610f1557604052565b60405190610f6382610f1a565b565b9291926001600160401b038211610f155760405191610f8e601f8201601f191660200184610f35565b82948184528183011161014c578281602093846000960137010152565b9080601f8301121561014c57816020610fc693359101610f65565b90565b6020610fe291816040519382858094519384920161066a565b8101600381520301902090565b3461014c57604036600319011261014c5760043561100c816102de565b602435906001600160401b03821161014c57602061105b9161103382943690600401610fab565b9060018060a01b0316600052600482526040600020826040519483868095519384920161066a565b82019081520301902054604051908152f35b608036600319011261014c57600435611085816102de565b6001600160401b0360243581811161014c573660238201121561014c57806004013582811161014c57366024828401011161014c5760443583811161014c576110d290369060040161011c565b9160643594851161014c576110fb956110f1602496369060040161011c565b969095019061127c565b005b90600182811c9216801561112d575b602083101461111757565b634e487b7160e01b600052602260045260246000fd5b91607f169161110c565b9060009291805491611148836110fd565b9182825260019384811690816000146111aa575060011461116a575b50505050565b90919394506000526020928360002092846000945b838610611196575050505001019038808080611164565b80548587018301529401938590820161117f565b9294505050602093945060ff191683830152151560051b01019038808080611164565b90610f636111e19260405193848092611137565b0383610f35565b3461014c57602036600319011261014c576004356001600160401b03811161014c57611233602061122061126d933690600401610fab565b816040519382858094519384920161066a565b810160058152030190206040519061124f826111e18184611137565b6002600182015491015460405193849360608552606085019061068d565b91602084015260408301520390f35b9061128d969594939291339061210b565b610f633361275c565b1561129d57565b60405162461bcd60e51b815260206004820152601860248201527f4964656e746966696572206d75737420626520657869737400000000000000006044820152606490fd5b634e487b7160e01b600052603260045260246000fd5b60065481101561132f5760066000527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f0190600090565b6112e2565b805482101561132f5760005260206000200190600090565b916113669183549060031b91821b91600019901b19161790565b9055565b806000526007602052604060002054156000146113db57600654600160401b811015610f1557600181018060065581101561132f5781907ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f0155600654906000526007602052604060002055600190565b50600090565b600181019082600052816020526040600020541560001461144a578054600160401b811015610f155761143561141e826001879401855584611334565b819391549060031b91821b91600019901b19161790565b90555491600052602052604060002055600190565b505050600090565b634e487b7160e01b600052601160045260246000fd5b60001981019190821161147757565b611452565b9190820391821161147757565b60065480156114cf576000198101908082101561132f577ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3e600091600683520155600655565b634e487b7160e01b600052603160045260246000fd5b80549081156114cf57600019918201916114ff8383611334565b909182549160031b1b1916905555565b60008181526007602052604090205480156115a75760001991818301918083116114775760065493840193841161147757838361156a9460009603611570575b50505061155a611489565b6000526007602052604060002090565b55600190565b61155a6115989161159061158661159e956112f8565b90549060031b1c90565b9283916112f8565b9061134c565b5538808061154f565b5050600090565b600181019180600052826020526040600020549283151560001461164e5760001992848401908582116114775780549485019485116114775760009585836116029461156a9803611611575b5050506114e5565b90600052602052604060002090565b611635611598916116256116459487611334565b90549060031b1c92839187611334565b8590600052602052604060002090565b553880806115fa565b50505050600090565b6040519061166482610efa565b600060c08382815260606020820152826040820152826060820152606060808201528260a08201520152565b6001600160401b038111610f155760051b60200190565b9081546116b381611690565b926040936116c385519182610f35565b828152809460208092019260005281600020906000935b8585106116e957505050505050565b60038460019284516116fa81610f1a565b85516117118161170a818b611137565b0382610f35565b815284870154838201526002870154868201528152019301940193916116da565b60065481101561132f5760066000527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f01546001600160a01b031690565b6001600160a01b031660009081526002602052604090206003015460ff1661179757600090565b600190565b156117a357565b60405162461bcd60e51b815260206004820152601260248201527127b7363c903337b91030b63637b1b0ba37b960711b6044820152606490fd5b906117e782611690565b6117f46040519182610f35565b8281528092611805601f1991611690565b0190602036910137565b60001981146114775760010190565b903590601e198136030182121561014c57018035906001600160401b03821161014c5760200191813603831361014c57565b9082101561132f576118679160051b81019061181e565b9091565b6020908260405193849283378101600581520301902090565b6020908260405193849283378101600381520301902090565b6020919283604051948593843782019081520301902090565b919081101561132f5760051b0190565b156118cd57565b60405162461bcd60e51b81526020600482015260116024820152700cee0ea40d2e640dcdee840cadcdeeaced607b1b6044820152606490fd5b906001820180921161147757565b9190820180921161147757565b805182101561132f5760209160051b010190565b8181029291811591840414171561147757565b9061195282611690565b60409061196182519182610f35565b8381528093611972601f1991611690565b0191600091825b848110611987575050505050565b602090835161199581610f1a565b858152826060818301528686830152828501015201611979565b81156119b9570690565b634e487b7160e01b600052601260045260246000fd5b805482101561132f576000526003602060002091020190600090565b919081101561132f5760051b81013590605e198136030182121561014c570190565b35610fc6816102de565b15611a1e57565b60405162461bcd60e51b815260206004820152601260248201527124b73b30b634b21034b232b73a34b334b2b960711b6044820152606490fd5b15611a5f57565b60405162461bcd60e51b815260206004820152601060248201526f496e76616c696420677075207479706560801b6044820152606490fd5b15611a9e57565b60405162461bcd60e51b81526020600482015260146024820152731259195b9d1a599a595c881b9bdd08195e1a5cdd60621b6044820152606490fd5b15611ae157565b60405162461bcd60e51b815260206004820152601760248201527f4964656e74696669657220686173206368696c6472656e0000000000000000006044820152606490fd5b604051908160008254611b38816110fd565b93600191808316908115611b9d5750600114611b60575b505060209250600581520301902090565b90915060005260209081600020906000915b858310611b89575050505060209181013880611b4f565b805487840152869450918301918101611b72565b92505050602093915060ff191682528015150281013880611b4f565b818110611bc4575050565b60008155600101611bb9565b634e487b7160e01b600052600060045260246000fd5b611bf081546110fd565b9081611bfa575050565b81601f60009311600114611c0c575055565b908083918252611c2b601f60208420940160051c840160018501611bb9565b5555565b906000808355600192611c43848201611be6565b60029382858301556003948386840155600483019182549285815583611c77575b5050505060058101829055600601559050565b838802938885040361147757855260208520928301925b83811015611c645780611ca18992611be6565b8683820155868482015501611c8e565b604090610fc693928152816020820152019061068d565b15611ccf57565b60405162461bcd60e51b815260206004820152601060248201526f496e76616c696420475055206461746160801b6044820152606490fd5b15611d0e57565b60405162461bcd60e51b815260206004820152601c60248201527f496e76616c69642077616c6c6574206f72206964656e746966696572000000006044820152606490fd5b15611d5a57565b60405162461bcd60e51b815260206004820152601060248201526f1259195b9d1a599a595c88195e1a5cdd60821b6044820152606490fd5b15611d9957565b60405162461bcd60e51b8152602060048201526016602482015275105b1a585cc81a59195b9d1a599a595c88195e1a5cdd60521b6044820152606490fd5b9190601f8111611de657505050565b610f63926000526020600020906020601f840160051c83019310611e12575b601f0160051c0190611bb9565b9091508190611e05565b9092916001600160401b038111610f1557611e4181611e3b84546110fd565b84611dd7565b6000601f8211600114611e7b5781929394600092611e70575b50508160011b916000199060031b1c1916179055565b013590503880611e5a565b601f19821694611e9084600052602060002090565b91805b878110611ecb575083600195969710611eb1575b505050811b019055565b0135600019600384901b60f8161c19169055388080611ea7565b90926020600181928686013581550194019101611e93565b91908254600160401b811015610f1557611f049060019485820181556119cf565b919091611ff55780519384516001600160401b038111610f1557611f3281611f2c86546110fd565b86611dd7565b60209081601f8211600114611f835790806040959493926002979899600092611f78575b5050600019600383901b1c191690831b1786555b820151908501550151910155565b015190503880611f56565b601f19821690611f9887600052602060002090565b9160005b818110611fe05750918391600298999a879695604099989510611fc7575b505050811b018655611f6a565b015160001960f88460031b161c19169055388080611fba565b8a830151845592860192918501918501611f9c565b611bd0565b908060209392818452848401376000828201840152601f01601f1916010190565b81835290916001600160fb1b03831161014c5760209260051b809284830137010190565b98979592909361206e9297959460018060a01b03168a52602097888b015260a060408b015260a08a0191611ffa565b94878603606089015281865280860195818360051b82010196846000925b8584106120ac5750505050505050846080610fc69596850391015261201b565b90919293949598601f198282030184528935601e198436030181121561014c5783018681019190356001600160401b03811161014c57803603831361014c576120fa88928392600195611ffa565b9b019401940192959493919061208c565b969390949195928483148061237f575b61212490611cc8565b600160a01b6001900387818a169983898c151561219e6121b1936121786121ab948461019a95612374575b8061236b575b61215e90611d07565b6001600160a01b0316600090815260026020526040902090565b805490979061219990612193906001600160a01b031661019a565b15611d53565b611884565b546001600160a01b031690565b15611d92565b6001600160a01b03891660009081526004602052604090206122109083546001600160a01b0319166001600160a01b038c16178455914260028501556005840180546001600160a01b0319166001600160a01b03909216919091179055565b600190612220858c848601611e1c565b346006840155600092600401835b8881106122b157505050505091869593916122706122ac96947f99c250edfb33141684f230eecda8aa955bf0d62d17bcaaab0ab43f318f3637b09a991661136a565b5061229e8761227f838b611884565b80546001600160a01b0319166001600160a01b03909216919091179055565b60405197889742908961203f565b0390a2565b808861233b866123328f8f968f61232b82848f9b8a8f8f906123669f86896123259461231e6102b69e610253958a61230c6122fa886122f2818f8b90611850565b9690946118b6565b3591612304610f56565b943691610f65565b83526020830152604082015282611ee3565b5495611850565b556118b6565b3596611850565b01918254611914565b90556123618a8a61235c6102b685612354818686611850565b959094611850565b611e1c565b61180f565b61222e565b50821515612155565b50898116151561214f565b5084151561211b565b1561238f57565b60405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b9092919260ff60005460081c16156125145760005b8181106124795750610f63936001600160a01b0393925061244b915061242984821615156125c4565b60018060a01b03166bffffffffffffffffffffffff60a01b6008541617600855565b16612457811515612604565b60018060a01b03166bffffffffffffffffffffffff60a01b6009541617600955565b806124f9612496604061249061250f95878961256d565b01611a0d565b6124a46101cc84878961256d565b9085876124bf6124b587848461256d565b602081019061181e565b906124f16124e7896124df6124d582898961256d565b606081019061258f565b97909661256d565b608081019061258f565b96909561210b565b61236161250a6101cc83868861256d565b61275c565b612400565b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b919081101561132f5760051b81013590609e198136030182121561014c570190565b903590601e198136030182121561014c57018035906001600160401b03821161014c57602001918160051b3603831361014c57565b156125cb57565b60405162461bcd60e51b815260206004820152601160248201527024b73b30b634b21030b63637b1b0ba37b960791b6044820152606490fd5b1561260b57565b60405162461bcd60e51b815260206004820152601360248201527224b73b30b634b21039ba30b5b2903a37b5b2b760691b6044820152606490fd5b9061265082611690565b61265d6040519182610f35565b828152809261266e601f1991611690565b019060005b82811061267f57505050565b806060602080938501015201612673565b90815180825260208080930193019160005b8281106126b0575050505090565b8351855293810193928101926001016126a2565b919594926126ee9160018060a01b031683526020968784015260a0604084015260a0830190611137565b94818603606083015283518087528187019180808360051b8a01019601926000905b83821061272f575050505050610fc69394506080818403910152612690565b9091929396838061274d6001938d601f199082030186528b5161068d565b99019201920190939291612710565b6001600160a01b03908116600090815260026020526040902080549192916127879084161515611a97565b60038101612799610833825460ff1690565b6127a4575b50509050565b805460ff19166001179055600481019283546127bf81612646565b906127c9816117dd565b9060005b81811061283c575050600584015494955092937fb0a73f160683fa6bd1601bd25cd9e2addc090f0a74959bf51c6a2a4560af6f5f93612831916001600160a01b031686549093906001600160a01b03166001604051968796169801904290866126c4565b0390a280388061279e565b8061285361284d612888938b6119cf565b506111cd565b61285d8287611921565b526128688186611921565b506001612875828b6119cf565b5001546128828286611921565b5261180f565b6127cd56fea264697066735822122019f43287da62f366374bb535efc6d6e217ed71fc0e4847a5938a3424fbe98cea64736f6c63430008140033",
}

// NodesRegistryImplABI is the input ABI used to generate the binding from.
// Deprecated: Use NodesRegistryImplMetaData.ABI instead.
var NodesRegistryImplABI = NodesRegistryImplMetaData.ABI

// NodesRegistryImplBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use NodesRegistryImplMetaData.Bin instead.
var NodesRegistryImplBin = NodesRegistryImplMetaData.Bin

// DeployNodesRegistryImpl deploys a new Ethereum contract, binding an instance of NodesRegistryImpl to it.
func DeployNodesRegistryImpl(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *NodesRegistryImpl, error) {
	parsed, err := NodesRegistryImplMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(NodesRegistryImplBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &NodesRegistryImpl{NodesRegistryImplCaller: NodesRegistryImplCaller{contract: contract}, NodesRegistryImplTransactor: NodesRegistryImplTransactor{contract: contract}, NodesRegistryImplFilterer: NodesRegistryImplFilterer{contract: contract}}, nil
}

// NodesRegistryImpl is an auto generated Go binding around an Ethereum contract.
type NodesRegistryImpl struct {
	NodesRegistryImplCaller     // Read-only binding to the contract
	NodesRegistryImplTransactor // Write-only binding to the contract
	NodesRegistryImplFilterer   // Log filterer for contract events
}

// NodesRegistryImplCaller is an auto generated read-only Go binding around an Ethereum contract.
type NodesRegistryImplCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NodesRegistryImplTransactor is an auto generated write-only Go binding around an Ethereum contract.
type NodesRegistryImplTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NodesRegistryImplFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type NodesRegistryImplFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NodesRegistryImplSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type NodesRegistryImplSession struct {
	Contract     *NodesRegistryImpl // Generic contract binding to set the session for
	CallOpts     bind.CallOpts      // Call options to use throughout this session
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// NodesRegistryImplCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type NodesRegistryImplCallerSession struct {
	Contract *NodesRegistryImplCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts            // Call options to use throughout this session
}

// NodesRegistryImplTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type NodesRegistryImplTransactorSession struct {
	Contract     *NodesRegistryImplTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts            // Transaction auth options to use throughout this session
}

// NodesRegistryImplRaw is an auto generated low-level Go binding around an Ethereum contract.
type NodesRegistryImplRaw struct {
	Contract *NodesRegistryImpl // Generic contract binding to access the raw methods on
}

// NodesRegistryImplCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type NodesRegistryImplCallerRaw struct {
	Contract *NodesRegistryImplCaller // Generic read-only contract binding to access the raw methods on
}

// NodesRegistryImplTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type NodesRegistryImplTransactorRaw struct {
	Contract *NodesRegistryImplTransactor // Generic write-only contract binding to access the raw methods on
}

// NewNodesRegistryImpl creates a new instance of NodesRegistryImpl, bound to a specific deployed contract.
func NewNodesRegistryImpl(address common.Address, backend bind.ContractBackend) (*NodesRegistryImpl, error) {
	contract, err := bindNodesRegistryImpl(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &NodesRegistryImpl{NodesRegistryImplCaller: NodesRegistryImplCaller{contract: contract}, NodesRegistryImplTransactor: NodesRegistryImplTransactor{contract: contract}, NodesRegistryImplFilterer: NodesRegistryImplFilterer{contract: contract}}, nil
}

// NewNodesRegistryImplCaller creates a new read-only instance of NodesRegistryImpl, bound to a specific deployed contract.
func NewNodesRegistryImplCaller(address common.Address, caller bind.ContractCaller) (*NodesRegistryImplCaller, error) {
	contract, err := bindNodesRegistryImpl(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &NodesRegistryImplCaller{contract: contract}, nil
}

// NewNodesRegistryImplTransactor creates a new write-only instance of NodesRegistryImpl, bound to a specific deployed contract.
func NewNodesRegistryImplTransactor(address common.Address, transactor bind.ContractTransactor) (*NodesRegistryImplTransactor, error) {
	contract, err := bindNodesRegistryImpl(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &NodesRegistryImplTransactor{contract: contract}, nil
}

// NewNodesRegistryImplFilterer creates a new log filterer instance of NodesRegistryImpl, bound to a specific deployed contract.
func NewNodesRegistryImplFilterer(address common.Address, filterer bind.ContractFilterer) (*NodesRegistryImplFilterer, error) {
	contract, err := bindNodesRegistryImpl(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &NodesRegistryImplFilterer{contract: contract}, nil
}

// bindNodesRegistryImpl binds a generic wrapper to an already deployed contract.
func bindNodesRegistryImpl(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := NodesRegistryImplMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_NodesRegistryImpl *NodesRegistryImplRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _NodesRegistryImpl.Contract.NodesRegistryImplCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_NodesRegistryImpl *NodesRegistryImplRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _NodesRegistryImpl.Contract.NodesRegistryImplTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_NodesRegistryImpl *NodesRegistryImplRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _NodesRegistryImpl.Contract.NodesRegistryImplTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_NodesRegistryImpl *NodesRegistryImplCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _NodesRegistryImpl.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_NodesRegistryImpl *NodesRegistryImplTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _NodesRegistryImpl.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_NodesRegistryImpl *NodesRegistryImplTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _NodesRegistryImpl.Contract.contract.Transact(opts, method, params...)
}

// Allocator is a free data retrieval call binding the contract method 0xaa5dcecc.
//
// Solidity: function allocator() view returns(address)
func (_NodesRegistryImpl *NodesRegistryImplCaller) Allocator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _NodesRegistryImpl.contract.Call(opts, &out, "allocator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Allocator is a free data retrieval call binding the contract method 0xaa5dcecc.
//
// Solidity: function allocator() view returns(address)
func (_NodesRegistryImpl *NodesRegistryImplSession) Allocator() (common.Address, error) {
	return _NodesRegistryImpl.Contract.Allocator(&_NodesRegistryImpl.CallOpts)
}

// Allocator is a free data retrieval call binding the contract method 0xaa5dcecc.
//
// Solidity: function allocator() view returns(address)
func (_NodesRegistryImpl *NodesRegistryImplCallerSession) Allocator() (common.Address, error) {
	return _NodesRegistryImpl.Contract.Allocator(&_NodesRegistryImpl.CallOpts)
}

// At is a free data retrieval call binding the contract method 0xe0886f90.
//
// Solidity: function at(uint256 index) view returns((address,string,uint256,bool,(string,uint256,uint256)[],address,uint256) node)
func (_NodesRegistryImpl *NodesRegistryImplCaller) At(opts *bind.CallOpts, index *big.Int) (NodesRegistryNode, error) {
	var out []interface{}
	err := _NodesRegistryImpl.contract.Call(opts, &out, "at", index)

	if err != nil {
		return *new(NodesRegistryNode), err
	}

	out0 := *abi.ConvertType(out[0], new(NodesRegistryNode)).(*NodesRegistryNode)

	return out0, err

}

// At is a free data retrieval call binding the contract method 0xe0886f90.
//
// Solidity: function at(uint256 index) view returns((address,string,uint256,bool,(string,uint256,uint256)[],address,uint256) node)
func (_NodesRegistryImpl *NodesRegistryImplSession) At(index *big.Int) (NodesRegistryNode, error) {
	return _NodesRegistryImpl.Contract.At(&_NodesRegistryImpl.CallOpts, index)
}

// At is a free data retrieval call binding the contract method 0xe0886f90.
//
// Solidity: function at(uint256 index) view returns((address,string,uint256,bool,(string,uint256,uint256)[],address,uint256) node)
func (_NodesRegistryImpl *NodesRegistryImplCallerSession) At(index *big.Int) (NodesRegistryNode, error) {
	return _NodesRegistryImpl.Contract.At(&_NodesRegistryImpl.CallOpts, index)
}

// Check is a free data retrieval call binding the contract method 0xc23697a8.
//
// Solidity: function check(address identifier) view returns(bool)
func (_NodesRegistryImpl *NodesRegistryImplCaller) Check(opts *bind.CallOpts, identifier common.Address) (bool, error) {
	var out []interface{}
	err := _NodesRegistryImpl.contract.Call(opts, &out, "check", identifier)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Check is a free data retrieval call binding the contract method 0xc23697a8.
//
// Solidity: function check(address identifier) view returns(bool)
func (_NodesRegistryImpl *NodesRegistryImplSession) Check(identifier common.Address) (bool, error) {
	return _NodesRegistryImpl.Contract.Check(&_NodesRegistryImpl.CallOpts, identifier)
}

// Check is a free data retrieval call binding the contract method 0xc23697a8.
//
// Solidity: function check(address identifier) view returns(bool)
func (_NodesRegistryImpl *NodesRegistryImplCallerSession) Check(identifier common.Address) (bool, error) {
	return _NodesRegistryImpl.Contract.Check(&_NodesRegistryImpl.CallOpts, identifier)
}

// Get is a free data retrieval call binding the contract method 0xc2bc2efc.
//
// Solidity: function get(address identifier) view returns((address,string,uint256,bool,(string,uint256,uint256)[],address,uint256) node)
func (_NodesRegistryImpl *NodesRegistryImplCaller) Get(opts *bind.CallOpts, identifier common.Address) (NodesRegistryNode, error) {
	var out []interface{}
	err := _NodesRegistryImpl.contract.Call(opts, &out, "get", identifier)

	if err != nil {
		return *new(NodesRegistryNode), err
	}

	out0 := *abi.ConvertType(out[0], new(NodesRegistryNode)).(*NodesRegistryNode)

	return out0, err

}

// Get is a free data retrieval call binding the contract method 0xc2bc2efc.
//
// Solidity: function get(address identifier) view returns((address,string,uint256,bool,(string,uint256,uint256)[],address,uint256) node)
func (_NodesRegistryImpl *NodesRegistryImplSession) Get(identifier common.Address) (NodesRegistryNode, error) {
	return _NodesRegistryImpl.Contract.Get(&_NodesRegistryImpl.CallOpts, identifier)
}

// Get is a free data retrieval call binding the contract method 0xc2bc2efc.
//
// Solidity: function get(address identifier) view returns((address,string,uint256,bool,(string,uint256,uint256)[],address,uint256) node)
func (_NodesRegistryImpl *NodesRegistryImplCallerSession) Get(identifier common.Address) (NodesRegistryNode, error) {
	return _NodesRegistryImpl.Contract.Get(&_NodesRegistryImpl.CallOpts, identifier)
}

// GetAttach is a free data retrieval call binding the contract method 0xc7edca7a.
//
// Solidity: function getAttach(address provider) view returns(address[])
func (_NodesRegistryImpl *NodesRegistryImplCaller) GetAttach(opts *bind.CallOpts, provider common.Address) ([]common.Address, error) {
	var out []interface{}
	err := _NodesRegistryImpl.contract.Call(opts, &out, "getAttach", provider)

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetAttach is a free data retrieval call binding the contract method 0xc7edca7a.
//
// Solidity: function getAttach(address provider) view returns(address[])
func (_NodesRegistryImpl *NodesRegistryImplSession) GetAttach(provider common.Address) ([]common.Address, error) {
	return _NodesRegistryImpl.Contract.GetAttach(&_NodesRegistryImpl.CallOpts, provider)
}

// GetAttach is a free data retrieval call binding the contract method 0xc7edca7a.
//
// Solidity: function getAttach(address provider) view returns(address[])
func (_NodesRegistryImpl *NodesRegistryImplCallerSession) GetAttach(provider common.Address) ([]common.Address, error) {
	return _NodesRegistryImpl.Contract.GetAttach(&_NodesRegistryImpl.CallOpts, provider)
}

// GpuSummary is a free data retrieval call binding the contract method 0xf67c5bdc.
//
// Solidity: function gpuSummary(string ) view returns(string gpuType, uint256 totalNum, uint256 used)
func (_NodesRegistryImpl *NodesRegistryImplCaller) GpuSummary(opts *bind.CallOpts, arg0 string) (struct {
	GpuType  string
	TotalNum *big.Int
	Used     *big.Int
}, error) {
	var out []interface{}
	err := _NodesRegistryImpl.contract.Call(opts, &out, "gpuSummary", arg0)

	outstruct := new(struct {
		GpuType  string
		TotalNum *big.Int
		Used     *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.GpuType = *abi.ConvertType(out[0], new(string)).(*string)
	outstruct.TotalNum = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.Used = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// GpuSummary is a free data retrieval call binding the contract method 0xf67c5bdc.
//
// Solidity: function gpuSummary(string ) view returns(string gpuType, uint256 totalNum, uint256 used)
func (_NodesRegistryImpl *NodesRegistryImplSession) GpuSummary(arg0 string) (struct {
	GpuType  string
	TotalNum *big.Int
	Used     *big.Int
}, error) {
	return _NodesRegistryImpl.Contract.GpuSummary(&_NodesRegistryImpl.CallOpts, arg0)
}

// GpuSummary is a free data retrieval call binding the contract method 0xf67c5bdc.
//
// Solidity: function gpuSummary(string ) view returns(string gpuType, uint256 totalNum, uint256 used)
func (_NodesRegistryImpl *NodesRegistryImplCallerSession) GpuSummary(arg0 string) (struct {
	GpuType  string
	TotalNum *big.Int
	Used     *big.Int
}, error) {
	return _NodesRegistryImpl.Contract.GpuSummary(&_NodesRegistryImpl.CallOpts, arg0)
}

// GpuTypeOfNodes is a free data retrieval call binding the contract method 0xed38ed0d.
//
// Solidity: function gpuTypeOfNodes(address , string ) view returns(uint256)
func (_NodesRegistryImpl *NodesRegistryImplCaller) GpuTypeOfNodes(opts *bind.CallOpts, arg0 common.Address, arg1 string) (*big.Int, error) {
	var out []interface{}
	err := _NodesRegistryImpl.contract.Call(opts, &out, "gpuTypeOfNodes", arg0, arg1)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GpuTypeOfNodes is a free data retrieval call binding the contract method 0xed38ed0d.
//
// Solidity: function gpuTypeOfNodes(address , string ) view returns(uint256)
func (_NodesRegistryImpl *NodesRegistryImplSession) GpuTypeOfNodes(arg0 common.Address, arg1 string) (*big.Int, error) {
	return _NodesRegistryImpl.Contract.GpuTypeOfNodes(&_NodesRegistryImpl.CallOpts, arg0, arg1)
}

// GpuTypeOfNodes is a free data retrieval call binding the contract method 0xed38ed0d.
//
// Solidity: function gpuTypeOfNodes(address , string ) view returns(uint256)
func (_NodesRegistryImpl *NodesRegistryImplCallerSession) GpuTypeOfNodes(arg0 common.Address, arg1 string) (*big.Int, error) {
	return _NodesRegistryImpl.Contract.GpuTypeOfNodes(&_NodesRegistryImpl.CallOpts, arg0, arg1)
}

// Length is a free data retrieval call binding the contract method 0x1f7b6d32.
//
// Solidity: function length() view returns(uint256)
func (_NodesRegistryImpl *NodesRegistryImplCaller) Length(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _NodesRegistryImpl.contract.Call(opts, &out, "length")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Length is a free data retrieval call binding the contract method 0x1f7b6d32.
//
// Solidity: function length() view returns(uint256)
func (_NodesRegistryImpl *NodesRegistryImplSession) Length() (*big.Int, error) {
	return _NodesRegistryImpl.Contract.Length(&_NodesRegistryImpl.CallOpts)
}

// Length is a free data retrieval call binding the contract method 0x1f7b6d32.
//
// Solidity: function length() view returns(uint256)
func (_NodesRegistryImpl *NodesRegistryImplCallerSession) Length() (*big.Int, error) {
	return _NodesRegistryImpl.Contract.Length(&_NodesRegistryImpl.CallOpts)
}

// StakeToken is a free data retrieval call binding the contract method 0x51ed6a30.
//
// Solidity: function stakeToken() view returns(address)
func (_NodesRegistryImpl *NodesRegistryImplCaller) StakeToken(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _NodesRegistryImpl.contract.Call(opts, &out, "stakeToken")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// StakeToken is a free data retrieval call binding the contract method 0x51ed6a30.
//
// Solidity: function stakeToken() view returns(address)
func (_NodesRegistryImpl *NodesRegistryImplSession) StakeToken() (common.Address, error) {
	return _NodesRegistryImpl.Contract.StakeToken(&_NodesRegistryImpl.CallOpts)
}

// StakeToken is a free data retrieval call binding the contract method 0x51ed6a30.
//
// Solidity: function stakeToken() view returns(address)
func (_NodesRegistryImpl *NodesRegistryImplCallerSession) StakeToken() (common.Address, error) {
	return _NodesRegistryImpl.Contract.StakeToken(&_NodesRegistryImpl.CallOpts)
}

// AllocGPU is a paid mutator transaction binding the contract method 0x6252e1c2.
//
// Solidity: function allocGPU(uint256 startIndex, string[] gpuTypes, uint256[] gpuNums) returns((address,string,uint256)[] gpuNodes, uint256 len)
func (_NodesRegistryImpl *NodesRegistryImplTransactor) AllocGPU(opts *bind.TransactOpts, startIndex *big.Int, gpuTypes []string, gpuNums []*big.Int) (*types.Transaction, error) {
	return _NodesRegistryImpl.contract.Transact(opts, "allocGPU", startIndex, gpuTypes, gpuNums)
}

// AllocGPU is a paid mutator transaction binding the contract method 0x6252e1c2.
//
// Solidity: function allocGPU(uint256 startIndex, string[] gpuTypes, uint256[] gpuNums) returns((address,string,uint256)[] gpuNodes, uint256 len)
func (_NodesRegistryImpl *NodesRegistryImplSession) AllocGPU(startIndex *big.Int, gpuTypes []string, gpuNums []*big.Int) (*types.Transaction, error) {
	return _NodesRegistryImpl.Contract.AllocGPU(&_NodesRegistryImpl.TransactOpts, startIndex, gpuTypes, gpuNums)
}

// AllocGPU is a paid mutator transaction binding the contract method 0x6252e1c2.
//
// Solidity: function allocGPU(uint256 startIndex, string[] gpuTypes, uint256[] gpuNums) returns((address,string,uint256)[] gpuNodes, uint256 len)
func (_NodesRegistryImpl *NodesRegistryImplTransactorSession) AllocGPU(startIndex *big.Int, gpuTypes []string, gpuNums []*big.Int) (*types.Transaction, error) {
	return _NodesRegistryImpl.Contract.AllocGPU(&_NodesRegistryImpl.TransactOpts, startIndex, gpuTypes, gpuNums)
}

// Attach is a paid mutator transaction binding the contract method 0x7a0ca1e2.
//
// Solidity: function attach(address server) returns()
func (_NodesRegistryImpl *NodesRegistryImplTransactor) Attach(opts *bind.TransactOpts, server common.Address) (*types.Transaction, error) {
	return _NodesRegistryImpl.contract.Transact(opts, "attach", server)
}

// Attach is a paid mutator transaction binding the contract method 0x7a0ca1e2.
//
// Solidity: function attach(address server) returns()
func (_NodesRegistryImpl *NodesRegistryImplSession) Attach(server common.Address) (*types.Transaction, error) {
	return _NodesRegistryImpl.Contract.Attach(&_NodesRegistryImpl.TransactOpts, server)
}

// Attach is a paid mutator transaction binding the contract method 0x7a0ca1e2.
//
// Solidity: function attach(address server) returns()
func (_NodesRegistryImpl *NodesRegistryImplTransactorSession) Attach(server common.Address) (*types.Transaction, error) {
	return _NodesRegistryImpl.Contract.Attach(&_NodesRegistryImpl.TransactOpts, server)
}

// DeregisterNode is a paid mutator transaction binding the contract method 0x18b1c081.
//
// Solidity: function deregisterNode() returns()
func (_NodesRegistryImpl *NodesRegistryImplTransactor) DeregisterNode(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _NodesRegistryImpl.contract.Transact(opts, "deregisterNode")
}

// DeregisterNode is a paid mutator transaction binding the contract method 0x18b1c081.
//
// Solidity: function deregisterNode() returns()
func (_NodesRegistryImpl *NodesRegistryImplSession) DeregisterNode() (*types.Transaction, error) {
	return _NodesRegistryImpl.Contract.DeregisterNode(&_NodesRegistryImpl.TransactOpts)
}

// DeregisterNode is a paid mutator transaction binding the contract method 0x18b1c081.
//
// Solidity: function deregisterNode() returns()
func (_NodesRegistryImpl *NodesRegistryImplTransactorSession) DeregisterNode() (*types.Transaction, error) {
	return _NodesRegistryImpl.Contract.DeregisterNode(&_NodesRegistryImpl.TransactOpts)
}

// Dettach is a paid mutator transaction binding the contract method 0x0e22e7f8.
//
// Solidity: function dettach(address server) returns()
func (_NodesRegistryImpl *NodesRegistryImplTransactor) Dettach(opts *bind.TransactOpts, server common.Address) (*types.Transaction, error) {
	return _NodesRegistryImpl.contract.Transact(opts, "dettach", server)
}

// Dettach is a paid mutator transaction binding the contract method 0x0e22e7f8.
//
// Solidity: function dettach(address server) returns()
func (_NodesRegistryImpl *NodesRegistryImplSession) Dettach(server common.Address) (*types.Transaction, error) {
	return _NodesRegistryImpl.Contract.Dettach(&_NodesRegistryImpl.TransactOpts, server)
}

// Dettach is a paid mutator transaction binding the contract method 0x0e22e7f8.
//
// Solidity: function dettach(address server) returns()
func (_NodesRegistryImpl *NodesRegistryImplTransactorSession) Dettach(server common.Address) (*types.Transaction, error) {
	return _NodesRegistryImpl.Contract.Dettach(&_NodesRegistryImpl.TransactOpts, server)
}

// FreeGPU is a paid mutator transaction binding the contract method 0x036fe9c2.
//
// Solidity: function freeGPU((address,string,uint256)[] gpuNodes) returns()
func (_NodesRegistryImpl *NodesRegistryImplTransactor) FreeGPU(opts *bind.TransactOpts, gpuNodes []NodeComputeUsed) (*types.Transaction, error) {
	return _NodesRegistryImpl.contract.Transact(opts, "freeGPU", gpuNodes)
}

// FreeGPU is a paid mutator transaction binding the contract method 0x036fe9c2.
//
// Solidity: function freeGPU((address,string,uint256)[] gpuNodes) returns()
func (_NodesRegistryImpl *NodesRegistryImplSession) FreeGPU(gpuNodes []NodeComputeUsed) (*types.Transaction, error) {
	return _NodesRegistryImpl.Contract.FreeGPU(&_NodesRegistryImpl.TransactOpts, gpuNodes)
}

// FreeGPU is a paid mutator transaction binding the contract method 0x036fe9c2.
//
// Solidity: function freeGPU((address,string,uint256)[] gpuNodes) returns()
func (_NodesRegistryImpl *NodesRegistryImplTransactorSession) FreeGPU(gpuNodes []NodeComputeUsed) (*types.Transaction, error) {
	return _NodesRegistryImpl.Contract.FreeGPU(&_NodesRegistryImpl.TransactOpts, gpuNodes)
}

// NodesRegistryImplInitialize is a paid mutator transaction binding the contract method 0x3edbf179.
//
// Solidity: function nodesRegistryImpl_initialize((address,string,address,string[],uint256[])[] _nodesInfos, address _allocator, address _stakeToken) returns()
func (_NodesRegistryImpl *NodesRegistryImplTransactor) NodesRegistryImplInitialize(opts *bind.TransactOpts, _nodesInfos []NodeInfo, _allocator common.Address, _stakeToken common.Address) (*types.Transaction, error) {
	return _NodesRegistryImpl.contract.Transact(opts, "nodesRegistryImpl_initialize", _nodesInfos, _allocator, _stakeToken)
}

// NodesRegistryImplInitialize is a paid mutator transaction binding the contract method 0x3edbf179.
//
// Solidity: function nodesRegistryImpl_initialize((address,string,address,string[],uint256[])[] _nodesInfos, address _allocator, address _stakeToken) returns()
func (_NodesRegistryImpl *NodesRegistryImplSession) NodesRegistryImplInitialize(_nodesInfos []NodeInfo, _allocator common.Address, _stakeToken common.Address) (*types.Transaction, error) {
	return _NodesRegistryImpl.Contract.NodesRegistryImplInitialize(&_NodesRegistryImpl.TransactOpts, _nodesInfos, _allocator, _stakeToken)
}

// NodesRegistryImplInitialize is a paid mutator transaction binding the contract method 0x3edbf179.
//
// Solidity: function nodesRegistryImpl_initialize((address,string,address,string[],uint256[])[] _nodesInfos, address _allocator, address _stakeToken) returns()
func (_NodesRegistryImpl *NodesRegistryImplTransactorSession) NodesRegistryImplInitialize(_nodesInfos []NodeInfo, _allocator common.Address, _stakeToken common.Address) (*types.Transaction, error) {
	return _NodesRegistryImpl.Contract.NodesRegistryImplInitialize(&_NodesRegistryImpl.TransactOpts, _nodesInfos, _allocator, _stakeToken)
}

// RegisterNode is a paid mutator transaction binding the contract method 0xefca74d2.
//
// Solidity: function registerNode(address wallet, string aliasIdentifier, string[] gpuTypes, uint256[] gpuNums) payable returns()
func (_NodesRegistryImpl *NodesRegistryImplTransactor) RegisterNode(opts *bind.TransactOpts, wallet common.Address, aliasIdentifier string, gpuTypes []string, gpuNums []*big.Int) (*types.Transaction, error) {
	return _NodesRegistryImpl.contract.Transact(opts, "registerNode", wallet, aliasIdentifier, gpuTypes, gpuNums)
}

// RegisterNode is a paid mutator transaction binding the contract method 0xefca74d2.
//
// Solidity: function registerNode(address wallet, string aliasIdentifier, string[] gpuTypes, uint256[] gpuNums) payable returns()
func (_NodesRegistryImpl *NodesRegistryImplSession) RegisterNode(wallet common.Address, aliasIdentifier string, gpuTypes []string, gpuNums []*big.Int) (*types.Transaction, error) {
	return _NodesRegistryImpl.Contract.RegisterNode(&_NodesRegistryImpl.TransactOpts, wallet, aliasIdentifier, gpuTypes, gpuNums)
}

// RegisterNode is a paid mutator transaction binding the contract method 0xefca74d2.
//
// Solidity: function registerNode(address wallet, string aliasIdentifier, string[] gpuTypes, uint256[] gpuNums) payable returns()
func (_NodesRegistryImpl *NodesRegistryImplTransactorSession) RegisterNode(wallet common.Address, aliasIdentifier string, gpuTypes []string, gpuNums []*big.Int) (*types.Transaction, error) {
	return _NodesRegistryImpl.Contract.RegisterNode(&_NodesRegistryImpl.TransactOpts, wallet, aliasIdentifier, gpuTypes, gpuNums)
}

// NodesRegistryImplAuthorizedIterator is returned from FilterAuthorized and is used to iterate over the raw logs and unpacked data for Authorized events raised by the NodesRegistryImpl contract.
type NodesRegistryImplAuthorizedIterator struct {
	Event *NodesRegistryImplAuthorized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NodesRegistryImplAuthorizedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NodesRegistryImplAuthorized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NodesRegistryImplAuthorized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NodesRegistryImplAuthorizedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NodesRegistryImplAuthorizedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NodesRegistryImplAuthorized represents a Authorized event raised by the NodesRegistryImpl contract.
type NodesRegistryImplAuthorized struct {
	Owner   common.Address
	Spender common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterAuthorized is a free log retrieval operation binding the contract event 0xf5a7f4fb8a92356e8c8c4ae7ac3589908381450500a7e2fd08c95600021ee889.
//
// Solidity: event Authorized(address indexed owner, address indexed spender)
func (_NodesRegistryImpl *NodesRegistryImplFilterer) FilterAuthorized(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*NodesRegistryImplAuthorizedIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _NodesRegistryImpl.contract.FilterLogs(opts, "Authorized", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &NodesRegistryImplAuthorizedIterator{contract: _NodesRegistryImpl.contract, event: "Authorized", logs: logs, sub: sub}, nil
}

// WatchAuthorized is a free log subscription operation binding the contract event 0xf5a7f4fb8a92356e8c8c4ae7ac3589908381450500a7e2fd08c95600021ee889.
//
// Solidity: event Authorized(address indexed owner, address indexed spender)
func (_NodesRegistryImpl *NodesRegistryImplFilterer) WatchAuthorized(opts *bind.WatchOpts, sink chan<- *NodesRegistryImplAuthorized, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _NodesRegistryImpl.contract.WatchLogs(opts, "Authorized", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NodesRegistryImplAuthorized)
				if err := _NodesRegistryImpl.contract.UnpackLog(event, "Authorized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAuthorized is a log parse operation binding the contract event 0xf5a7f4fb8a92356e8c8c4ae7ac3589908381450500a7e2fd08c95600021ee889.
//
// Solidity: event Authorized(address indexed owner, address indexed spender)
func (_NodesRegistryImpl *NodesRegistryImplFilterer) ParseAuthorized(log types.Log) (*NodesRegistryImplAuthorized, error) {
	event := new(NodesRegistryImplAuthorized)
	if err := _NodesRegistryImpl.contract.UnpackLog(event, "Authorized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NodesRegistryImplInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the NodesRegistryImpl contract.
type NodesRegistryImplInitializedIterator struct {
	Event *NodesRegistryImplInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NodesRegistryImplInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NodesRegistryImplInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NodesRegistryImplInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NodesRegistryImplInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NodesRegistryImplInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NodesRegistryImplInitialized represents a Initialized event raised by the NodesRegistryImpl contract.
type NodesRegistryImplInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_NodesRegistryImpl *NodesRegistryImplFilterer) FilterInitialized(opts *bind.FilterOpts) (*NodesRegistryImplInitializedIterator, error) {

	logs, sub, err := _NodesRegistryImpl.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &NodesRegistryImplInitializedIterator{contract: _NodesRegistryImpl.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_NodesRegistryImpl *NodesRegistryImplFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *NodesRegistryImplInitialized) (event.Subscription, error) {

	logs, sub, err := _NodesRegistryImpl.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NodesRegistryImplInitialized)
				if err := _NodesRegistryImpl.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_NodesRegistryImpl *NodesRegistryImplFilterer) ParseInitialized(log types.Log) (*NodesRegistryImplInitialized, error) {
	event := new(NodesRegistryImplInitialized)
	if err := _NodesRegistryImpl.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NodesRegistryImplNodeActivedIterator is returned from FilterNodeActived and is used to iterate over the raw logs and unpacked data for NodeActived events raised by the NodesRegistryImpl contract.
type NodesRegistryImplNodeActivedIterator struct {
	Event *NodesRegistryImplNodeActived // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NodesRegistryImplNodeActivedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NodesRegistryImplNodeActived)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NodesRegistryImplNodeActived)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NodesRegistryImplNodeActivedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NodesRegistryImplNodeActivedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NodesRegistryImplNodeActived represents a NodeActived event raised by the NodesRegistryImpl contract.
type NodesRegistryImplNodeActived struct {
	Wallet          common.Address
	Identifier      common.Address
	Time            *big.Int
	AliasIdentifier string
	GpuTypes        []string
	GpuNums         []*big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterNodeActived is a free log retrieval operation binding the contract event 0xb0a73f160683fa6bd1601bd25cd9e2addc090f0a74959bf51c6a2a4560af6f5f.
//
// Solidity: event NodeActived(address indexed wallet, address identifier, uint256 time, string aliasIdentifier, string[] gpuTypes, uint256[] gpuNums)
func (_NodesRegistryImpl *NodesRegistryImplFilterer) FilterNodeActived(opts *bind.FilterOpts, wallet []common.Address) (*NodesRegistryImplNodeActivedIterator, error) {

	var walletRule []interface{}
	for _, walletItem := range wallet {
		walletRule = append(walletRule, walletItem)
	}

	logs, sub, err := _NodesRegistryImpl.contract.FilterLogs(opts, "NodeActived", walletRule)
	if err != nil {
		return nil, err
	}
	return &NodesRegistryImplNodeActivedIterator{contract: _NodesRegistryImpl.contract, event: "NodeActived", logs: logs, sub: sub}, nil
}

// WatchNodeActived is a free log subscription operation binding the contract event 0xb0a73f160683fa6bd1601bd25cd9e2addc090f0a74959bf51c6a2a4560af6f5f.
//
// Solidity: event NodeActived(address indexed wallet, address identifier, uint256 time, string aliasIdentifier, string[] gpuTypes, uint256[] gpuNums)
func (_NodesRegistryImpl *NodesRegistryImplFilterer) WatchNodeActived(opts *bind.WatchOpts, sink chan<- *NodesRegistryImplNodeActived, wallet []common.Address) (event.Subscription, error) {

	var walletRule []interface{}
	for _, walletItem := range wallet {
		walletRule = append(walletRule, walletItem)
	}

	logs, sub, err := _NodesRegistryImpl.contract.WatchLogs(opts, "NodeActived", walletRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NodesRegistryImplNodeActived)
				if err := _NodesRegistryImpl.contract.UnpackLog(event, "NodeActived", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNodeActived is a log parse operation binding the contract event 0xb0a73f160683fa6bd1601bd25cd9e2addc090f0a74959bf51c6a2a4560af6f5f.
//
// Solidity: event NodeActived(address indexed wallet, address identifier, uint256 time, string aliasIdentifier, string[] gpuTypes, uint256[] gpuNums)
func (_NodesRegistryImpl *NodesRegistryImplFilterer) ParseNodeActived(log types.Log) (*NodesRegistryImplNodeActived, error) {
	event := new(NodesRegistryImplNodeActived)
	if err := _NodesRegistryImpl.contract.UnpackLog(event, "NodeActived", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NodesRegistryImplNodeAttachedIterator is returned from FilterNodeAttached and is used to iterate over the raw logs and unpacked data for NodeAttached events raised by the NodesRegistryImpl contract.
type NodesRegistryImplNodeAttachedIterator struct {
	Event *NodesRegistryImplNodeAttached // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NodesRegistryImplNodeAttachedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NodesRegistryImplNodeAttached)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NodesRegistryImplNodeAttached)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NodesRegistryImplNodeAttachedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NodesRegistryImplNodeAttachedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NodesRegistryImplNodeAttached represents a NodeAttached event raised by the NodesRegistryImpl contract.
type NodesRegistryImplNodeAttached struct {
	IdentifierOfProvider common.Address
	IdentifierOfServer   common.Address
	Raw                  types.Log // Blockchain specific contextual infos
}

// FilterNodeAttached is a free log retrieval operation binding the contract event 0x042e2dbbe7288392f225b5cc7f610946ae1a1e8673b3f8ce4f6fc3bc6dee5aa6.
//
// Solidity: event NodeAttached(address indexed identifierOfProvider, address indexed identifierOfServer)
func (_NodesRegistryImpl *NodesRegistryImplFilterer) FilterNodeAttached(opts *bind.FilterOpts, identifierOfProvider []common.Address, identifierOfServer []common.Address) (*NodesRegistryImplNodeAttachedIterator, error) {

	var identifierOfProviderRule []interface{}
	for _, identifierOfProviderItem := range identifierOfProvider {
		identifierOfProviderRule = append(identifierOfProviderRule, identifierOfProviderItem)
	}
	var identifierOfServerRule []interface{}
	for _, identifierOfServerItem := range identifierOfServer {
		identifierOfServerRule = append(identifierOfServerRule, identifierOfServerItem)
	}

	logs, sub, err := _NodesRegistryImpl.contract.FilterLogs(opts, "NodeAttached", identifierOfProviderRule, identifierOfServerRule)
	if err != nil {
		return nil, err
	}
	return &NodesRegistryImplNodeAttachedIterator{contract: _NodesRegistryImpl.contract, event: "NodeAttached", logs: logs, sub: sub}, nil
}

// WatchNodeAttached is a free log subscription operation binding the contract event 0x042e2dbbe7288392f225b5cc7f610946ae1a1e8673b3f8ce4f6fc3bc6dee5aa6.
//
// Solidity: event NodeAttached(address indexed identifierOfProvider, address indexed identifierOfServer)
func (_NodesRegistryImpl *NodesRegistryImplFilterer) WatchNodeAttached(opts *bind.WatchOpts, sink chan<- *NodesRegistryImplNodeAttached, identifierOfProvider []common.Address, identifierOfServer []common.Address) (event.Subscription, error) {

	var identifierOfProviderRule []interface{}
	for _, identifierOfProviderItem := range identifierOfProvider {
		identifierOfProviderRule = append(identifierOfProviderRule, identifierOfProviderItem)
	}
	var identifierOfServerRule []interface{}
	for _, identifierOfServerItem := range identifierOfServer {
		identifierOfServerRule = append(identifierOfServerRule, identifierOfServerItem)
	}

	logs, sub, err := _NodesRegistryImpl.contract.WatchLogs(opts, "NodeAttached", identifierOfProviderRule, identifierOfServerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NodesRegistryImplNodeAttached)
				if err := _NodesRegistryImpl.contract.UnpackLog(event, "NodeAttached", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNodeAttached is a log parse operation binding the contract event 0x042e2dbbe7288392f225b5cc7f610946ae1a1e8673b3f8ce4f6fc3bc6dee5aa6.
//
// Solidity: event NodeAttached(address indexed identifierOfProvider, address indexed identifierOfServer)
func (_NodesRegistryImpl *NodesRegistryImplFilterer) ParseNodeAttached(log types.Log) (*NodesRegistryImplNodeAttached, error) {
	event := new(NodesRegistryImplNodeAttached)
	if err := _NodesRegistryImpl.contract.UnpackLog(event, "NodeAttached", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NodesRegistryImplNodeDeregisteredIterator is returned from FilterNodeDeregistered and is used to iterate over the raw logs and unpacked data for NodeDeregistered events raised by the NodesRegistryImpl contract.
type NodesRegistryImplNodeDeregisteredIterator struct {
	Event *NodesRegistryImplNodeDeregistered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NodesRegistryImplNodeDeregisteredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NodesRegistryImplNodeDeregistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NodesRegistryImplNodeDeregistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NodesRegistryImplNodeDeregisteredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NodesRegistryImplNodeDeregisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NodesRegistryImplNodeDeregistered represents a NodeDeregistered event raised by the NodesRegistryImpl contract.
type NodesRegistryImplNodeDeregistered struct {
	Identifier      common.Address
	Time            *big.Int
	AliasIdentifier string
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterNodeDeregistered is a free log retrieval operation binding the contract event 0x60d01d146c7aa1a7d4e3fdd5543872f7d5b2a241980a66b3552ae1a86ae18453.
//
// Solidity: event NodeDeregistered(address indexed identifier, uint256 time, string aliasIdentifier)
func (_NodesRegistryImpl *NodesRegistryImplFilterer) FilterNodeDeregistered(opts *bind.FilterOpts, identifier []common.Address) (*NodesRegistryImplNodeDeregisteredIterator, error) {

	var identifierRule []interface{}
	for _, identifierItem := range identifier {
		identifierRule = append(identifierRule, identifierItem)
	}

	logs, sub, err := _NodesRegistryImpl.contract.FilterLogs(opts, "NodeDeregistered", identifierRule)
	if err != nil {
		return nil, err
	}
	return &NodesRegistryImplNodeDeregisteredIterator{contract: _NodesRegistryImpl.contract, event: "NodeDeregistered", logs: logs, sub: sub}, nil
}

// WatchNodeDeregistered is a free log subscription operation binding the contract event 0x60d01d146c7aa1a7d4e3fdd5543872f7d5b2a241980a66b3552ae1a86ae18453.
//
// Solidity: event NodeDeregistered(address indexed identifier, uint256 time, string aliasIdentifier)
func (_NodesRegistryImpl *NodesRegistryImplFilterer) WatchNodeDeregistered(opts *bind.WatchOpts, sink chan<- *NodesRegistryImplNodeDeregistered, identifier []common.Address) (event.Subscription, error) {

	var identifierRule []interface{}
	for _, identifierItem := range identifier {
		identifierRule = append(identifierRule, identifierItem)
	}

	logs, sub, err := _NodesRegistryImpl.contract.WatchLogs(opts, "NodeDeregistered", identifierRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NodesRegistryImplNodeDeregistered)
				if err := _NodesRegistryImpl.contract.UnpackLog(event, "NodeDeregistered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNodeDeregistered is a log parse operation binding the contract event 0x60d01d146c7aa1a7d4e3fdd5543872f7d5b2a241980a66b3552ae1a86ae18453.
//
// Solidity: event NodeDeregistered(address indexed identifier, uint256 time, string aliasIdentifier)
func (_NodesRegistryImpl *NodesRegistryImplFilterer) ParseNodeDeregistered(log types.Log) (*NodesRegistryImplNodeDeregistered, error) {
	event := new(NodesRegistryImplNodeDeregistered)
	if err := _NodesRegistryImpl.contract.UnpackLog(event, "NodeDeregistered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NodesRegistryImplNodeDetachedIterator is returned from FilterNodeDetached and is used to iterate over the raw logs and unpacked data for NodeDetached events raised by the NodesRegistryImpl contract.
type NodesRegistryImplNodeDetachedIterator struct {
	Event *NodesRegistryImplNodeDetached // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NodesRegistryImplNodeDetachedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NodesRegistryImplNodeDetached)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NodesRegistryImplNodeDetached)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NodesRegistryImplNodeDetachedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NodesRegistryImplNodeDetachedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NodesRegistryImplNodeDetached represents a NodeDetached event raised by the NodesRegistryImpl contract.
type NodesRegistryImplNodeDetached struct {
	IdentifierOfProvider common.Address
	IdentifierOfServer   common.Address
	Raw                  types.Log // Blockchain specific contextual infos
}

// FilterNodeDetached is a free log retrieval operation binding the contract event 0x864dd06d15940858b627540246db79e66082ff76b9712b0bb5d483d168b1cd18.
//
// Solidity: event NodeDetached(address indexed identifierOfProvider, address indexed identifierOfServer)
func (_NodesRegistryImpl *NodesRegistryImplFilterer) FilterNodeDetached(opts *bind.FilterOpts, identifierOfProvider []common.Address, identifierOfServer []common.Address) (*NodesRegistryImplNodeDetachedIterator, error) {

	var identifierOfProviderRule []interface{}
	for _, identifierOfProviderItem := range identifierOfProvider {
		identifierOfProviderRule = append(identifierOfProviderRule, identifierOfProviderItem)
	}
	var identifierOfServerRule []interface{}
	for _, identifierOfServerItem := range identifierOfServer {
		identifierOfServerRule = append(identifierOfServerRule, identifierOfServerItem)
	}

	logs, sub, err := _NodesRegistryImpl.contract.FilterLogs(opts, "NodeDetached", identifierOfProviderRule, identifierOfServerRule)
	if err != nil {
		return nil, err
	}
	return &NodesRegistryImplNodeDetachedIterator{contract: _NodesRegistryImpl.contract, event: "NodeDetached", logs: logs, sub: sub}, nil
}

// WatchNodeDetached is a free log subscription operation binding the contract event 0x864dd06d15940858b627540246db79e66082ff76b9712b0bb5d483d168b1cd18.
//
// Solidity: event NodeDetached(address indexed identifierOfProvider, address indexed identifierOfServer)
func (_NodesRegistryImpl *NodesRegistryImplFilterer) WatchNodeDetached(opts *bind.WatchOpts, sink chan<- *NodesRegistryImplNodeDetached, identifierOfProvider []common.Address, identifierOfServer []common.Address) (event.Subscription, error) {

	var identifierOfProviderRule []interface{}
	for _, identifierOfProviderItem := range identifierOfProvider {
		identifierOfProviderRule = append(identifierOfProviderRule, identifierOfProviderItem)
	}
	var identifierOfServerRule []interface{}
	for _, identifierOfServerItem := range identifierOfServer {
		identifierOfServerRule = append(identifierOfServerRule, identifierOfServerItem)
	}

	logs, sub, err := _NodesRegistryImpl.contract.WatchLogs(opts, "NodeDetached", identifierOfProviderRule, identifierOfServerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NodesRegistryImplNodeDetached)
				if err := _NodesRegistryImpl.contract.UnpackLog(event, "NodeDetached", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNodeDetached is a log parse operation binding the contract event 0x864dd06d15940858b627540246db79e66082ff76b9712b0bb5d483d168b1cd18.
//
// Solidity: event NodeDetached(address indexed identifierOfProvider, address indexed identifierOfServer)
func (_NodesRegistryImpl *NodesRegistryImplFilterer) ParseNodeDetached(log types.Log) (*NodesRegistryImplNodeDetached, error) {
	event := new(NodesRegistryImplNodeDetached)
	if err := _NodesRegistryImpl.contract.UnpackLog(event, "NodeDetached", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NodesRegistryImplNodeRegisteredIterator is returned from FilterNodeRegistered and is used to iterate over the raw logs and unpacked data for NodeRegistered events raised by the NodesRegistryImpl contract.
type NodesRegistryImplNodeRegisteredIterator struct {
	Event *NodesRegistryImplNodeRegistered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NodesRegistryImplNodeRegisteredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NodesRegistryImplNodeRegistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NodesRegistryImplNodeRegistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NodesRegistryImplNodeRegisteredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NodesRegistryImplNodeRegisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NodesRegistryImplNodeRegistered represents a NodeRegistered event raised by the NodesRegistryImpl contract.
type NodesRegistryImplNodeRegistered struct {
	Wallet          common.Address
	Identifier      common.Address
	Time            *big.Int
	AliasIdentifier string
	GpuTypes        []string
	GpuNums         []*big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterNodeRegistered is a free log retrieval operation binding the contract event 0x99c250edfb33141684f230eecda8aa955bf0d62d17bcaaab0ab43f318f3637b0.
//
// Solidity: event NodeRegistered(address indexed wallet, address identifier, uint256 time, string aliasIdentifier, string[] gpuTypes, uint256[] gpuNums)
func (_NodesRegistryImpl *NodesRegistryImplFilterer) FilterNodeRegistered(opts *bind.FilterOpts, wallet []common.Address) (*NodesRegistryImplNodeRegisteredIterator, error) {

	var walletRule []interface{}
	for _, walletItem := range wallet {
		walletRule = append(walletRule, walletItem)
	}

	logs, sub, err := _NodesRegistryImpl.contract.FilterLogs(opts, "NodeRegistered", walletRule)
	if err != nil {
		return nil, err
	}
	return &NodesRegistryImplNodeRegisteredIterator{contract: _NodesRegistryImpl.contract, event: "NodeRegistered", logs: logs, sub: sub}, nil
}

// WatchNodeRegistered is a free log subscription operation binding the contract event 0x99c250edfb33141684f230eecda8aa955bf0d62d17bcaaab0ab43f318f3637b0.
//
// Solidity: event NodeRegistered(address indexed wallet, address identifier, uint256 time, string aliasIdentifier, string[] gpuTypes, uint256[] gpuNums)
func (_NodesRegistryImpl *NodesRegistryImplFilterer) WatchNodeRegistered(opts *bind.WatchOpts, sink chan<- *NodesRegistryImplNodeRegistered, wallet []common.Address) (event.Subscription, error) {

	var walletRule []interface{}
	for _, walletItem := range wallet {
		walletRule = append(walletRule, walletItem)
	}

	logs, sub, err := _NodesRegistryImpl.contract.WatchLogs(opts, "NodeRegistered", walletRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NodesRegistryImplNodeRegistered)
				if err := _NodesRegistryImpl.contract.UnpackLog(event, "NodeRegistered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNodeRegistered is a log parse operation binding the contract event 0x99c250edfb33141684f230eecda8aa955bf0d62d17bcaaab0ab43f318f3637b0.
//
// Solidity: event NodeRegistered(address indexed wallet, address identifier, uint256 time, string aliasIdentifier, string[] gpuTypes, uint256[] gpuNums)
func (_NodesRegistryImpl *NodesRegistryImplFilterer) ParseNodeRegistered(log types.Log) (*NodesRegistryImplNodeRegistered, error) {
	event := new(NodesRegistryImplNodeRegistered)
	if err := _NodesRegistryImpl.contract.UnpackLog(event, "NodeRegistered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
