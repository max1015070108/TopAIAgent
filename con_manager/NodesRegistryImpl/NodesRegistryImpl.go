// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package NodesRegistryImpl

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// NodeComputeUsed is an auto generated low-level Go binding around an user-defined struct.
type NodeComputeUsed struct {
	Identifier common.Address
	GpuType    string
	Used       *big.Int
}

// NodeInfo is an auto generated low-level Go binding around an user-defined struct.
type NodeInfo struct {
	Identifier      common.Address
	AliasIdentifier string
	Wallet          common.Address
	GpuTypes        []string
	GpuNums         []*big.Int
}

// NodesRegistryComputeAvailable is an auto generated low-level Go binding around an user-defined struct.
type NodesRegistryComputeAvailable struct {
	GpuType  string
	TotalNum *big.Int
	Used     *big.Int
}

// NodesRegistryNode is an auto generated low-level Go binding around an user-defined struct.
type NodesRegistryNode struct {
	Identifier       common.Address
	AliasIdentifier  string
	RegistrationTime *big.Int
	Active           bool
	Gpus             []NodesRegistryComputeAvailable
	Wallet           common.Address
	Stake            *big.Int
}

// NodesRegistryImplMetaData contains all meta data concerning the NodesRegistryImpl contract.
var NodesRegistryImplMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"Authorized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"identifier\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"aliasIdentifier\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"gpuTypes\",\"type\":\"string[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"gpuNums\",\"type\":\"uint256[]\"}],\"name\":\"NodeActived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"identifierOfProvider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"identifierOfServer\",\"type\":\"address\"}],\"name\":\"NodeAttached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"identifier\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"aliasIdentifier\",\"type\":\"string\"}],\"name\":\"NodeDeregistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"identifierOfProvider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"identifierOfServer\",\"type\":\"address\"}],\"name\":\"NodeDetached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"identifier\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"aliasIdentifier\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"gpuTypes\",\"type\":\"string[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"gpuNums\",\"type\":\"uint256[]\"}],\"name\":\"NodeRegistered\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startIndex\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"gpuTypes\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"gpuNums\",\"type\":\"uint256[]\"}],\"name\":\"allocGPU\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"identifier\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"gpuType\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"used\",\"type\":\"uint256\"}],\"internalType\":\"structNodeComputeUsed[]\",\"name\":\"gpuNodes\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"len\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allocator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"at\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"identifier\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"aliasIdentifier\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"registrationTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"gpuType\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"used\",\"type\":\"uint256\"}],\"internalType\":\"structNodesRegistry.ComputeAvailable[]\",\"name\":\"gpus\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"}],\"internalType\":\"structNodesRegistry.Node\",\"name\":\"node\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"server\",\"type\":\"address\"}],\"name\":\"attach\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"identifier\",\"type\":\"address\"}],\"name\":\"check\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deregisterNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"server\",\"type\":\"address\"}],\"name\":\"detach\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"identifier\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"gpuType\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"used\",\"type\":\"uint256\"}],\"internalType\":\"structNodeComputeUsed[]\",\"name\":\"gpuNodes\",\"type\":\"tuple[]\"}],\"name\":\"freeGPU\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"identifier\",\"type\":\"address\"}],\"name\":\"get\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"identifier\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"aliasIdentifier\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"registrationTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"gpuType\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"used\",\"type\":\"uint256\"}],\"internalType\":\"structNodesRegistry.ComputeAvailable[]\",\"name\":\"gpus\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"}],\"internalType\":\"structNodesRegistry.Node\",\"name\":\"node\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"getAttach\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"gpuSummary\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"gpuType\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"used\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"gpuTypeOfNodes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"length\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"identifier\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"aliasIdentifier\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"gpuTypes\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"gpuNums\",\"type\":\"uint256[]\"}],\"internalType\":\"structNodeInfo[]\",\"name\":\"_nodesInfos\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"_allocator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakeToken\",\"type\":\"address\"}],\"name\":\"nodesRegistryImpl_initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"aliasIdentifier\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"gpuTypes\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"gpuNums\",\"type\":\"uint256[]\"}],\"name\":\"registerNode\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeToken\",\"outputs\":[{\"internalType\":\"contractIStake\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b50613405806100206000396000f3fe6080604052600436106100f35760003560e01c8063c23697a81161008a578063e0886f9011610059578063e0886f90146102c7578063ed38ed0d146102e7578063efca74d214610330578063f67c5bdc14610343576100f3565b8063c23697a81461021d578063c2bc2efc1461024d578063c7edca7a1461027a578063ceb6c343146102a7576100f3565b806351ed6a30116100c657806351ed6a30146101775780636252e1c2146101af5780637a0ca1e2146101dd578063aa5dcecc146101fd576100f3565b8063036fe9c2146100f857806318b1c0811461011a5780631f7b6d321461012f5780633edbf17914610157575b600080fd5b34801561010457600080fd5b50610118610113366004612b33565b610372565b005b34801561012657600080fd5b50610118610698565b34801561013b57600080fd5b506101446106a3565b6040519081526020015b60405180910390f35b34801561016357600080fd5b50610118610172366004612b72565b6106b4565b34801561018357600080fd5b50600954610197906001600160a01b031681565b6040516001600160a01b03909116815260200161014e565b3480156101bb57600080fd5b506101cf6101ca366004612c26565b61077d565b60405161014e929190613098565b3480156101e957600080fd5b506101186101f83660046129fd565b610ee6565b34801561020957600080fd5b50600854610197906001600160a01b031681565b34801561022957600080fd5b5061023d6102383660046129fd565b610fdd565b604051901515815260200161014e565b34801561025957600080fd5b5061026d6102683660046129fd565b611017565b60405161014e919061314d565b34801561028657600080fd5b5061029a6102953660046129fd565b611232565b60405161014e919061304b565b3480156102b357600080fd5b506101186102c23660046129fd565b61125c565b3480156102d357600080fd5b5061026d6102e2366004612c0e565b611357565b3480156102f357600080fd5b50610144610302366004612ae8565b6004602090815260009283526040909220815180830184018051928152908401929093019190912091525481565b61011861033e366004612a17565b611583565b34801561034f57600080fd5b5061036361035e366004612bd4565b6115a5565b60405161014e93929190613128565b6008546001600160a01b031633146103c65760405162461bcd60e51b815260206004820152601260248201527127b7363c903337b91030b63637b1b0ba37b960711b60448201526064015b60405180910390fd5b60005b818110156106935760008383838181106103f357634e487b7160e01b600052603260045260246000fd5b90506020028101906104059190613285565b6104139060208101906129fd565b90506001600160a01b0381166104605760405162461bcd60e51b815260206004820152601260248201527124b73b30b634b21034b232b73a34b334b2b960711b60448201526064016103bd565b6001600160a01b0381166000908152600260205260409020600381015460ff161561067e576001600160a01b038216600090815260046020526040812090818787878181106104bf57634e487b7160e01b600052603260045260246000fd5b90506020028101906104d19190613285565b6104df906020810190613241565b6040516104ed929190612e1b565b9081526020016040518091039020549050600081116105415760405162461bcd60e51b815260206004820152601060248201526f496e76616c696420677075207479706560801b60448201526064016103bd565b86868681811061056157634e487b7160e01b600052603260045260246000fd5b90506020028101906105739190613285565b60400135600484016105866001846132e6565b815481106105a457634e487b7160e01b600052603260045260246000fd5b906000526020600020906003020160020160008282546105c491906132e6565b909155506000905060058888888181106105ee57634e487b7160e01b600052603260045260246000fd5b90506020028101906106009190613285565b61060e906020810190613241565b60405161061c929190612e1b565b9081526020016040518091039020905087878781811061064c57634e487b7160e01b600052603260045260246000fd5b905060200281019061065e9190613285565b6040013581600201600082825461067591906132e6565b90915550505050505b5050808061068b90613368565b9150506103c9565b505050565b6106a13361165a565b565b60006106af60066119cb565b905090565b600054610100900460ff166106cf5760005460ff16156106d3565b303b155b6107365760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016103bd565b600054610100900460ff16158015610758576000805461ffff19166101011790555b610764858585856119d5565b8015610776576000805461ff00191690555b5050505050565b6008546060906000906001600160a01b031633146107d25760405162461bcd60e51b815260206004820152601260248201527127b7363c903337b91030b63637b1b0ba37b960711b60448201526064016103bd565b6000856001600160401b038111156107fa57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610823578160200160208202803683370190505b5090506000805b878110156109de57600060058a8a8481811061085657634e487b7160e01b600052603260045260246000fd5b90506020028101906108689190613241565b604051610876929190612e1b565b908152602001604051809103902090508787838181106108a657634e487b7160e01b600052603260045260246000fd5b90506020020135816002015482600101546108c191906132e6565b10156109035760405162461bcd60e51b81526020600482015260116024820152700cee0ea40d2e640dcdee840cadcdeeaced607b1b60448201526064016103bd565b87878381811061092357634e487b7160e01b600052603260045260246000fd5b9050602002013581600201600082825461093d91906132af565b90915550889050878381811061096357634e487b7160e01b600052603260045260246000fd5b9050602002013584838151811061098a57634e487b7160e01b600052603260045260246000fd5b6020026020010181815250508787838181106109b657634e487b7160e01b600052603260045260246000fd5b90506020020135836109c891906132af565b92505080806109d690613368565b91505061082a565b50866109ea60066119cb565b6109f491906132c7565b6001600160401b03811115610a1957634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610a7757816020015b610a64604051806060016040528060006001600160a01b0316815260200160608152602001600081525090565b815260200190600190039081610a375790505b509350885b610a8660066119cb565b610a90908b6132af565b81108015610a9e5750600082115b15610ed9576000610ac4610ab260066119cb565b610abc9084613383565b600690611cc4565b6001600160a01b038116600090815260026020526040902060038101549192509060ff16610af3575050610ec7565b6001600160a01b0382166000908152600460205260408120905b8b81108015610b1c5750600086115b15610ec2576000878281518110610b4357634e487b7160e01b600052603260045260246000fd5b602002602001015111610b5557610eb0565b6000828e8e84818110610b7857634e487b7160e01b600052603260045260246000fd5b9050602002810190610b8a9190613241565b604051610b98929190612e1b565b90815260200160405180910390205490508060001415610bb85750610eb0565b600060048501610bc96001846132e6565b81548110610be757634e487b7160e01b600052603260045260246000fd5b90600052602060002090600302019050600081600201548260010154610c0d91906132e6565b905060008111610c1f57505050610eb0565b868c8c81518110610c4057634e487b7160e01b600052603260045260246000fd5b60209081029190910101516001600160a01b0390911690528f8f85818110610c7857634e487b7160e01b600052603260045260246000fd5b9050602002810190610c8a9190613241565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250508e518f92508e91508110610ce057634e487b7160e01b600052603260045260246000fd5b602002602001015160200181905250808a8581518110610d1057634e487b7160e01b600052603260045260246000fd5b60200260200101511115610da157808a8581518110610d3f57634e487b7160e01b600052603260045260246000fd5b60200260200101818151610d5391906132e6565b905250610d60818a6132e6565b9850808c8c81518110610d8357634e487b7160e01b600052603260045260246000fd5b60209081029190910101516040015260018201546002830155610e9f565b898481518110610dc157634e487b7160e01b600052603260045260246000fd5b6020026020010151826002016000828254610ddc91906132af565b92505081905550898481518110610e0357634e487b7160e01b600052603260045260246000fd5b602002602001015189610e1691906132e6565b9850898481518110610e3857634e487b7160e01b600052603260045260246000fd5b60200260200101518c8c81518110610e6057634e487b7160e01b600052603260045260246000fd5b6020026020010151604001818152505060008a8581518110610e9257634e487b7160e01b600052603260045260246000fd5b6020026020010181815250505b610eaa60018c6132af565b9a505050505b80610eba81613368565b915050610b0d565b505050505b80610ed181613368565b915050610a7c565b5050509550959350505050565b33600090815260026020526040902080546001600160a01b0316610f475760405162461bcd60e51b81526020600482015260186024820152771259195b9d1a599a595c881b5d5cdd08189948195e1a5cdd60421b60448201526064016103bd565b33600090815260016020526040812090610f618285611cd7565b905080610fa15760405162461bcd60e51b815260206004820152600e60248201526d18da1a5b19081a5cc8195e1a5cdd60921b60448201526064016103bd565b6040516001600160a01b0385169033907f042e2dbbe7288392f225b5cc7f610946ae1a1e8673b3f8ce4f6fc3bc6dee5aa690600090a350505050565b6001600160a01b0381166000908152600260205260408120600381015460ff161561100c576001915050611012565b60009150505b919050565b61101f612731565b6001600160a01b03808316600090815260026020908152604091829020825160e0810190935280549093168252600183018054929392918401916110629061332d565b80601f016020809104026020016040519081016040528092919081815260200182805461108e9061332d565b80156110db5780601f106110b0576101008083540402835291602001916110db565b820191906000526020600020905b8154815290600101906020018083116110be57829003601f168201915b50505050508152602001600282015481526020016003820160009054906101000a900460ff1615151515815260200160048201805480602002602001604051908101604052809291908181526020016000905b8282101561120657838290600052602060002090600302016040518060600160405290816000820180546111619061332d565b80601f016020809104026020016040519081016040528092919081815260200182805461118d9061332d565b80156111da5780601f106111af576101008083540402835291602001916111da565b820191906000526020600020905b8154815290600101906020018083116111bd57829003601f168201915b50505050508152602001600182015481526020016002820154815250508152602001906001019061112e565b5050509082525060058201546001600160a01b0316602082015260069091015460409091015292915050565b6001600160a01b038116600090815260016020526040902060609061125690611cec565b92915050565b33600090815260026020526040902080546001600160a01b03166112bd5760405162461bcd60e51b81526020600482015260186024820152771259195b9d1a599a595c881b5d5cdd08189948195e1a5cdd60421b60448201526064016103bd565b336000908152600160205260408120906112d78285611cf9565b90508061131b5760405162461bcd60e51b815260206004820152601260248201527118da1a5b19081a5cc81b9bdd08195e1a5cdd60721b60448201526064016103bd565b6040516001600160a01b0385169033907f864dd06d15940858b627540246db79e66082ff76b9712b0bb5d483d168b1cd1890600090a350505050565b61135f612731565b600061136c600684611cc4565b6001600160a01b03808216600090815260026020908152604091829020825160e0810190935280549093168252600183018054949550919390840191906113b29061332d565b80601f01602080910402602001604051908101604052809291908181526020018280546113de9061332d565b801561142b5780601f106114005761010080835404028352916020019161142b565b820191906000526020600020905b81548152906001019060200180831161140e57829003601f168201915b50505050508152602001600282015481526020016003820160009054906101000a900460ff1615151515815260200160048201805480602002602001604051908101604052809291908181526020016000905b8282101561155657838290600052602060002090600302016040518060600160405290816000820180546114b19061332d565b80601f01602080910402602001604051908101604052809291908181526020018280546114dd9061332d565b801561152a5780601f106114ff5761010080835404028352916020019161152a565b820191906000526020600020905b81548152906001019060200180831161150d57829003601f168201915b50505050508152602001600182015481526020016002820154815250508152602001906001019061147e565b5050509082525060058201546001600160a01b031660208201526006909101546040909101529392505050565b6115938733888888888888611d0e565b61159c33612224565b50505050505050565b80516020818301810180516005825292820191909301209152805481906115cb9061332d565b80601f01602080910402602001604051908101604052809291908181526020018280546115f79061332d565b80156116445780601f1061161957610100808354040283529160200191611644565b820191906000526020600020905b81548152906001019060200180831161162757829003601f168201915b5050505050908060010154908060020154905083565b6001600160a01b0381166116a55760405162461bcd60e51b815260206004820152601260248201527124b73b30b634b21034b232b73a34b334b2b960711b60448201526064016103bd565b6001600160a01b03808216600090815260026020526040902080549091166117065760405162461bcd60e51b81526020600482015260146024820152731259195b9d1a599a595c881b9bdd08195e1a5cdd60621b60448201526064016103bd565b6001600160a01b0382166000908152600160205260409020611727906119cb565b156117745760405162461bcd60e51b815260206004820152601760248201527f4964656e74696669657220686173206368696c6472656e00000000000000000060448201526064016103bd565b60008160010180546117859061332d565b80601f01602080910402602001604051908101604052809291908181526020018280546117b19061332d565b80156117fe5780601f106117d3576101008083540402835291602001916117fe565b820191906000526020600020905b8154815290600101906020018083116117e157829003601f168201915b5050505050905060005b60048301548110156118db57600083600401828154811061183957634e487b7160e01b600052603260045260246000fd5b9060005260206000209060030201905080600101546005826000016040516118619190612e47565b9081526020016040518091039020600101600082825461188191906132e6565b9091555050600281015460405160059061189c908490612e47565b908152602001604051809103902060020160008282546118bc91906132e6565b90915550506000600290910155806118d381613368565b915050611808565b506003816040516118ec9190612e2b565b908152604080516020928190038301902080546001600160a01b03199081169091556001600160a01b03861660009081526002909352908220805490911681559061193a6001830182612782565b60006002830181905560038301805460ff1916905561195d9060048401906127be565b506005810180546001600160a01b031916905560006006918201556119829084611cf9565b50826001600160a01b03167f60d01d146c7aa1a7d4e3fdd5543872f7d5b2a241980a66b3552ae1a86ae1845342836040516119be9291906131e1565b60405180910390a2505050565b6000611256825490565b600054610100900460ff16611a405760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016103bd565b60005b83811015611bf057611b96858583818110611a6e57634e487b7160e01b600052603260045260246000fd5b9050602002810190611a80919061329a565b611a919060608101906040016129fd565b868684818110611ab157634e487b7160e01b600052603260045260246000fd5b9050602002810190611ac3919061329a565b611ad19060208101906129fd565b878785818110611af157634e487b7160e01b600052603260045260246000fd5b9050602002810190611b03919061329a565b611b11906020810190613241565b898987818110611b3157634e487b7160e01b600052603260045260246000fd5b9050602002810190611b43919061329a565b611b519060608101906131fa565b8b8b89818110611b7157634e487b7160e01b600052603260045260246000fd5b9050602002810190611b83919061329a565b611b919060808101906131fa565b611d0e565b611bde858583818110611bb957634e487b7160e01b600052603260045260246000fd5b9050602002810190611bcb919061329a565b611bd99060208101906129fd565b612230565b80611be881613368565b915050611a43565b506001600160a01b038216611c3b5760405162461bcd60e51b815260206004820152601160248201527024b73b30b634b21030b63637b1b0ba37b960791b60448201526064016103bd565b600880546001600160a01b0319166001600160a01b03848116919091179091558116611c9f5760405162461bcd60e51b815260206004820152601360248201527224b73b30b634b21039ba30b5b2903a37b5b2b760691b60448201526064016103bd565b600980546001600160a01b0319166001600160a01b0392909216919091179055505050565b6000611cd08383612531565b9392505050565b6000611cd0836001600160a01b038416612569565b60606000611cd0836125b8565b6000611cd0836001600160a01b038416612614565b8281148015611d1c57508015155b611d5b5760405162461bcd60e51b815260206004820152601060248201526f496e76616c696420475055206461746160801b60448201526064016103bd565b6001600160a01b03881615801590611d7b57506001600160a01b03871615155b8015611d8657508415155b611dd25760405162461bcd60e51b815260206004820152601c60248201527f496e76616c69642077616c6c6574206f72206964656e7469666965720000000060448201526064016103bd565b6001600160a01b038088166000908152600260205260409020805490911615611e305760405162461bcd60e51b815260206004820152601060248201526f1259195b9d1a599a595c88195e1a5cdd60821b60448201526064016103bd565b60006001600160a01b031660038888604051611e4d929190612e1b565b908152604051908190036020019020546001600160a01b031614611eac5760405162461bcd60e51b8152602060048201526016602482015275105b1a585cc81a59195b9d1a599a595c88195e1a5cdd60521b60448201526064016103bd565b6001600160a01b03888116600081815260046020526040902083546001600160a01b03199081169092178455426002850155600584018054909216928c16929092179055611efe6001830189896127df565b5034600683015560005b8581101561218657826004016040518060600160405280898985818110611f3f57634e487b7160e01b600052603260045260246000fd5b9050602002810190611f519190613241565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505090825250602001878785818110611fab57634e487b7160e01b600052603260045260246000fd5b60209081029290920135835250600091810182905283546001810185559382529081902082518051939460030290910192611fe99284920190612863565b506020820151600182015560409091015160029091015560048301548288888481811061202657634e487b7160e01b600052603260045260246000fd5b90506020028101906120389190613241565b604051612046929190612e1b565b9081526040519081900360200190205584848281811061207657634e487b7160e01b600052603260045260246000fd5b90506020020135600588888481811061209f57634e487b7160e01b600052603260045260246000fd5b90506020028101906120b19190613241565b6040516120bf929190612e1b565b908152602001604051809103902060010160008282546120df91906132af565b90915550879050868281811061210557634e487b7160e01b600052603260045260246000fd5b90506020028101906121179190613241565b600589898581811061213957634e487b7160e01b600052603260045260246000fd5b905060200281019061214b9190613241565b604051612159929190612e1b565b9081526040519081900360200190206121739290916127df565b508061217e81613368565b915050611f08565b5061219260068a611cd7565b5088600389896040516121a6929190612e1b565b90815260405190819003602001812080546001600160a01b039384166001600160a01b0319909116179055908b16907f99c250edfb33141684f230eecda8aa955bf0d62d17bcaaab0ab43f318f3637b090612210908c9042908d908d908d908d908d908d90612eb6565b60405180910390a250505050505050505050565b61222d81612230565b50565b6001600160a01b03808216600090815260026020526040902080549091166122915760405162461bcd60e51b81526020600482015260146024820152731259195b9d1a599a595c881b9bdd08195e1a5cdd60621b60448201526064016103bd565b600381015460ff1661252d5760038101805460ff1916600117905560048101546000906001600160401b038111156122d957634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561230c57816020015b60608152602001906001900390816122f75790505b5060048301549091506000906001600160401b0381111561233d57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015612366578160200160208202803683370190505b50905060005b60048401548110156124d25783600401818154811061239b57634e487b7160e01b600052603260045260246000fd5b906000526020600020906003020160000180546123b79061332d565b80601f01602080910402602001604051908101604052809291908181526020018280546123e39061332d565b80156124305780601f1061240557610100808354040283529160200191612430565b820191906000526020600020905b81548152906001019060200180831161241357829003601f168201915b505050505083828151811061245557634e487b7160e01b600052603260045260246000fd5b602002602001018190525083600401818154811061248357634e487b7160e01b600052603260045260246000fd5b9060005260206000209060030201600101548282815181106124b557634e487b7160e01b600052603260045260246000fd5b6020908102919091010152806124ca81613368565b91505061236c565b50600583015483546040516001600160a01b03928316927fb0a73f160683fa6bd1601bd25cd9e2addc090f0a74959bf51c6a2a4560af6f5f92612522929116904290600189019088908890612f8b565b60405180910390a250505b5050565b600082600001828154811061255657634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905092915050565b60008181526001830160205260408120546125b057508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155611256565b506000611256565b60608160000180548060200260200160405190810160405280929190818152602001828054801561260857602002820191906000526020600020905b8154815260200190600101908083116125f4575b50505050509050919050565b600081815260018301602052604081205480156127275760006126386001836132e6565b855490915060009061264c906001906132e6565b90508181146126cd57600086600001828154811061267a57634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050808760000184815481106126ab57634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255918252600188019052604090208390555b85548690806126ec57634e487b7160e01b600052603160045260246000fd5b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050611256565b6000915050611256565b6040518060e0016040528060006001600160a01b0316815260200160608152602001600081526020016000151581526020016060815260200160006001600160a01b03168152602001600081525090565b50805461278e9061332d565b6000825580601f106127a0575061222d565b601f01602090049060005260206000209081019061222d91906128d7565b508054600082556003029060005260206000209081019061222d91906128ec565b8280546127eb9061332d565b90600052602060002090601f01602090048101928261280d5760008555612853565b82601f106128265782800160ff19823516178555612853565b82800160010185558215612853579182015b82811115612853578235825591602001919060010190612838565b5061285f9291506128d7565b5090565b82805461286f9061332d565b90600052602060002090601f0160209004810192826128915760008555612853565b82601f106128aa57805160ff1916838001178555612853565b82800160010185558215612853579182015b828111156128535782518255916020019190600101906128bc565b5b8082111561285f57600081556001016128d8565b8082111561285f5760006129008282612782565b5060006001820181905560028201556003016128ec565b80356001600160a01b038116811461101257600080fd5b60008083601f84011261293f578081fd5b5081356001600160401b03811115612955578182fd5b6020830191508360208260051b850101111561297057600080fd5b9250929050565b600082601f830112612987578081fd5b81356001600160401b03808211156129a1576129a16133b9565b604051601f8301601f19908116603f011681019082821181831017156129c9576129c96133b9565b816040528381528660208588010111156129e1578485fd5b8360208701602083013792830160200193909352509392505050565b600060208284031215612a0e578081fd5b611cd082612917565b60008060008060008060006080888a031215612a31578283fd5b612a3a88612917565b965060208801356001600160401b0380821115612a55578485fd5b818a0191508a601f830112612a68578485fd5b813581811115612a76578586fd5b8b6020828501011115612a87578586fd5b6020830198508097505060408a0135915080821115612aa4578485fd5b612ab08b838c0161292e565b909650945060608a0135915080821115612ac8578384fd5b50612ad58a828b0161292e565b989b979a50959850939692959293505050565b60008060408385031215612afa578182fd5b612b0383612917565b915060208301356001600160401b03811115612b1d578182fd5b612b2985828601612977565b9150509250929050565b60008060208385031215612b45578182fd5b82356001600160401b03811115612b5a578283fd5b612b668582860161292e565b90969095509350505050565b60008060008060608587031215612b87578384fd5b84356001600160401b03811115612b9c578485fd5b612ba88782880161292e565b9095509350612bbb905060208601612917565b9150612bc960408601612917565b905092959194509250565b600060208284031215612be5578081fd5b81356001600160401b03811115612bfa578182fd5b612c0684828501612977565b949350505050565b600060208284031215612c1f578081fd5b5035919050565b600080600080600060608688031215612c3d578081fd5b8535945060208601356001600160401b0380821115612c5a578283fd5b612c6689838a0161292e565b90965094506040880135915080821115612c7e578283fd5b50612c8b8882890161292e565b969995985093965092949392505050565b600081518084526020808501808196508360051b81019150828601855b85811015612ce3578284038952612cd1848351612def565b98850198935090840190600101612cb9565b5091979650505050505050565b600081518084526020808501808196508360051b81019150828601855b85811015612ce3578284038952815160608151818752612d2f82880182612def565b83890151888a0152604093840151939097019290925250509784019790840190600101612d0d565b81835260006001600160fb1b03831115612d6f578081fd5b8260051b80836020870137939093016020019283525090919050565b6000815180845260208085019450808401835b83811015612dba57815187529582019590820190600101612d9e565b509495945050505050565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b60008151808452612e078160208601602086016132fd565b601f01601f19169290920160200192915050565b6000828483379101908152919050565b60008251612e3d8184602087016132fd565b9190910192915050565b6000808354612e558161332d565b60018281168015612e6d5760018114612e7e57612eaa565b60ff19841687528287019450612eaa565b8786526020808720875b85811015612ea15781548a820152908401908201612e88565b50505082870194505b50929695505050505050565b600060018060a01b038a1682526020898184015260a06040840152612edf60a08401898b612dc5565b8381036060850152868152818101600588901b8201830189855b8a811015612f6457848303601f190184528135368d9003601e19018112612f1e578788fd5b8c0180356001600160401b03811115612f35578889fd5b8036038e1315612f43578889fd5b612f5085828a8501612dc5565b958801959450505090850190600101612ef9565b50508581036080870152612f7981888a612d57565b9e9d5050505050505050505050505050565b600060018060a01b03871682526020868184015260a06040840152818654612fb28161332d565b8060a087015260c0600180841660008114612fd45760018114612fe857613013565b60ff1985168984015260e089019550613013565b8b8852868820885b8581101561300b5781548b8201860152908301908801612ff0565b8a0184019650505b5050505050838103606085015261302a8187612c9c565b915050828103608084015261303f8185612d8b565b98975050505050505050565b6020808252825182820181905260009190848201906040850190845b8181101561308c5783516001600160a01b031683529284019291840191600101613067565b50909695505050505050565b60006040808301818452808651808352606092508286019150828160051b8701016020808a01875b8481101561311357898403605f19018652815180516001600160a01b03168552838101518486018990526130f689870182612def565b918a0151958a0195909552958301959350908201906001016130c0565b50509690960196909652509295945050505050565b60006060825261313b6060830186612def565b60208301949094525060400152919050565b602080825282516001600160a01b03168282015282015160e0604083015260009061317c610100840182612def565b9050604084015160608401526060840151151560808401526080840151601f198483030160a08501526131af8282612cf0565b91505060a08401516131cc60c08501826001600160a01b03169052565b5060c084015160e08401528091505092915050565b600083825260406020830152612c066040830184612def565b6000808335601e19843603018112613210578283fd5b8301803591506001600160401b03821115613229578283fd5b6020019150600581901b360382131561297057600080fd5b6000808335601e19843603018112613257578283fd5b8301803591506001600160401b03821115613270578283fd5b60200191503681900382131561297057600080fd5b60008235605e19833603018112612e3d578182fd5b60008235609e19833603018112612e3d578182fd5b600082198211156132c2576132c26133a3565b500190565b60008160001904831182151516156132e1576132e16133a3565b500290565b6000828210156132f8576132f86133a3565b500390565b60005b83811015613318578181015183820152602001613300565b83811115613327576000848401525b50505050565b600181811c9082168061334157607f821691505b6020821081141561336257634e487b7160e01b600052602260045260246000fd5b50919050565b600060001982141561337c5761337c6133a3565b5060010190565b60008261339e57634e487b7160e01b81526012600452602481fd5b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea26469706673582212207280b5454c63dd155fc4d4c54c3c9c7b921f32dfb20bf14628525e199dcbc28b64736f6c63430008030033",
}

// NodesRegistryImplABI is the input ABI used to generate the binding from.
// Deprecated: Use NodesRegistryImplMetaData.ABI instead.
var NodesRegistryImplABI = NodesRegistryImplMetaData.ABI

// NodesRegistryImplBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use NodesRegistryImplMetaData.Bin instead.
var NodesRegistryImplBin = NodesRegistryImplMetaData.Bin

// DeployNodesRegistryImpl deploys a new Ethereum contract, binding an instance of NodesRegistryImpl to it.
func DeployNodesRegistryImpl(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *NodesRegistryImpl, error) {
	parsed, err := NodesRegistryImplMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(NodesRegistryImplBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &NodesRegistryImpl{NodesRegistryImplCaller: NodesRegistryImplCaller{contract: contract}, NodesRegistryImplTransactor: NodesRegistryImplTransactor{contract: contract}, NodesRegistryImplFilterer: NodesRegistryImplFilterer{contract: contract}}, nil
}

// NodesRegistryImpl is an auto generated Go binding around an Ethereum contract.
type NodesRegistryImpl struct {
	NodesRegistryImplCaller     // Read-only binding to the contract
	NodesRegistryImplTransactor // Write-only binding to the contract
	NodesRegistryImplFilterer   // Log filterer for contract events
}

// NodesRegistryImplCaller is an auto generated read-only Go binding around an Ethereum contract.
type NodesRegistryImplCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NodesRegistryImplTransactor is an auto generated write-only Go binding around an Ethereum contract.
type NodesRegistryImplTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NodesRegistryImplFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type NodesRegistryImplFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NodesRegistryImplSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type NodesRegistryImplSession struct {
	Contract     *NodesRegistryImpl // Generic contract binding to set the session for
	CallOpts     bind.CallOpts      // Call options to use throughout this session
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// NodesRegistryImplCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type NodesRegistryImplCallerSession struct {
	Contract *NodesRegistryImplCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts            // Call options to use throughout this session
}

// NodesRegistryImplTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type NodesRegistryImplTransactorSession struct {
	Contract     *NodesRegistryImplTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts            // Transaction auth options to use throughout this session
}

// NodesRegistryImplRaw is an auto generated low-level Go binding around an Ethereum contract.
type NodesRegistryImplRaw struct {
	Contract *NodesRegistryImpl // Generic contract binding to access the raw methods on
}

// NodesRegistryImplCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type NodesRegistryImplCallerRaw struct {
	Contract *NodesRegistryImplCaller // Generic read-only contract binding to access the raw methods on
}

// NodesRegistryImplTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type NodesRegistryImplTransactorRaw struct {
	Contract *NodesRegistryImplTransactor // Generic write-only contract binding to access the raw methods on
}

// NewNodesRegistryImpl creates a new instance of NodesRegistryImpl, bound to a specific deployed contract.
func NewNodesRegistryImpl(address common.Address, backend bind.ContractBackend) (*NodesRegistryImpl, error) {
	contract, err := bindNodesRegistryImpl(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &NodesRegistryImpl{NodesRegistryImplCaller: NodesRegistryImplCaller{contract: contract}, NodesRegistryImplTransactor: NodesRegistryImplTransactor{contract: contract}, NodesRegistryImplFilterer: NodesRegistryImplFilterer{contract: contract}}, nil
}

// NewNodesRegistryImplCaller creates a new read-only instance of NodesRegistryImpl, bound to a specific deployed contract.
func NewNodesRegistryImplCaller(address common.Address, caller bind.ContractCaller) (*NodesRegistryImplCaller, error) {
	contract, err := bindNodesRegistryImpl(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &NodesRegistryImplCaller{contract: contract}, nil
}

// NewNodesRegistryImplTransactor creates a new write-only instance of NodesRegistryImpl, bound to a specific deployed contract.
func NewNodesRegistryImplTransactor(address common.Address, transactor bind.ContractTransactor) (*NodesRegistryImplTransactor, error) {
	contract, err := bindNodesRegistryImpl(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &NodesRegistryImplTransactor{contract: contract}, nil
}

// NewNodesRegistryImplFilterer creates a new log filterer instance of NodesRegistryImpl, bound to a specific deployed contract.
func NewNodesRegistryImplFilterer(address common.Address, filterer bind.ContractFilterer) (*NodesRegistryImplFilterer, error) {
	contract, err := bindNodesRegistryImpl(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &NodesRegistryImplFilterer{contract: contract}, nil
}

// bindNodesRegistryImpl binds a generic wrapper to an already deployed contract.
func bindNodesRegistryImpl(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := NodesRegistryImplMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_NodesRegistryImpl *NodesRegistryImplRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _NodesRegistryImpl.Contract.NodesRegistryImplCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_NodesRegistryImpl *NodesRegistryImplRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _NodesRegistryImpl.Contract.NodesRegistryImplTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_NodesRegistryImpl *NodesRegistryImplRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _NodesRegistryImpl.Contract.NodesRegistryImplTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_NodesRegistryImpl *NodesRegistryImplCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _NodesRegistryImpl.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_NodesRegistryImpl *NodesRegistryImplTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _NodesRegistryImpl.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_NodesRegistryImpl *NodesRegistryImplTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _NodesRegistryImpl.Contract.contract.Transact(opts, method, params...)
}

// Allocator is a free data retrieval call binding the contract method 0xaa5dcecc.
//
// Solidity: function allocator() view returns(address)
func (_NodesRegistryImpl *NodesRegistryImplCaller) Allocator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _NodesRegistryImpl.contract.Call(opts, &out, "allocator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Allocator is a free data retrieval call binding the contract method 0xaa5dcecc.
//
// Solidity: function allocator() view returns(address)
func (_NodesRegistryImpl *NodesRegistryImplSession) Allocator() (common.Address, error) {
	return _NodesRegistryImpl.Contract.Allocator(&_NodesRegistryImpl.CallOpts)
}

// Allocator is a free data retrieval call binding the contract method 0xaa5dcecc.
//
// Solidity: function allocator() view returns(address)
func (_NodesRegistryImpl *NodesRegistryImplCallerSession) Allocator() (common.Address, error) {
	return _NodesRegistryImpl.Contract.Allocator(&_NodesRegistryImpl.CallOpts)
}

// At is a free data retrieval call binding the contract method 0xe0886f90.
//
// Solidity: function at(uint256 index) view returns((address,string,uint256,bool,(string,uint256,uint256)[],address,uint256) node)
func (_NodesRegistryImpl *NodesRegistryImplCaller) At(opts *bind.CallOpts, index *big.Int) (NodesRegistryNode, error) {
	var out []interface{}
	err := _NodesRegistryImpl.contract.Call(opts, &out, "at", index)

	if err != nil {
		return *new(NodesRegistryNode), err
	}

	out0 := *abi.ConvertType(out[0], new(NodesRegistryNode)).(*NodesRegistryNode)

	return out0, err

}

// At is a free data retrieval call binding the contract method 0xe0886f90.
//
// Solidity: function at(uint256 index) view returns((address,string,uint256,bool,(string,uint256,uint256)[],address,uint256) node)
func (_NodesRegistryImpl *NodesRegistryImplSession) At(index *big.Int) (NodesRegistryNode, error) {
	return _NodesRegistryImpl.Contract.At(&_NodesRegistryImpl.CallOpts, index)
}

// At is a free data retrieval call binding the contract method 0xe0886f90.
//
// Solidity: function at(uint256 index) view returns((address,string,uint256,bool,(string,uint256,uint256)[],address,uint256) node)
func (_NodesRegistryImpl *NodesRegistryImplCallerSession) At(index *big.Int) (NodesRegistryNode, error) {
	return _NodesRegistryImpl.Contract.At(&_NodesRegistryImpl.CallOpts, index)
}

// Check is a free data retrieval call binding the contract method 0xc23697a8.
//
// Solidity: function check(address identifier) view returns(bool)
func (_NodesRegistryImpl *NodesRegistryImplCaller) Check(opts *bind.CallOpts, identifier common.Address) (bool, error) {
	var out []interface{}
	err := _NodesRegistryImpl.contract.Call(opts, &out, "check", identifier)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Check is a free data retrieval call binding the contract method 0xc23697a8.
//
// Solidity: function check(address identifier) view returns(bool)
func (_NodesRegistryImpl *NodesRegistryImplSession) Check(identifier common.Address) (bool, error) {
	return _NodesRegistryImpl.Contract.Check(&_NodesRegistryImpl.CallOpts, identifier)
}

// Check is a free data retrieval call binding the contract method 0xc23697a8.
//
// Solidity: function check(address identifier) view returns(bool)
func (_NodesRegistryImpl *NodesRegistryImplCallerSession) Check(identifier common.Address) (bool, error) {
	return _NodesRegistryImpl.Contract.Check(&_NodesRegistryImpl.CallOpts, identifier)
}

// Get is a free data retrieval call binding the contract method 0xc2bc2efc.
//
// Solidity: function get(address identifier) view returns((address,string,uint256,bool,(string,uint256,uint256)[],address,uint256) node)
func (_NodesRegistryImpl *NodesRegistryImplCaller) Get(opts *bind.CallOpts, identifier common.Address) (NodesRegistryNode, error) {
	var out []interface{}
	err := _NodesRegistryImpl.contract.Call(opts, &out, "get", identifier)

	if err != nil {
		return *new(NodesRegistryNode), err
	}

	out0 := *abi.ConvertType(out[0], new(NodesRegistryNode)).(*NodesRegistryNode)

	return out0, err

}

// Get is a free data retrieval call binding the contract method 0xc2bc2efc.
//
// Solidity: function get(address identifier) view returns((address,string,uint256,bool,(string,uint256,uint256)[],address,uint256) node)
func (_NodesRegistryImpl *NodesRegistryImplSession) Get(identifier common.Address) (NodesRegistryNode, error) {
	return _NodesRegistryImpl.Contract.Get(&_NodesRegistryImpl.CallOpts, identifier)
}

// Get is a free data retrieval call binding the contract method 0xc2bc2efc.
//
// Solidity: function get(address identifier) view returns((address,string,uint256,bool,(string,uint256,uint256)[],address,uint256) node)
func (_NodesRegistryImpl *NodesRegistryImplCallerSession) Get(identifier common.Address) (NodesRegistryNode, error) {
	return _NodesRegistryImpl.Contract.Get(&_NodesRegistryImpl.CallOpts, identifier)
}

// GetAttach is a free data retrieval call binding the contract method 0xc7edca7a.
//
// Solidity: function getAttach(address provider) view returns(address[])
func (_NodesRegistryImpl *NodesRegistryImplCaller) GetAttach(opts *bind.CallOpts, provider common.Address) ([]common.Address, error) {
	var out []interface{}
	err := _NodesRegistryImpl.contract.Call(opts, &out, "getAttach", provider)

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetAttach is a free data retrieval call binding the contract method 0xc7edca7a.
//
// Solidity: function getAttach(address provider) view returns(address[])
func (_NodesRegistryImpl *NodesRegistryImplSession) GetAttach(provider common.Address) ([]common.Address, error) {
	return _NodesRegistryImpl.Contract.GetAttach(&_NodesRegistryImpl.CallOpts, provider)
}

// GetAttach is a free data retrieval call binding the contract method 0xc7edca7a.
//
// Solidity: function getAttach(address provider) view returns(address[])
func (_NodesRegistryImpl *NodesRegistryImplCallerSession) GetAttach(provider common.Address) ([]common.Address, error) {
	return _NodesRegistryImpl.Contract.GetAttach(&_NodesRegistryImpl.CallOpts, provider)
}

// GpuSummary is a free data retrieval call binding the contract method 0xf67c5bdc.
//
// Solidity: function gpuSummary(string ) view returns(string gpuType, uint256 totalNum, uint256 used)
func (_NodesRegistryImpl *NodesRegistryImplCaller) GpuSummary(opts *bind.CallOpts, arg0 string) (struct {
	GpuType  string
	TotalNum *big.Int
	Used     *big.Int
}, error) {
	var out []interface{}
	err := _NodesRegistryImpl.contract.Call(opts, &out, "gpuSummary", arg0)

	outstruct := new(struct {
		GpuType  string
		TotalNum *big.Int
		Used     *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.GpuType = *abi.ConvertType(out[0], new(string)).(*string)
	outstruct.TotalNum = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.Used = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// GpuSummary is a free data retrieval call binding the contract method 0xf67c5bdc.
//
// Solidity: function gpuSummary(string ) view returns(string gpuType, uint256 totalNum, uint256 used)
func (_NodesRegistryImpl *NodesRegistryImplSession) GpuSummary(arg0 string) (struct {
	GpuType  string
	TotalNum *big.Int
	Used     *big.Int
}, error) {
	return _NodesRegistryImpl.Contract.GpuSummary(&_NodesRegistryImpl.CallOpts, arg0)
}

// GpuSummary is a free data retrieval call binding the contract method 0xf67c5bdc.
//
// Solidity: function gpuSummary(string ) view returns(string gpuType, uint256 totalNum, uint256 used)
func (_NodesRegistryImpl *NodesRegistryImplCallerSession) GpuSummary(arg0 string) (struct {
	GpuType  string
	TotalNum *big.Int
	Used     *big.Int
}, error) {
	return _NodesRegistryImpl.Contract.GpuSummary(&_NodesRegistryImpl.CallOpts, arg0)
}

// GpuTypeOfNodes is a free data retrieval call binding the contract method 0xed38ed0d.
//
// Solidity: function gpuTypeOfNodes(address , string ) view returns(uint256)
func (_NodesRegistryImpl *NodesRegistryImplCaller) GpuTypeOfNodes(opts *bind.CallOpts, arg0 common.Address, arg1 string) (*big.Int, error) {
	var out []interface{}
	err := _NodesRegistryImpl.contract.Call(opts, &out, "gpuTypeOfNodes", arg0, arg1)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GpuTypeOfNodes is a free data retrieval call binding the contract method 0xed38ed0d.
//
// Solidity: function gpuTypeOfNodes(address , string ) view returns(uint256)
func (_NodesRegistryImpl *NodesRegistryImplSession) GpuTypeOfNodes(arg0 common.Address, arg1 string) (*big.Int, error) {
	return _NodesRegistryImpl.Contract.GpuTypeOfNodes(&_NodesRegistryImpl.CallOpts, arg0, arg1)
}

// GpuTypeOfNodes is a free data retrieval call binding the contract method 0xed38ed0d.
//
// Solidity: function gpuTypeOfNodes(address , string ) view returns(uint256)
func (_NodesRegistryImpl *NodesRegistryImplCallerSession) GpuTypeOfNodes(arg0 common.Address, arg1 string) (*big.Int, error) {
	return _NodesRegistryImpl.Contract.GpuTypeOfNodes(&_NodesRegistryImpl.CallOpts, arg0, arg1)
}

// Length is a free data retrieval call binding the contract method 0x1f7b6d32.
//
// Solidity: function length() view returns(uint256)
func (_NodesRegistryImpl *NodesRegistryImplCaller) Length(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _NodesRegistryImpl.contract.Call(opts, &out, "length")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Length is a free data retrieval call binding the contract method 0x1f7b6d32.
//
// Solidity: function length() view returns(uint256)
func (_NodesRegistryImpl *NodesRegistryImplSession) Length() (*big.Int, error) {
	return _NodesRegistryImpl.Contract.Length(&_NodesRegistryImpl.CallOpts)
}

// Length is a free data retrieval call binding the contract method 0x1f7b6d32.
//
// Solidity: function length() view returns(uint256)
func (_NodesRegistryImpl *NodesRegistryImplCallerSession) Length() (*big.Int, error) {
	return _NodesRegistryImpl.Contract.Length(&_NodesRegistryImpl.CallOpts)
}

// StakeToken is a free data retrieval call binding the contract method 0x51ed6a30.
//
// Solidity: function stakeToken() view returns(address)
func (_NodesRegistryImpl *NodesRegistryImplCaller) StakeToken(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _NodesRegistryImpl.contract.Call(opts, &out, "stakeToken")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// StakeToken is a free data retrieval call binding the contract method 0x51ed6a30.
//
// Solidity: function stakeToken() view returns(address)
func (_NodesRegistryImpl *NodesRegistryImplSession) StakeToken() (common.Address, error) {
	return _NodesRegistryImpl.Contract.StakeToken(&_NodesRegistryImpl.CallOpts)
}

// StakeToken is a free data retrieval call binding the contract method 0x51ed6a30.
//
// Solidity: function stakeToken() view returns(address)
func (_NodesRegistryImpl *NodesRegistryImplCallerSession) StakeToken() (common.Address, error) {
	return _NodesRegistryImpl.Contract.StakeToken(&_NodesRegistryImpl.CallOpts)
}

// AllocGPU is a paid mutator transaction binding the contract method 0x6252e1c2.
//
// Solidity: function allocGPU(uint256 startIndex, string[] gpuTypes, uint256[] gpuNums) returns((address,string,uint256)[] gpuNodes, uint256 len)
func (_NodesRegistryImpl *NodesRegistryImplTransactor) AllocGPU(opts *bind.TransactOpts, startIndex *big.Int, gpuTypes []string, gpuNums []*big.Int) (*types.Transaction, error) {
	return _NodesRegistryImpl.contract.Transact(opts, "allocGPU", startIndex, gpuTypes, gpuNums)
}

// AllocGPU is a paid mutator transaction binding the contract method 0x6252e1c2.
//
// Solidity: function allocGPU(uint256 startIndex, string[] gpuTypes, uint256[] gpuNums) returns((address,string,uint256)[] gpuNodes, uint256 len)
func (_NodesRegistryImpl *NodesRegistryImplSession) AllocGPU(startIndex *big.Int, gpuTypes []string, gpuNums []*big.Int) (*types.Transaction, error) {
	return _NodesRegistryImpl.Contract.AllocGPU(&_NodesRegistryImpl.TransactOpts, startIndex, gpuTypes, gpuNums)
}

// AllocGPU is a paid mutator transaction binding the contract method 0x6252e1c2.
//
// Solidity: function allocGPU(uint256 startIndex, string[] gpuTypes, uint256[] gpuNums) returns((address,string,uint256)[] gpuNodes, uint256 len)
func (_NodesRegistryImpl *NodesRegistryImplTransactorSession) AllocGPU(startIndex *big.Int, gpuTypes []string, gpuNums []*big.Int) (*types.Transaction, error) {
	return _NodesRegistryImpl.Contract.AllocGPU(&_NodesRegistryImpl.TransactOpts, startIndex, gpuTypes, gpuNums)
}

// Attach is a paid mutator transaction binding the contract method 0x7a0ca1e2.
//
// Solidity: function attach(address server) returns()
func (_NodesRegistryImpl *NodesRegistryImplTransactor) Attach(opts *bind.TransactOpts, server common.Address) (*types.Transaction, error) {
	return _NodesRegistryImpl.contract.Transact(opts, "attach", server)
}

// Attach is a paid mutator transaction binding the contract method 0x7a0ca1e2.
//
// Solidity: function attach(address server) returns()
func (_NodesRegistryImpl *NodesRegistryImplSession) Attach(server common.Address) (*types.Transaction, error) {
	return _NodesRegistryImpl.Contract.Attach(&_NodesRegistryImpl.TransactOpts, server)
}

// Attach is a paid mutator transaction binding the contract method 0x7a0ca1e2.
//
// Solidity: function attach(address server) returns()
func (_NodesRegistryImpl *NodesRegistryImplTransactorSession) Attach(server common.Address) (*types.Transaction, error) {
	return _NodesRegistryImpl.Contract.Attach(&_NodesRegistryImpl.TransactOpts, server)
}

// DeregisterNode is a paid mutator transaction binding the contract method 0x18b1c081.
//
// Solidity: function deregisterNode() returns()
func (_NodesRegistryImpl *NodesRegistryImplTransactor) DeregisterNode(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _NodesRegistryImpl.contract.Transact(opts, "deregisterNode")
}

// DeregisterNode is a paid mutator transaction binding the contract method 0x18b1c081.
//
// Solidity: function deregisterNode() returns()
func (_NodesRegistryImpl *NodesRegistryImplSession) DeregisterNode() (*types.Transaction, error) {
	return _NodesRegistryImpl.Contract.DeregisterNode(&_NodesRegistryImpl.TransactOpts)
}

// DeregisterNode is a paid mutator transaction binding the contract method 0x18b1c081.
//
// Solidity: function deregisterNode() returns()
func (_NodesRegistryImpl *NodesRegistryImplTransactorSession) DeregisterNode() (*types.Transaction, error) {
	return _NodesRegistryImpl.Contract.DeregisterNode(&_NodesRegistryImpl.TransactOpts)
}

// Detach is a paid mutator transaction binding the contract method 0xceb6c343.
//
// Solidity: function detach(address server) returns()
func (_NodesRegistryImpl *NodesRegistryImplTransactor) Detach(opts *bind.TransactOpts, server common.Address) (*types.Transaction, error) {
	return _NodesRegistryImpl.contract.Transact(opts, "detach", server)
}

// Detach is a paid mutator transaction binding the contract method 0xceb6c343.
//
// Solidity: function detach(address server) returns()
func (_NodesRegistryImpl *NodesRegistryImplSession) Detach(server common.Address) (*types.Transaction, error) {
	return _NodesRegistryImpl.Contract.Detach(&_NodesRegistryImpl.TransactOpts, server)
}

// Detach is a paid mutator transaction binding the contract method 0xceb6c343.
//
// Solidity: function detach(address server) returns()
func (_NodesRegistryImpl *NodesRegistryImplTransactorSession) Detach(server common.Address) (*types.Transaction, error) {
	return _NodesRegistryImpl.Contract.Detach(&_NodesRegistryImpl.TransactOpts, server)
}

// FreeGPU is a paid mutator transaction binding the contract method 0x036fe9c2.
//
// Solidity: function freeGPU((address,string,uint256)[] gpuNodes) returns()
func (_NodesRegistryImpl *NodesRegistryImplTransactor) FreeGPU(opts *bind.TransactOpts, gpuNodes []NodeComputeUsed) (*types.Transaction, error) {
	return _NodesRegistryImpl.contract.Transact(opts, "freeGPU", gpuNodes)
}

// FreeGPU is a paid mutator transaction binding the contract method 0x036fe9c2.
//
// Solidity: function freeGPU((address,string,uint256)[] gpuNodes) returns()
func (_NodesRegistryImpl *NodesRegistryImplSession) FreeGPU(gpuNodes []NodeComputeUsed) (*types.Transaction, error) {
	return _NodesRegistryImpl.Contract.FreeGPU(&_NodesRegistryImpl.TransactOpts, gpuNodes)
}

// FreeGPU is a paid mutator transaction binding the contract method 0x036fe9c2.
//
// Solidity: function freeGPU((address,string,uint256)[] gpuNodes) returns()
func (_NodesRegistryImpl *NodesRegistryImplTransactorSession) FreeGPU(gpuNodes []NodeComputeUsed) (*types.Transaction, error) {
	return _NodesRegistryImpl.Contract.FreeGPU(&_NodesRegistryImpl.TransactOpts, gpuNodes)
}

// NodesRegistryImplInitialize is a paid mutator transaction binding the contract method 0x3edbf179.
//
// Solidity: function nodesRegistryImpl_initialize((address,string,address,string[],uint256[])[] _nodesInfos, address _allocator, address _stakeToken) returns()
func (_NodesRegistryImpl *NodesRegistryImplTransactor) NodesRegistryImplInitialize(opts *bind.TransactOpts, _nodesInfos []NodeInfo, _allocator common.Address, _stakeToken common.Address) (*types.Transaction, error) {
	return _NodesRegistryImpl.contract.Transact(opts, "nodesRegistryImpl_initialize", _nodesInfos, _allocator, _stakeToken)
}

// NodesRegistryImplInitialize is a paid mutator transaction binding the contract method 0x3edbf179.
//
// Solidity: function nodesRegistryImpl_initialize((address,string,address,string[],uint256[])[] _nodesInfos, address _allocator, address _stakeToken) returns()
func (_NodesRegistryImpl *NodesRegistryImplSession) NodesRegistryImplInitialize(_nodesInfos []NodeInfo, _allocator common.Address, _stakeToken common.Address) (*types.Transaction, error) {
	return _NodesRegistryImpl.Contract.NodesRegistryImplInitialize(&_NodesRegistryImpl.TransactOpts, _nodesInfos, _allocator, _stakeToken)
}

// NodesRegistryImplInitialize is a paid mutator transaction binding the contract method 0x3edbf179.
//
// Solidity: function nodesRegistryImpl_initialize((address,string,address,string[],uint256[])[] _nodesInfos, address _allocator, address _stakeToken) returns()
func (_NodesRegistryImpl *NodesRegistryImplTransactorSession) NodesRegistryImplInitialize(_nodesInfos []NodeInfo, _allocator common.Address, _stakeToken common.Address) (*types.Transaction, error) {
	return _NodesRegistryImpl.Contract.NodesRegistryImplInitialize(&_NodesRegistryImpl.TransactOpts, _nodesInfos, _allocator, _stakeToken)
}

// RegisterNode is a paid mutator transaction binding the contract method 0xefca74d2.
//
// Solidity: function registerNode(address wallet, string aliasIdentifier, string[] gpuTypes, uint256[] gpuNums) payable returns()
func (_NodesRegistryImpl *NodesRegistryImplTransactor) RegisterNode(opts *bind.TransactOpts, wallet common.Address, aliasIdentifier string, gpuTypes []string, gpuNums []*big.Int) (*types.Transaction, error) {
	return _NodesRegistryImpl.contract.Transact(opts, "registerNode", wallet, aliasIdentifier, gpuTypes, gpuNums)
}

// RegisterNode is a paid mutator transaction binding the contract method 0xefca74d2.
//
// Solidity: function registerNode(address wallet, string aliasIdentifier, string[] gpuTypes, uint256[] gpuNums) payable returns()
func (_NodesRegistryImpl *NodesRegistryImplSession) RegisterNode(wallet common.Address, aliasIdentifier string, gpuTypes []string, gpuNums []*big.Int) (*types.Transaction, error) {
	return _NodesRegistryImpl.Contract.RegisterNode(&_NodesRegistryImpl.TransactOpts, wallet, aliasIdentifier, gpuTypes, gpuNums)
}

// RegisterNode is a paid mutator transaction binding the contract method 0xefca74d2.
//
// Solidity: function registerNode(address wallet, string aliasIdentifier, string[] gpuTypes, uint256[] gpuNums) payable returns()
func (_NodesRegistryImpl *NodesRegistryImplTransactorSession) RegisterNode(wallet common.Address, aliasIdentifier string, gpuTypes []string, gpuNums []*big.Int) (*types.Transaction, error) {
	return _NodesRegistryImpl.Contract.RegisterNode(&_NodesRegistryImpl.TransactOpts, wallet, aliasIdentifier, gpuTypes, gpuNums)
}

// NodesRegistryImplAuthorizedIterator is returned from FilterAuthorized and is used to iterate over the raw logs and unpacked data for Authorized events raised by the NodesRegistryImpl contract.
type NodesRegistryImplAuthorizedIterator struct {
	Event *NodesRegistryImplAuthorized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NodesRegistryImplAuthorizedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NodesRegistryImplAuthorized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NodesRegistryImplAuthorized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NodesRegistryImplAuthorizedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NodesRegistryImplAuthorizedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NodesRegistryImplAuthorized represents a Authorized event raised by the NodesRegistryImpl contract.
type NodesRegistryImplAuthorized struct {
	Owner   common.Address
	Spender common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterAuthorized is a free log retrieval operation binding the contract event 0xf5a7f4fb8a92356e8c8c4ae7ac3589908381450500a7e2fd08c95600021ee889.
//
// Solidity: event Authorized(address indexed owner, address indexed spender)
func (_NodesRegistryImpl *NodesRegistryImplFilterer) FilterAuthorized(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*NodesRegistryImplAuthorizedIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _NodesRegistryImpl.contract.FilterLogs(opts, "Authorized", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &NodesRegistryImplAuthorizedIterator{contract: _NodesRegistryImpl.contract, event: "Authorized", logs: logs, sub: sub}, nil
}

// WatchAuthorized is a free log subscription operation binding the contract event 0xf5a7f4fb8a92356e8c8c4ae7ac3589908381450500a7e2fd08c95600021ee889.
//
// Solidity: event Authorized(address indexed owner, address indexed spender)
func (_NodesRegistryImpl *NodesRegistryImplFilterer) WatchAuthorized(opts *bind.WatchOpts, sink chan<- *NodesRegistryImplAuthorized, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _NodesRegistryImpl.contract.WatchLogs(opts, "Authorized", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NodesRegistryImplAuthorized)
				if err := _NodesRegistryImpl.contract.UnpackLog(event, "Authorized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAuthorized is a log parse operation binding the contract event 0xf5a7f4fb8a92356e8c8c4ae7ac3589908381450500a7e2fd08c95600021ee889.
//
// Solidity: event Authorized(address indexed owner, address indexed spender)
func (_NodesRegistryImpl *NodesRegistryImplFilterer) ParseAuthorized(log types.Log) (*NodesRegistryImplAuthorized, error) {
	event := new(NodesRegistryImplAuthorized)
	if err := _NodesRegistryImpl.contract.UnpackLog(event, "Authorized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NodesRegistryImplNodeActivedIterator is returned from FilterNodeActived and is used to iterate over the raw logs and unpacked data for NodeActived events raised by the NodesRegistryImpl contract.
type NodesRegistryImplNodeActivedIterator struct {
	Event *NodesRegistryImplNodeActived // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NodesRegistryImplNodeActivedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NodesRegistryImplNodeActived)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NodesRegistryImplNodeActived)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NodesRegistryImplNodeActivedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NodesRegistryImplNodeActivedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NodesRegistryImplNodeActived represents a NodeActived event raised by the NodesRegistryImpl contract.
type NodesRegistryImplNodeActived struct {
	Wallet          common.Address
	Identifier      common.Address
	Time            *big.Int
	AliasIdentifier string
	GpuTypes        []string
	GpuNums         []*big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterNodeActived is a free log retrieval operation binding the contract event 0xb0a73f160683fa6bd1601bd25cd9e2addc090f0a74959bf51c6a2a4560af6f5f.
//
// Solidity: event NodeActived(address indexed wallet, address identifier, uint256 time, string aliasIdentifier, string[] gpuTypes, uint256[] gpuNums)
func (_NodesRegistryImpl *NodesRegistryImplFilterer) FilterNodeActived(opts *bind.FilterOpts, wallet []common.Address) (*NodesRegistryImplNodeActivedIterator, error) {

	var walletRule []interface{}
	for _, walletItem := range wallet {
		walletRule = append(walletRule, walletItem)
	}

	logs, sub, err := _NodesRegistryImpl.contract.FilterLogs(opts, "NodeActived", walletRule)
	if err != nil {
		return nil, err
	}
	return &NodesRegistryImplNodeActivedIterator{contract: _NodesRegistryImpl.contract, event: "NodeActived", logs: logs, sub: sub}, nil
}

// WatchNodeActived is a free log subscription operation binding the contract event 0xb0a73f160683fa6bd1601bd25cd9e2addc090f0a74959bf51c6a2a4560af6f5f.
//
// Solidity: event NodeActived(address indexed wallet, address identifier, uint256 time, string aliasIdentifier, string[] gpuTypes, uint256[] gpuNums)
func (_NodesRegistryImpl *NodesRegistryImplFilterer) WatchNodeActived(opts *bind.WatchOpts, sink chan<- *NodesRegistryImplNodeActived, wallet []common.Address) (event.Subscription, error) {

	var walletRule []interface{}
	for _, walletItem := range wallet {
		walletRule = append(walletRule, walletItem)
	}

	logs, sub, err := _NodesRegistryImpl.contract.WatchLogs(opts, "NodeActived", walletRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NodesRegistryImplNodeActived)
				if err := _NodesRegistryImpl.contract.UnpackLog(event, "NodeActived", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNodeActived is a log parse operation binding the contract event 0xb0a73f160683fa6bd1601bd25cd9e2addc090f0a74959bf51c6a2a4560af6f5f.
//
// Solidity: event NodeActived(address indexed wallet, address identifier, uint256 time, string aliasIdentifier, string[] gpuTypes, uint256[] gpuNums)
func (_NodesRegistryImpl *NodesRegistryImplFilterer) ParseNodeActived(log types.Log) (*NodesRegistryImplNodeActived, error) {
	event := new(NodesRegistryImplNodeActived)
	if err := _NodesRegistryImpl.contract.UnpackLog(event, "NodeActived", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NodesRegistryImplNodeAttachedIterator is returned from FilterNodeAttached and is used to iterate over the raw logs and unpacked data for NodeAttached events raised by the NodesRegistryImpl contract.
type NodesRegistryImplNodeAttachedIterator struct {
	Event *NodesRegistryImplNodeAttached // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NodesRegistryImplNodeAttachedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NodesRegistryImplNodeAttached)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NodesRegistryImplNodeAttached)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NodesRegistryImplNodeAttachedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NodesRegistryImplNodeAttachedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NodesRegistryImplNodeAttached represents a NodeAttached event raised by the NodesRegistryImpl contract.
type NodesRegistryImplNodeAttached struct {
	IdentifierOfProvider common.Address
	IdentifierOfServer   common.Address
	Raw                  types.Log // Blockchain specific contextual infos
}

// FilterNodeAttached is a free log retrieval operation binding the contract event 0x042e2dbbe7288392f225b5cc7f610946ae1a1e8673b3f8ce4f6fc3bc6dee5aa6.
//
// Solidity: event NodeAttached(address indexed identifierOfProvider, address indexed identifierOfServer)
func (_NodesRegistryImpl *NodesRegistryImplFilterer) FilterNodeAttached(opts *bind.FilterOpts, identifierOfProvider []common.Address, identifierOfServer []common.Address) (*NodesRegistryImplNodeAttachedIterator, error) {

	var identifierOfProviderRule []interface{}
	for _, identifierOfProviderItem := range identifierOfProvider {
		identifierOfProviderRule = append(identifierOfProviderRule, identifierOfProviderItem)
	}
	var identifierOfServerRule []interface{}
	for _, identifierOfServerItem := range identifierOfServer {
		identifierOfServerRule = append(identifierOfServerRule, identifierOfServerItem)
	}

	logs, sub, err := _NodesRegistryImpl.contract.FilterLogs(opts, "NodeAttached", identifierOfProviderRule, identifierOfServerRule)
	if err != nil {
		return nil, err
	}
	return &NodesRegistryImplNodeAttachedIterator{contract: _NodesRegistryImpl.contract, event: "NodeAttached", logs: logs, sub: sub}, nil
}

// WatchNodeAttached is a free log subscription operation binding the contract event 0x042e2dbbe7288392f225b5cc7f610946ae1a1e8673b3f8ce4f6fc3bc6dee5aa6.
//
// Solidity: event NodeAttached(address indexed identifierOfProvider, address indexed identifierOfServer)
func (_NodesRegistryImpl *NodesRegistryImplFilterer) WatchNodeAttached(opts *bind.WatchOpts, sink chan<- *NodesRegistryImplNodeAttached, identifierOfProvider []common.Address, identifierOfServer []common.Address) (event.Subscription, error) {

	var identifierOfProviderRule []interface{}
	for _, identifierOfProviderItem := range identifierOfProvider {
		identifierOfProviderRule = append(identifierOfProviderRule, identifierOfProviderItem)
	}
	var identifierOfServerRule []interface{}
	for _, identifierOfServerItem := range identifierOfServer {
		identifierOfServerRule = append(identifierOfServerRule, identifierOfServerItem)
	}

	logs, sub, err := _NodesRegistryImpl.contract.WatchLogs(opts, "NodeAttached", identifierOfProviderRule, identifierOfServerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NodesRegistryImplNodeAttached)
				if err := _NodesRegistryImpl.contract.UnpackLog(event, "NodeAttached", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNodeAttached is a log parse operation binding the contract event 0x042e2dbbe7288392f225b5cc7f610946ae1a1e8673b3f8ce4f6fc3bc6dee5aa6.
//
// Solidity: event NodeAttached(address indexed identifierOfProvider, address indexed identifierOfServer)
func (_NodesRegistryImpl *NodesRegistryImplFilterer) ParseNodeAttached(log types.Log) (*NodesRegistryImplNodeAttached, error) {
	event := new(NodesRegistryImplNodeAttached)
	if err := _NodesRegistryImpl.contract.UnpackLog(event, "NodeAttached", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NodesRegistryImplNodeDeregisteredIterator is returned from FilterNodeDeregistered and is used to iterate over the raw logs and unpacked data for NodeDeregistered events raised by the NodesRegistryImpl contract.
type NodesRegistryImplNodeDeregisteredIterator struct {
	Event *NodesRegistryImplNodeDeregistered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NodesRegistryImplNodeDeregisteredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NodesRegistryImplNodeDeregistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NodesRegistryImplNodeDeregistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NodesRegistryImplNodeDeregisteredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NodesRegistryImplNodeDeregisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NodesRegistryImplNodeDeregistered represents a NodeDeregistered event raised by the NodesRegistryImpl contract.
type NodesRegistryImplNodeDeregistered struct {
	Identifier      common.Address
	Time            *big.Int
	AliasIdentifier string
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterNodeDeregistered is a free log retrieval operation binding the contract event 0x60d01d146c7aa1a7d4e3fdd5543872f7d5b2a241980a66b3552ae1a86ae18453.
//
// Solidity: event NodeDeregistered(address indexed identifier, uint256 time, string aliasIdentifier)
func (_NodesRegistryImpl *NodesRegistryImplFilterer) FilterNodeDeregistered(opts *bind.FilterOpts, identifier []common.Address) (*NodesRegistryImplNodeDeregisteredIterator, error) {

	var identifierRule []interface{}
	for _, identifierItem := range identifier {
		identifierRule = append(identifierRule, identifierItem)
	}

	logs, sub, err := _NodesRegistryImpl.contract.FilterLogs(opts, "NodeDeregistered", identifierRule)
	if err != nil {
		return nil, err
	}
	return &NodesRegistryImplNodeDeregisteredIterator{contract: _NodesRegistryImpl.contract, event: "NodeDeregistered", logs: logs, sub: sub}, nil
}

// WatchNodeDeregistered is a free log subscription operation binding the contract event 0x60d01d146c7aa1a7d4e3fdd5543872f7d5b2a241980a66b3552ae1a86ae18453.
//
// Solidity: event NodeDeregistered(address indexed identifier, uint256 time, string aliasIdentifier)
func (_NodesRegistryImpl *NodesRegistryImplFilterer) WatchNodeDeregistered(opts *bind.WatchOpts, sink chan<- *NodesRegistryImplNodeDeregistered, identifier []common.Address) (event.Subscription, error) {

	var identifierRule []interface{}
	for _, identifierItem := range identifier {
		identifierRule = append(identifierRule, identifierItem)
	}

	logs, sub, err := _NodesRegistryImpl.contract.WatchLogs(opts, "NodeDeregistered", identifierRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NodesRegistryImplNodeDeregistered)
				if err := _NodesRegistryImpl.contract.UnpackLog(event, "NodeDeregistered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNodeDeregistered is a log parse operation binding the contract event 0x60d01d146c7aa1a7d4e3fdd5543872f7d5b2a241980a66b3552ae1a86ae18453.
//
// Solidity: event NodeDeregistered(address indexed identifier, uint256 time, string aliasIdentifier)
func (_NodesRegistryImpl *NodesRegistryImplFilterer) ParseNodeDeregistered(log types.Log) (*NodesRegistryImplNodeDeregistered, error) {
	event := new(NodesRegistryImplNodeDeregistered)
	if err := _NodesRegistryImpl.contract.UnpackLog(event, "NodeDeregistered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NodesRegistryImplNodeDetachedIterator is returned from FilterNodeDetached and is used to iterate over the raw logs and unpacked data for NodeDetached events raised by the NodesRegistryImpl contract.
type NodesRegistryImplNodeDetachedIterator struct {
	Event *NodesRegistryImplNodeDetached // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NodesRegistryImplNodeDetachedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NodesRegistryImplNodeDetached)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NodesRegistryImplNodeDetached)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NodesRegistryImplNodeDetachedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NodesRegistryImplNodeDetachedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NodesRegistryImplNodeDetached represents a NodeDetached event raised by the NodesRegistryImpl contract.
type NodesRegistryImplNodeDetached struct {
	IdentifierOfProvider common.Address
	IdentifierOfServer   common.Address
	Raw                  types.Log // Blockchain specific contextual infos
}

// FilterNodeDetached is a free log retrieval operation binding the contract event 0x864dd06d15940858b627540246db79e66082ff76b9712b0bb5d483d168b1cd18.
//
// Solidity: event NodeDetached(address indexed identifierOfProvider, address indexed identifierOfServer)
func (_NodesRegistryImpl *NodesRegistryImplFilterer) FilterNodeDetached(opts *bind.FilterOpts, identifierOfProvider []common.Address, identifierOfServer []common.Address) (*NodesRegistryImplNodeDetachedIterator, error) {

	var identifierOfProviderRule []interface{}
	for _, identifierOfProviderItem := range identifierOfProvider {
		identifierOfProviderRule = append(identifierOfProviderRule, identifierOfProviderItem)
	}
	var identifierOfServerRule []interface{}
	for _, identifierOfServerItem := range identifierOfServer {
		identifierOfServerRule = append(identifierOfServerRule, identifierOfServerItem)
	}

	logs, sub, err := _NodesRegistryImpl.contract.FilterLogs(opts, "NodeDetached", identifierOfProviderRule, identifierOfServerRule)
	if err != nil {
		return nil, err
	}
	return &NodesRegistryImplNodeDetachedIterator{contract: _NodesRegistryImpl.contract, event: "NodeDetached", logs: logs, sub: sub}, nil
}

// WatchNodeDetached is a free log subscription operation binding the contract event 0x864dd06d15940858b627540246db79e66082ff76b9712b0bb5d483d168b1cd18.
//
// Solidity: event NodeDetached(address indexed identifierOfProvider, address indexed identifierOfServer)
func (_NodesRegistryImpl *NodesRegistryImplFilterer) WatchNodeDetached(opts *bind.WatchOpts, sink chan<- *NodesRegistryImplNodeDetached, identifierOfProvider []common.Address, identifierOfServer []common.Address) (event.Subscription, error) {

	var identifierOfProviderRule []interface{}
	for _, identifierOfProviderItem := range identifierOfProvider {
		identifierOfProviderRule = append(identifierOfProviderRule, identifierOfProviderItem)
	}
	var identifierOfServerRule []interface{}
	for _, identifierOfServerItem := range identifierOfServer {
		identifierOfServerRule = append(identifierOfServerRule, identifierOfServerItem)
	}

	logs, sub, err := _NodesRegistryImpl.contract.WatchLogs(opts, "NodeDetached", identifierOfProviderRule, identifierOfServerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NodesRegistryImplNodeDetached)
				if err := _NodesRegistryImpl.contract.UnpackLog(event, "NodeDetached", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNodeDetached is a log parse operation binding the contract event 0x864dd06d15940858b627540246db79e66082ff76b9712b0bb5d483d168b1cd18.
//
// Solidity: event NodeDetached(address indexed identifierOfProvider, address indexed identifierOfServer)
func (_NodesRegistryImpl *NodesRegistryImplFilterer) ParseNodeDetached(log types.Log) (*NodesRegistryImplNodeDetached, error) {
	event := new(NodesRegistryImplNodeDetached)
	if err := _NodesRegistryImpl.contract.UnpackLog(event, "NodeDetached", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NodesRegistryImplNodeRegisteredIterator is returned from FilterNodeRegistered and is used to iterate over the raw logs and unpacked data for NodeRegistered events raised by the NodesRegistryImpl contract.
type NodesRegistryImplNodeRegisteredIterator struct {
	Event *NodesRegistryImplNodeRegistered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NodesRegistryImplNodeRegisteredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NodesRegistryImplNodeRegistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NodesRegistryImplNodeRegistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NodesRegistryImplNodeRegisteredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NodesRegistryImplNodeRegisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NodesRegistryImplNodeRegistered represents a NodeRegistered event raised by the NodesRegistryImpl contract.
type NodesRegistryImplNodeRegistered struct {
	Wallet          common.Address
	Identifier      common.Address
	Time            *big.Int
	AliasIdentifier string
	GpuTypes        []string
	GpuNums         []*big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterNodeRegistered is a free log retrieval operation binding the contract event 0x99c250edfb33141684f230eecda8aa955bf0d62d17bcaaab0ab43f318f3637b0.
//
// Solidity: event NodeRegistered(address indexed wallet, address identifier, uint256 time, string aliasIdentifier, string[] gpuTypes, uint256[] gpuNums)
func (_NodesRegistryImpl *NodesRegistryImplFilterer) FilterNodeRegistered(opts *bind.FilterOpts, wallet []common.Address) (*NodesRegistryImplNodeRegisteredIterator, error) {

	var walletRule []interface{}
	for _, walletItem := range wallet {
		walletRule = append(walletRule, walletItem)
	}

	logs, sub, err := _NodesRegistryImpl.contract.FilterLogs(opts, "NodeRegistered", walletRule)
	if err != nil {
		return nil, err
	}
	return &NodesRegistryImplNodeRegisteredIterator{contract: _NodesRegistryImpl.contract, event: "NodeRegistered", logs: logs, sub: sub}, nil
}

// WatchNodeRegistered is a free log subscription operation binding the contract event 0x99c250edfb33141684f230eecda8aa955bf0d62d17bcaaab0ab43f318f3637b0.
//
// Solidity: event NodeRegistered(address indexed wallet, address identifier, uint256 time, string aliasIdentifier, string[] gpuTypes, uint256[] gpuNums)
func (_NodesRegistryImpl *NodesRegistryImplFilterer) WatchNodeRegistered(opts *bind.WatchOpts, sink chan<- *NodesRegistryImplNodeRegistered, wallet []common.Address) (event.Subscription, error) {

	var walletRule []interface{}
	for _, walletItem := range wallet {
		walletRule = append(walletRule, walletItem)
	}

	logs, sub, err := _NodesRegistryImpl.contract.WatchLogs(opts, "NodeRegistered", walletRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NodesRegistryImplNodeRegistered)
				if err := _NodesRegistryImpl.contract.UnpackLog(event, "NodeRegistered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseNodeRegistered is a log parse operation binding the contract event 0x99c250edfb33141684f230eecda8aa955bf0d62d17bcaaab0ab43f318f3637b0.
//
// Solidity: event NodeRegistered(address indexed wallet, address identifier, uint256 time, string aliasIdentifier, string[] gpuTypes, uint256[] gpuNums)
func (_NodesRegistryImpl *NodesRegistryImplFilterer) ParseNodeRegistered(log types.Log) (*NodesRegistryImplNodeRegistered, error) {
	event := new(NodesRegistryImplNodeRegistered)
	if err := _NodesRegistryImpl.contract.UnpackLog(event, "NodeRegistered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
